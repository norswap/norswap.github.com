<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>norswap</title>
    <description></description>      
    <link>http://norswap.com/</link>
    <atom:link href="http://norswap.com/atom.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Chose Tidbits: June 2019</title>
      <description>
&lt;p&gt;As some may know, I read a whole lot. So I thought to start a series to
highlight the most interesting things I&amp;#39;ve read recently, along with some quotes
or explanations why I liked it.&lt;/p&gt;
&lt;p&gt;We&amp;#39;re starting with stuff I read in June. More to follow when I have more time
and enough material!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://www.ribbonfarm.com/2019/05/27/weirding-diary-8/&quot;&gt;Weirding Diary: 8&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It doesn’t matter if everything else gets cheaper with Moore’s Law, if rent,
healthcare, and education costs race ahead of income. Those three costs drive
hard choices, and that is putting existential pressures on institutions.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- --&gt;

&lt;blockquote&gt;
&lt;p&gt;In the near future, all schools at all levels will either be de facto
rentier-elite finishing schools, or indoctrination schools for socialist
revolutionaries.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;http://visakanv.com/1000/0764-identify-the-valuable-squares-on-your-lifes-chessboard/&quot;&gt;Identify the valuable squares on your life’s chessboard&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I know what to do. I need to step outside the day-to-day challenges and
struggles. I need to see the bigger picture and be clear about what my
priorities are. What do I want? What do I not need to care about? I’m thinking
of a conversation or exchange I had with someone about why people struggle to
cope with everyday life – and I think that conversation went to a place that
was something like… people are trying to do more than they can, instead of
focusing on what’s most important. It’s a sort of… hedging. You hedge your
bets because you don’t know what’s important, and so you try to do a little
bit of everything. Better to score a few points in every bucket, than to put
all your points in the wrong bucket. But the best thing you can do is to put
most or all of your points in the right bucket. And can you know what the
right bucket is? In a sort of probablistic sense, yes! Imagine a sort of…
landscape, a grid. A chessboard, let’s say. 64 squares. That’s your life,
that’s the number of things you could theoretically possibly Every day you
have maybe 3-5 points you can assign to squares on the chessboard. You could
put all the points on one square, or you could distribute them across multiple
squares. The thing I think I ought to figure out is, which are the most
valuable squares? Do I know this? I think I know it subconsciously, and I
think I need to articulate it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=Un3p614XExc&quot;&gt;A Master Class in Jazz Performance and Creativity with Pianist Kenny
Werner&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This one is dense and packed with insight. If you do any kind of performance or
even just practice a trainable skill, it&amp;#39;s sure to resonate with you and give
you an idea or two.&lt;/p&gt;
&lt;p&gt;Here are some of the most striking insight for me, but again, yours will likely
be different:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Performance is about playing well within your zone of comfort.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Two reasons a performance doesn&amp;#39;t go well: lack of technique or not releasing
yourself to the zone. Don&amp;#39;t criticize yourself in performance.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Brainwash yourself to love every sound you make. When a musician enjoys what
he does, that&amp;#39;s half the attraction. Don&amp;#39;t react when you touch your
instrument — that gets in the way.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You don&amp;#39;t need to be unsatisfied in order to get better.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Practicing is not playing and enjoying. You should focus on the difficulties,
on what you can&amp;#39;t do yet. Specifically on those parts, don&amp;#39;t get side-tracked,
that&amp;#39;s not efficient.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://slatestarcodex.com/2019/06/03/repost-epistemic-learned-helplessness/&quot;&gt;Epistemic Learned Helplessness&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A friend recently complained about how many people lack the basic skill of
believing arguments. That is, if you have a valid argument for something, then
you should accept the conclusion. Even if the conclusion is unpopular, or
inconvenient, or you don’t like it. He envisioned an art of rationality that
would make people believe something after it had been proven to them.&lt;/p&gt;
&lt;p&gt;And I nodded my head, because it sounded reasonable enough, and it wasn’t
until a few hours later that I thought about it again and went “Wait, no, that
would be a terrible idea.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://slatestarcodex.com/2019/06/06/asymmetric-weapons-gone-bad/&quot;&gt;Asymmetric Weapons Gone Bad&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Every day we do things that we can’t easily justify. If someone were to argue
that we shouldn’t do the thing, they would win easily. We would respond by
cutting that person out of our life, and continuing to do the thing.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://meltingasphalt.com/social-status-down-the-rabbit-hole/&quot;&gt;Social Status: Down the Rabbit Hole&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There are two hierarchies of social status: dominance and prestige.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Avoidance vs. approach. Dominance works by inspiring fear and other
&amp;quot;avoidance&amp;quot; instincts, so that low-status people try to steer clear of
dominant individuals. Prestige, on the other hand, inspires admiration and
other &amp;quot;approach&amp;quot; instincts, so low-status people actively seek out
prestigious individuals and enjoy spending time around them.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Taking vs. giving. The perks of dominance are taken by force by the
high-status (dominant) individual. The perks of prestige, on the other hand,
are given to the high-status (prestigious) individual, freely, by the
low-status admirer.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Entitlement vs. gratitude. Dominant individuals expect deference from others
and treat it as their natural right. Prestigious individuals, on the other
hand, often make an elaborate show of humility when accepting the deference
of others. Performers bow as they&amp;#39;re being applauded. Oscar-winners
profusely thank their supporters. Lay people often blush and smile awkwardly
when they&amp;#39;re being celebrated, e.g., at a birthday party. To do otherwise —
to act entitled to admiration — would risk alienating one&amp;#39;s supporters.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://www.gwern.net/MLP&quot;&gt;MLP: Immanetizing The Equestrian&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;(Note: MLP means &amp;quot;My Little Poney&amp;quot;. Yup.)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;One of the ways in which MLP is unusual is, in addition to episodes
criticizing communism or egalitarianism, its implicit capitalist economy (in
contrast to most media where markets or capitalism are portrayed negatively
when any attention is paid to them); Equestria is not post-scarcity by magical
fiat but is capitalist to the core, and its prosperity is due the capitalism
and competition. And this capitalism contributes to the self-actualization of
ponies: to gain a sense of self-worth which is genuine and grounded in
reality, one must discover something one does well (finding one’s cutie-mark),
which is of value to one’s peers and society, and said value is only honestly
expressed when freely expressed against a background of genuinely competitive
options.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- --&gt;

&lt;blockquote&gt;
&lt;p&gt;Is it an accident that Jordan B. Peterson appeals to a similar demographic as
MLP, or that he conveys a similar message in his books like 12 Rules for Life?
He retells the cliches with conviction inside a societal vacuum. There is
still hope, you can always change, if you start now, you can “&amp;quot;clean your
room&amp;quot;”, and tame the chaos (Discord?) in your life to find a talent or niche
and develop into a valued social role that can provide a sense of self-worth…
There are some people who need to hear that specific message, just as there
are people who need to read Atlas Shrugged (while there are other people for
whom that’s the worst book possible—the right book for the right person). Both
Peterson and MLP provide specific recommendations (if not necessarily
flowcharts). But the key step is to simply start. Sometimes it takes just a
word, an admission to oneself that one has made a mistake up until now, to
reach out: “I’m sorry”. “I was wrong.” “I can’t do this any longer.” Saying
that it’s “too late” or that “a leopard can’t change its spots” is an
abdication of freedom and personal responsibility; when there is a choice to
which one has always said “no” before, the next time, one can say “yes”. The
tragedy of Voldemort in Harry Potter and the Deathly Hallows is he succumbs,
like Walter in Breaking Bad, to the deadly sin of pride: not that he was a
neglected child or that his soul is mutilated by murder, but that at the end,
when he’s already lost, Harry gives him a final chance, and in front of
everypony, he is unable to swallow his pride and surrender, and cannot, will
not, choose to stop being Voldemort and become only Tom Riddle again; that is
when he is truly damned and the end of his story.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://thezvi.wordpress.com/2017/07/20/change-is-bad/&quot;&gt;Change Is Bad&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The more optimized things currently are, the less likely any given change is
to be good.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://larspsyll.wordpress.com/2016/11/23/what-is-ergodicity-2/&quot;&gt;What is ergodicity?&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Suppose you are concerned with determining what the most visited parks in a
city are. One idea is to take a momentary snapshot: to see how many people are
this moment in park A, how many are in park B and so on. Another idea is to
look at one individual (or few of them) and to follow him for a certain period
of time, e.g. a year. Then, you observe how often the individual is going to
park A, how often he is going to park B and so on.&lt;/p&gt;
&lt;p&gt;Thus, you obtain two different results: one statistical analysis over the
entire ensemble of people at a certain moment in time, and one statistical
analysis for one person over a certain period of time. The first one may not
be representative for a longer period of time, while the second one may not be
representative for all the people.&lt;/p&gt;
&lt;p&gt;The idea is that an ensemble is ergodic if the two types of statistics give
the same result. Many ensembles, like the human populations, are not ergodic.&lt;/p&gt;
&lt;p&gt;We trust that a good/bad experience at a restaurant will repeat, but not that
if more black persons commit crimes, no black person is to be trusted.&lt;/p&gt;
&lt;p&gt;The answer is that the ensemble of meal in a restaurant is more or less
ergodic, while the ensemble of black people is not at all ergodic.&lt;/p&gt;
&lt;/blockquote&gt;
      </description>
      <pubDate>2019-09-14T22:00:00.000Z</pubDate>
      <link>http://norswap.com/chosen-tidbits-1</link>
      <guid isPermaLink="true">http://norswap.com/chosen-tidbits-1</guid>
    </item>
    <item>
      <title>Weight Training: Cut Edition</title>
      <description>
&lt;p&gt;Previously: &lt;a href=&quot;/weight-training&quot;&gt;One&lt;/a&gt; / &lt;a href=&quot;/weight-training-2&quot;&gt;Two&lt;/a&gt; / &lt;a href=&quot;/weight-training-3&quot;&gt;Three&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In &lt;a href=&quot;/weight-training-3&quot;&gt;my last post on the topic&lt;/a&gt;, I said I was going to go on a cut. Well,
now the cut is done, let&amp;#39;s discuss a bit!&lt;/p&gt;
&lt;p&gt;Was it a success? Well my stated goal was to acquire a six-pack, so in that
sense, no. But I learned a ton, and I did visibly lose a considerable amount of
fat and slimmed down from 90 kg to 83 kg over 15 weeks.&lt;/p&gt;
&lt;p&gt;I scrupulously transcribed my daily caloric expenditure and intake in a
&lt;a href=&quot;https://docs.google.com/spreadsheets/d/1kwGo8YRcEdPJotxaWLlc72pz6YvdU2ymKw_gFa_dKkY/edit?usp=sharing&quot;&gt;spreadsheet&lt;/a&gt;. All the numbers and metrics I discuss in this article are
recorded there!&lt;/p&gt;
&lt;h2 id=&quot;beginnings&quot;&gt;Beginnings&lt;/h2&gt;
&lt;p&gt;Initially, I went for a 700 kcal daily deficit. This would add up to a 4900 kcal
deficit per week, which represents about 630 grams of fat. As it turns out, this
is exactly 0.7% of my starting bodyweight of 90 kg, which is the recommended
weekly loss.&lt;/p&gt;
&lt;p&gt;I did struggle with the strict regimen initially. This was not an issue of will,
but rather an issue of organization. Too often I accidentally overshot my goal —
in fact my average daily deficit in the first four weeks was a measly 385. Oops.&lt;/p&gt;
&lt;p&gt;A remark on my method here: while I&amp;#39;m a fan of using a Fitbit smartwatch to
track caloric expenditure, it does add a bit of logistical uncertainty, as you
must estimate what the expenditure will be by the end of the day. Mostly, I
adapted to cope with this by having very light dinner meals, and potentially a
snack before going to bed. I&amp;#39;ll have more to say about the Fitbit towards the
end of the article.&lt;/p&gt;
&lt;p&gt;After four weeks, I ran a &lt;em&gt;refeed&lt;/em&gt; week, where I ate at maintenance. This is
done to prevent &lt;em&gt;metabolic adaptation&lt;/em&gt; in which your body gets used to get less
calories and adapts to burn less of them. That week was also a deload week where
I decreased my weights at the gym (otherwise I kept training using the
&lt;a href=&quot;/weight-training-3&quot;&gt;previously outlined program&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;In the second four-week period, I was able to average between 600 and 700
kcal of deficit daily - yay!&lt;/p&gt;
&lt;h2 id=&quot;is-it-working&quot;&gt;Is It Working?&lt;/h2&gt;
&lt;p&gt;So we have our caloric deficit down. But is it actually working as expected?&lt;/p&gt;
&lt;p&gt;To do this I compared my recorded weight to two measures of the estimated weight
given the recorded caloric deficit. The first estimated weight is global: it&amp;#39;s
my starting weight minus the fat weight loss predicted from the cumulated
caloric deficit. The second estimated weight is local: it&amp;#39;s computed in the same
way but only for one week, starting from the starting weight just before that
week.&lt;/p&gt;
&lt;p&gt;In order to predict the fat loss from a caloric deficit, you simply need to know
that a kilogram of fat is equivalent to about 7700 kcal (or 3500 kcal to a
pound).&lt;/p&gt;
&lt;p&gt;To ascertain whether I was on track, I further computed two weekly metrics: the
&lt;em&gt;average local error&lt;/em&gt; is the difference between the average locally predicted
weight and my average weight for that week ; the &lt;em&gt;average global error&lt;/em&gt; is the
same, but using the average globally predicted weight instead.&lt;/p&gt;
&lt;p&gt;Taking these averages allows smoothing over the noise inherent to weight
measurements: there can be big variations in water weight from one day to the
other (even though I always weighed myself in the morning after going to the
bathroom and before drinking anything).&lt;/p&gt;
&lt;p&gt;Another thing I did to be able to track my progress was compute a &lt;em&gt;smoothed&lt;/em&gt;
weight measurement: the daily smoothed weight is the average of the the weight
in a 5 day window surrounding the day under consideration. This was also the
basis I used to compute the local weight estimation.&lt;/p&gt;
&lt;p&gt;After the initial 5 week period (4 weeks + refeed week), I had lost 1.3 kg.
That is slighty (about 200 g) more than the model predicted. In general, the
average local and global errors were small (&amp;lt;= 100 g, either above or under)
during this period.&lt;/p&gt;
&lt;p&gt;After the second 5 week period, I had lost 3.6 kg in total, a whole kilogram
more than the global prediction! The data was much more noisy here, mostly the
global error increases in the negatives (underestimation) but it shot back
towards zero because of a weight measurement bump that normalized quickly. The
local error varied between 0 and -500g (underestimation).&lt;/p&gt;
&lt;p&gt;There is only one remaining uncertainty: was this weight loss fat loss... or
muscle loss?&lt;/p&gt;
&lt;p&gt;This is quite tricky to measure. The impedance scale I bought isn&amp;#39;t worth shit.
Methods requiring a &lt;a href=&quot;https://www.amazon.fr/CZ-Store-Adipom%C3%A8tre-%E2%9C%AE%E2%9C%AE100-GARANTIE-ANS%E2%9C%AE%E2%9C%AE-Pince-grasse-%E2%9C%AEOFFERT/dp/B072MBCSXD/ref=sr_1_3?__mk_fr_FR=%EF%BF%BDM%EF%BF%BD%25u017D%EF%BF%BD%EF%BF%BD&amp;amp;keywords=fat+caliper&amp;amp;qid=1568237305&amp;amp;s=gateway&amp;amp;sr=8-3&quot;&gt;fat caliper&lt;/a&gt; are janky... They require multiple measurements,
sometimes in location you can&amp;#39;t access on your own (back of the arm, shoulder
blade). I bought a cheap one and it&amp;#39;s also not quite clear how much you need to
press.&lt;/p&gt;
&lt;p&gt;The impedance scale at my gym (Basic Fit) seems a bit more accurate though,
reporting 17% body fat somewhere within the second four-week period, and 14% at
the end of the cut.&lt;/p&gt;
&lt;p&gt;In my spreadsheet, I estimated my starting percentage at 18% (based on visual
comparison to some online reference), which — assuming 100% of weight loss is
fat loss — would put me at 16.7% at the end of the four weeks period and 11.2%
at the end of the cut.&lt;/p&gt;
&lt;p&gt;There is another method, which consists of taking measurements of your waist and
your neck (using a regular meter), and which is &lt;em&gt;reportedly&lt;/em&gt; relatively accurate —
you can find a calculator &lt;a href=&quot;http://fitness.bizcalcs.com/Calculator.asp?Calc=Body-Fat-Navy&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;All the research points to the fact that, given a moderate deficit (the figure
of 0.7% of your starting bodyweight is often given), the overwhelming majority
of the weight loss should be fat — if you keep doing resistance (weight)
training and intaking enough proteins, which I did.&lt;/p&gt;
&lt;p&gt;There is a theory that you can only mobilize so much calories from fat mass
daily. Let&amp;#39;s look into it.&lt;/p&gt;
&lt;h2 id=&quot;a-detour-how-fast-can-you-actually-lose-fat&quot;&gt;A Detour: How Fast Can You Actually Lose Fat?&lt;/h2&gt;
&lt;p&gt;There is a theory saying that there is a limit on the calories that can be made
available from fat over a given time period. However, it&amp;#39;s not quite clear what
that limit is.&lt;/p&gt;
&lt;p&gt;A &lt;a href=&quot;https://www.sciencedirect.com/science/article/pii/S0022519304004175&quot;&gt;2005 study&lt;/a&gt; in theoretical biology found it to be 31 kcal per pound of body
fat daily (about 68 kcal per kilo). However, the author &lt;a href=&quot;https://reddit.com/r/loseit/comments/fo07j/if_youre_trying_to_lose_weight_keep_in_mind_that/c1hd7q1/&quot;&gt;reportedly&lt;/a&gt; later
developped a better model that brought the number down to about 22 kcal per
pound (48.5 kcal per kilo).&lt;/p&gt;
&lt;p&gt;There are a couple of caveats here. First, this is only one study. Second, this
is theoretical biology: it&amp;#39;s not possible to measure the calories fat gives out
directly, so this was established using indirect measurements and a theoretical
model.&lt;/p&gt;
&lt;p&gt;Third, the data for this study was taken from a 1950 study that starved 36
military men over a period of six months. I wasn&amp;#39;t able to get a copy of &lt;a href=&quot;https://psycnet.apa.org/record/1951-02195-000&quot;&gt;the
original&lt;/a&gt;, but found &lt;a href=&quot;https://archive.wphna.org/wp-content/uploads/2016/01/2005-Mad-Science-Museum-Ancel-Keys-Starvation.pdf&quot;&gt;an informal report&lt;/a&gt; from a now-dead website called &lt;em&gt;Mad
Science Museum&lt;/em&gt; (yup, my hobbies lead me down weird rabbit holes). The report is
quite a &amp;quot;fun&amp;quot; read (the experiment would never by approved by any modern ethics
board):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The stress proved too much for one of the men, twenty-four-year-old Franklin
Watkins. He began having vivid, disturbing dreams of cannibalism in which he
was eating the flesh of an old man. On trips into town (before the buddy
system had been implemented),he cheated extravagantly, downing milk shakes and
sundaes. Finally Keys confronted him, and Watkins broke down sobbing. Then he
grew angry and threatened to kill Keys and take his own life.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;But the take-away for our purposes was that:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;He designed the meals to be carbohydrate rich and protein poor, simulating
what people in Europe might be eating, with an emphasis on potatoes, cabbage,
macaroni, and whole wheat bread (all in meager amounts). Despite the reduction
in food, Keys insisted the men maintain their active lifestyle, including the
22-miles of walking each week.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;From what I know this is the abolute worse you can do to preserve muscle mass.
An effective muscle-preserving mass diet should include plenty of proteins, as
well as resistance training (to actually use the muscles — walking is no
substitute).&lt;/p&gt;
&lt;p&gt;This is not mentionned in the paper. On the whole, I&amp;#39;m not impressed with this
paper at all, and it&amp;#39;s kinda sad when a neophyte like myself can poke huge holes
in a paper that seems to hold such sway — even the Stronger by Science guys
&lt;a href=&quot;https://www.strongerbyscience.com/realistic-training-goals/&quot;&gt;quote it&lt;/a&gt;. I must say, though, that for a result that seems this important, it
has preciously little citations (only 21 according to Google Scholar).&lt;/p&gt;
&lt;p&gt;The starvation experiment also had an extremely long duration (6 months). I
didn&amp;#39;t dig in the math of the 2005 paper, but I wouldn&amp;#39;t be surprised that this
ends up screwing up the results as well, as the body will necessarily go into
some kind of profundly weird dysfunction given such extreme conditions.&lt;/p&gt;
&lt;p&gt;This study was popularized in the fitness community by one &lt;a href=&quot;https://bodyrecomposition.com/&quot;&gt;Lyle McDonald&lt;/a&gt;, to
the point that the 31 kcal/lb figure is often quoted as &amp;quot;Lyle McDonald&amp;#39;s rule of
31&amp;quot;. However, Lyle McDonald himself now &lt;a href=&quot;https://web.archive.org/web/20130728210211/forums.lylemcdonald.com/showthread.php?t=12760&quot;&gt;says&lt;/a&gt; that dieters can blow right past
the 31 figure if they eat enough protein and perform resistance training. He
also advocates the effectiveness of a short-duration (two weeks or less) rapid
fat loss diet where the caloric intake is sometimes less than 1000 kcal per day.&lt;/p&gt;
&lt;p&gt;In general, the reasonable consensus seems that the 22 kcal/lb figure can be
taken as a safe lower bound for fat loss and that it is likely possible to
exceed it without eating into muscles much for trained individuals.&lt;/p&gt;
&lt;p&gt;In my case, given my starting weight of 90 kg and assuming 18% body fat, the
safe 22 kcal/lb figure would have come down to a 785 kcal daily deficit, which
is close to the 700 kcal deficit I got from the 0.7% body weight heuristic.&lt;/p&gt;
&lt;p&gt;The idea that you can only mobilize so much calories from fat mass has one
important consequence. Assuming you want to lose fat at the maximum &amp;quot;safe&amp;quot; rate,
you will have to reduce your caloric deficit as your fat mass decreases!&lt;/p&gt;
&lt;p&gt;But, on the other hand, there is the phenomenon of &lt;em&gt;metabolic adaptation&lt;/em&gt;
wherein your body becomes more efficient and is able to squeeze more calories
from nutrients. So keeping a fixed deficit might not be a bad idea. As we&amp;#39;ll see
later, some step can be taken to combat metabolic adaptation.&lt;/p&gt;
&lt;h2 id=&quot;getting-serious--the-diet&quot;&gt;Getting Serious &amp;amp; The Diet&lt;/h2&gt;
&lt;p&gt;But back to my cut. When we left off, I had completed 10 weeks of cut, including
two refeed weeks, and lost 3.6 kg.&lt;/p&gt;
&lt;p&gt;It&amp;#39;s funny how memory goes: I thought I recalled hardship from that period,
which is why I decided to increase my deficit to 1000 kcal per day. But this
is actually not borne out in the numbers: in fact, I lost one kilogram more than
estimated!&lt;/p&gt;
&lt;p&gt;It is true however that I wasn&amp;#39;t going as fast as I could have: I was generally
undershooting the 700 kcal deficit goal by about 50 kcal, and the first
four weeks I had vastly undershot the goal. I was hoping that the cut would not
take much more than 3 months, and 9 weeks in, this meant only one month left!&lt;/p&gt;
&lt;p&gt;Hence, the next two weeks I ran a 1000 kcal deficit... and nothing bad happened.&lt;/p&gt;
&lt;p&gt;However, the increased deficit made my diet start being difficult. My daily
energy expenditure (as reported by the Fitbit smartwatch) will vary between 2400
and 3800 kcal daily. If I sit in a chair all day with no activity at all, it
will tend towards 2400. A lot of walking around or other activity assorted with
an intense 2 hours training session will push sometimes push it in the 3600-4000
range (interestingly, there is a lot more variation at the top than at the
bottom).&lt;/p&gt;
&lt;p&gt;With a 1000 kcal deficit, it means that in a low-activity day, I could end up
with a 1400 kcal budget at worst. This was problematic because I didn&amp;#39;t
alter my diet all that much: I kept eating the same kind of food I did before,
making sure to get about 2g of proteins per kg of lean mass. So when you eat a 1200
kcal burrito for lunch, that doesn&amp;#39;t leave a whole lot more calories for the
rest of the day. &lt;/p&gt;
&lt;p&gt;Regarding that 2g of proteins per kg of lean mass? I frequently undershot that
goal, but I think I got at least 140g per day, which is already plenty and is
&lt;em&gt;said&lt;/em&gt; to be enough to prevent muscle loss. That being said, with the 1000 kcal
deficit, it was clearly becoming difficult to even hit that diminished protein
goal.&lt;/p&gt;
&lt;p&gt;My answer to that challenge was to do something I hadn&amp;#39;t done yet: add cardio to
my training regimen on non-workout days. This ensured that every day saw a
minimum of physical activity, making it easier to hit my protein goals.&lt;/p&gt;
&lt;p&gt;After these two weeks, my weight loss was now 5.32kg. I also decided to have
another refeed week. Again, I&amp;#39;m kind of puzzled as to why I did this. Sure, a
1000 kcal deficit is not nothing, but going by the numbers, everything was going
according to plan.&lt;/p&gt;
&lt;p&gt;I followed this last refeed week by two final dieting week, one at a target 700
deficit (effectively: 635 average) and one at a target 1000 deficit
(effectively: 715). But for that last one I had the good excuse that it was the
final week before my thesis&amp;#39; deadline...&lt;/p&gt;
&lt;p&gt;Final tally: 7.02 kg lost in 14 weeks, including 3 refeed weeks.&lt;/p&gt;
&lt;h2 id=&quot;metabolic-adaptation--supplements&quot;&gt;Metabolic Adaptation &amp;amp; Supplements&lt;/h2&gt;
&lt;p&gt;As promised, a short discussion of metabolic adaptation. Metabolic adaptation is
&lt;a href=&quot;https://www.strongerbyscience.com/metabolic-adaptation/&quot;&gt;difficult&lt;/a&gt; because it does not have any single cause. When in significant
caloric deficit, your body will silmultaneously become more conservative in its
energy use, lowering your base metabolic rate (BMR) but it will also become more
efficient and effectively squeeze out more calories out of the food you consume
(you could say it &amp;quot;waste less&amp;quot; calories instead).&lt;/p&gt;
&lt;p&gt;What can you do about it? There are many things you can do to mitigate the
potential for metabolic adaptation that are basically good recommendations at
any time t: eat enough proteins, get enough sleep, don&amp;#39;t be too stressed. But
there are two more active interventions.&lt;/p&gt;
&lt;p&gt;The first is to break your diet and run a &amp;quot;refeed&amp;quot;.&lt;/p&gt;
&lt;p&gt;The idea is akin to that of a &amp;quot;cheat day&amp;quot; or &amp;quot;cheat meal&amp;quot;, but ran over a longer
period of time. The term can apparently reference different things, but in the
kind of refeed I have in mind here, you eat at maintenance — so very different
from a cheat meal where you&amp;#39;re allowed to gorge on whatever food you like.&lt;/p&gt;
&lt;p&gt;Cheat days apparently not enough to offset metabolic adaptation, hence the
recommendation of running a whole refeed week.&lt;/p&gt;
&lt;p&gt;Another important benefit of refeed weeks is that they offer a psychological
reprieve in a months-long dieting process.&lt;/p&gt;
&lt;p&gt;I should add that — having implemented ample refeeds — I saw no metabolic
adaptation effects. Would there have been some if I hadn&amp;#39;t done the refeed? Hard
to say. These problems are known to be much more prevalent when you get to lower
body fat levels (towards or beyond the 10% boundary for men).&lt;/p&gt;
&lt;p&gt;If you want know much, much more about metabolic adaptation, check out &lt;a href=&quot;https://www.strongerbyscience.com/metabolic-adaptation/&quot;&gt;The
Metabolic Adaptation Manual&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The second intervention you can run is through use of supplements. There aren&amp;#39;t
really any magical fat loss supplements, with maybe the exception of caffeine. I
managed to get my hand on the &lt;a href=&quot;https://examine.com/supplements/fat-loss/&quot;&gt;Examine&amp;#39;s fat loss supplement
guide&lt;/a&gt; and implemented what they recommended: caffeine,
synephedrine, white willow extract and yohimbine.&lt;/p&gt;
&lt;p&gt;I wasn&amp;#39;t always consistent with it — I ran out of white willow extract at some
point and had to reorder. Same with Yohimbine for the end of the cut.&lt;/p&gt;
&lt;p&gt;Honestly, I&amp;#39;m not sure these did much, and my inconsistencies certainly didn&amp;#39;t
impact the data. The only thing that did seem to have an effect was increasing
my caffeine consumption (through coffee). Caffeine has also other benefits for
weight training that are well supported (&lt;a href=&quot;https://www.strongerbyscience.com/caffeine/&quot;&gt;one&lt;/a&gt;, &lt;a href=&quot;https://examine.com/supplements/caffeine/&quot;&gt;two&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Caveats: given that I&amp;#39;m a relatively tall man, I might have needed to increase
the recommended doses (which are given irrespective of gender, size or weight).
I also &lt;a href=&quot;https://examine.com/supplements/yohimbine/&quot;&gt;read later&lt;/a&gt; that Yohimbine works better fasted and before workout —
which is not at all how I used it.&lt;/p&gt;
&lt;h2 id=&quot;results--intepretation&quot;&gt;Results &amp;amp; Intepretation&lt;/h2&gt;
&lt;p&gt;Okay, so I already gave the results, and much of the interpretation above. But
there are still things to highlight.&lt;/p&gt;
&lt;p&gt;So I lost 7 kilos. The final average global error was a mere -161 g — meaning
that I lost 161 g more than predicted based on the recorded caloric deficit.
During the process, the average global error went as high as -1000 g. Such
variance is not necessarily unexpected.&lt;/p&gt;
&lt;p&gt;The big question: was it all fat? Quite clearly (and visibly) fat was a big part
of it. As for whether muscle was part of the equation, that&amp;#39;s hard to tell as I
didn&amp;#39;t measure body fat during the process, except twice at they gym (once
during on May 3rd (second week) at 17.2% and once on August 17th (two weeks
after the end of the cut) at 14%.&lt;/p&gt;
&lt;p&gt;We can also use the spreadsheet data to compute the bodyfat reached when
assuming that 100% of the weight loss was fat. Supposing a 18% starting bodyfat
percentage, the end result is 11.15%. This seems too low (mostly visually), but
an alternative explanation to muscle loss is that part of this is water weight
due to diminished carbs intake. I don&amp;#39;t buy that explanation though — I weighted
82.7 on 17th August, about the same than at the end of the cut, and by then any
carbs restriction effect should have been gone.&lt;/p&gt;
&lt;p&gt;Another explanation: I didn&amp;#39;t set my initial body fat percentage high enough.
Setting the initial percentage at 20% brings the final percentage to 13.32% —
closer to the 14% impedance scale measurement.&lt;/p&gt;
&lt;p&gt;Another potential confounder here is muscle gain. When I started the cut, I was
still making steady strength gains in the program I outlined &lt;a href=&quot;/weight-training-3&quot;&gt;last time&lt;/a&gt;
— it&amp;#39;s not unconceivable to have made some small gains here even in a deficit.&lt;/p&gt;
&lt;p&gt;More relevant, I started training my abs and glutes much more vigorously (I
wasn&amp;#39;t targetting them at all before) during the last three weeks of the cut.
There, I clearly made some muscle gains — at least a little bit of which I
expect to have been made during those weeks.&lt;/p&gt;
&lt;p&gt;Two more signs we can look at for muscle loss is fatigue and what happened after
the cut. Regarding fatigue, I didn&amp;#39;t really progress my heavy pre-existing lifts
(deadlift, bench press, squat, etc) during the cut — but that was expected. In
reality, I had to deload the squat and the deadlift them fairly early in the
cycle for technique reasons (a &lt;a href=&quot;#the-exercise-corner&quot;&gt;further section&lt;/a&gt; of this article will talk about
that — it&amp;#39;s not connected to the cut). The bench and overhead press plateaued,
while the rest of the program progressed rather nicely. I didn&amp;#39;t feel tired at
all.&lt;/p&gt;
&lt;p&gt;Regarding what happened after the cut, my weight did not shot back up. I
actually only had one week of training after the cut, and then a full week of
holiday with no weight training (but a lot of walking). But even after, my
weight didn&amp;#39;t suddenly shot up even when I started running a caloric excess.
This means there probably wasn&amp;#39;t some easily recoverable &amp;quot;muscle memory&amp;quot; — but
also that the body didn&amp;#39;t overcompensate by storing lots of fat after the end of
the diet.&lt;/p&gt;
&lt;p&gt;So yeah... it worked rather well, but the jury is still split on whether it
worked optimally (no muscle lost) or not.&lt;/p&gt;
&lt;p&gt;Lazy Edit: So, if we ignore the issue of gained muscles AND if we assume that
the caloric trackins is accurate, there might be a way to know, which is to
solve the equations &lt;code&gt;WL = FL + ML&lt;/code&gt;, &lt;code&gt;CD = FL * 7700 + ML * 1540&lt;/code&gt;, where &lt;code&gt;WL&lt;/code&gt;,
&lt;code&gt;FL&lt;/code&gt; and &lt;code&gt;ML&lt;/code&gt; are weight loss, fat loss and muscle loss, while &lt;code&gt;CD&lt;/code&gt; is the
caloric deficit. 7700 is the number of kcal in a kg of fat, while 1540 is the
number of kcal in a kg of muscle (thanks &lt;a href=&quot;http://www.coltondillion.com/&quot;&gt;Colton&lt;/a&gt; for finding &lt;a href=&quot;https://thestrongkitchen.com/blog/post/how-many-calories-does-it-take-to-build-a-pound-of-muscle&quot;&gt;that info&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;I might try to run this upon my data, but I&amp;#39;m not optimistic, given that the
assumptions are pretty damn huge, and that the global error for the 100% fat
model is pretty low.&lt;/p&gt;
&lt;h2 id=&quot;lessons&quot;&gt;Lessons&lt;/h2&gt;
&lt;p&gt;What would I do differently next time?&lt;/p&gt;
&lt;p&gt;First off, be much more careful with my tracking and discipline (knowing full
well the occasional slip-up will happen).&lt;/p&gt;
&lt;p&gt;Next, I would try running a ~900 kcal deficit immediately. Mind you, I&amp;#39;m not
100% convinced that this is the right idea, but I think it&amp;#39;s worth trying for a
4 week duration. The benefit is obviously a shorter diet. The risk is that this
is too much and muscle loss results.&lt;/p&gt;
&lt;p&gt;Given my current body fat percentage and weight, a 900 kcal deficit is
equivalent to requiring 77 kcal per kilo of muscle (35 kcal per pound) — which
many people believe is safe. What is especially annoying here is that it will be
hard to tell fat loss apart from muscle loss. I could use the neck-waist
measurement method and the gym&amp;#39;s impedance scale to try and estalish trends
here, however.&lt;/p&gt;
&lt;p&gt;I would also keep the refeeds after each 4 week period.&lt;/p&gt;
&lt;p&gt;I can imagine playing with the length of the cut too. Assuming my body fat
percentage doesn&amp;#39;t increase (tall order), doing 4 weeks of cutting with a 900
kcal deficit would bring me to 10.5% body fat (assuming 100% fat loss). Two
weeks would bring me down to 12.3%.&lt;/p&gt;
&lt;p&gt;I would maybe drop the supplements, except caffeine. I might want to try to use
Yohimbine &amp;quot;properly&amp;quot;, i.e. in a mostly fasted state and before a workout.&lt;/p&gt;
&lt;p&gt;Regarding caffeine, I would cycle off of it from for a few weeks before the cut,
and then progressively ramp it up during the cut: drink something like one daily
cup of robusta the first week, two the second, etc.&lt;/p&gt;
&lt;p&gt;I&amp;#39;m excited to see if the second time is the charm for the six-pack :D&lt;/p&gt;
&lt;h2 id=&quot;the-exercise-corner&quot;&gt;The Exercise Corner&lt;/h2&gt;
&lt;p&gt;How&amp;#39;d I do on my program meanwhile? &lt;/p&gt;
&lt;p&gt;Let&amp;#39;s first tackle the big lifts. The deadlift progressed to 185 kg until June.
The squat was deloaded almost immediately, and kept being deloaded for poor
form. In both of these lifts, I&amp;#39;d come to realize I had progressively adopted
terrible form. I was desegmenting the deadlift: shooting my ass up and then
pulling instead of pushing through the ground. I was doing something similar on
the squat: bending forward too much so that my ass could go up and finally
contribute to the lift. Both of these put a lot of strain on my lower back who
had dutifully adapted. Symptomatically, deloading these lifts did not made them
seem much easier after a bit.&lt;/p&gt;
&lt;p&gt;After a bit of diagnostic, the issues seemed to be that my glutes and my abs
were too weak. So in went &lt;a href=&quot;https://www.youtube.com/watch?v=qk97w6ZmV90&quot;&gt;a new regimen of ab training&lt;/a&gt; as well as
glute-specific exercises, most notably the &lt;a href=&quot;https://www.youtube.com/watch?v=xDmFkJxPzeM&quot;&gt;hip thrust&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;These have worked wonder to strengthen these muscles, but I haven&amp;#39;t had time to
reload the lifts yet. And since I&amp;#39;m switching program for now, it might be a
while before I see my old records (which I&amp;#39;m invalidating anyway, because of
poor form).&lt;/p&gt;
&lt;p&gt;The bench mostly stagnated, never really going much over that 100kg barrier, I
managed 3x102 at times and then had to deload. The overhead press also stagnated
and I also deloaded it. The problem there is arching the back too much, though
I&amp;#39;m not entirely sure how to get rid of that — I&amp;#39;m hoping stronger abs will
help.&lt;/p&gt;
&lt;p&gt;The rest of the program mostly saw progress as some movements were still fairly
new when I started the cut. Nothing went down, anyhow. Triceps, in particular,
saw a lot of progress.&lt;/p&gt;
&lt;h2 id=&quot;whats-next&quot;&gt;What&amp;#39;s Next?&lt;/h2&gt;
&lt;p&gt;The wise man said: after each cut must come a bulk. And so it is.&lt;/p&gt;
&lt;p&gt;I&amp;#39;m taking it somewhat more seriously than I did before. It feels like the
careful attention to my calories during the cut as motivated me to be more
serious now. I&amp;#39;m particularly attentive at ingesting more than enough proteins,
and making an effort at timing them right too (something I started doing during
the cut already).&lt;/p&gt;
&lt;p&gt;Since I started reliably eating more than maintenance calories (aiming for
100-300 more), I sometimes overshot my calories goal whenever my caloric
expenditure is a bit lower or on rest days. I must be careful with that. I think
I have taken too much fat at the start of the year before the start of my cut by
overeating. At that time, quite puzzlingly, I aimed to eat a certain amount of
calories per day instead of basing it on the fitbit data. No idea why I did it
like that &lt;code&gt;¯\_(ツ)_/¯&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;I must also pay attention to my sleep more. I&amp;#39;ve tended to push my sleep time
further and further away and only my determination to at least get up for lunch
has saved me. But often, sleep time ends up suffering in the process. I&amp;#39;ve been
&lt;strong&gt;damn busy&lt;/strong&gt; towards and since the end of the cut (you&amp;#39;d think handing in the
thesis would mean work was over, but then you have to tackle everything that
fell by the wayside on the way there).&lt;/p&gt;
&lt;p&gt;I&amp;#39;m also trying out the &lt;a href=&quot;https://my.builtwithscience.com/p/intermediate-build-program&quot;&gt;Intermediate Build&lt;/a&gt; program from Jeremy Ethier. Since I
got quite a bit of value from his &lt;a href=&quot;https://builtwithscience.com/best-full-body-workout/&quot;&gt;free full-body program&lt;/a&gt; and his
content in general, it seemed a safe value proposition. I&amp;#39;m currently tackling
the first week and so far I&amp;#39;m enjoying it. We&amp;#39;ll see come result time!&lt;/p&gt;
&lt;p&gt;Finally, if I find the time I&amp;#39;d like to analyse my cut data a bit more. In
particular, I&amp;#39;d like to run a multivariable linear regression on my data in
order to see if I can find a systematic bias in the caloric intake or
expenditure estimations. I&amp;#39;m not too optimistic here either: a non-naive model
would include things like the hours classified by Fitbit as workout every day as
well as their caloric estimations, as well as a labelling of how certain I am of
my caloric intake measurements (things that come in a box are easy to measure,
restaurant food is a wild guess).&lt;/p&gt;
&lt;h2 id=&quot;a-note-on-the-fitbit&quot;&gt;A Note on The Fitbit&lt;/h2&gt;
&lt;p&gt;It is known that the Fitbit is not the most accurate means of measuring energy
expenditure. If you look at the figures, this &lt;a href=&quot;https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6107736/&quot;&gt;literature review&lt;/a&gt; paints a
rather appalling picture, with many studies finding that the Fitbit under- or
overestimates calories spent in activity by as much as 60% (and even more, in a
few cases).&lt;/p&gt;
&lt;p&gt;Of course, the fact that studies have such varied results is a big red flag.
Either the Fitbit is totally random, or some studies are crap. Well, in my
experience (and as can be seen in my data), the Fitbit is far from random. On
the other hand, I have seen my share of crap studies.&lt;/p&gt;
&lt;p&gt;If anything, the Fitbit was consistent — the same activity (in my case workouts
and walking) tends to yield similar caloric estimations. If it does happen to be
biased in certain cases, it looks like I was fortunate enough to have the biases
cancel each other out.&lt;/p&gt;
&lt;p&gt;Returning to the literature review, things look better when you look at the
details:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Findings suggested that Fitbit was more likely to markedly overestimate energy
expenditure when worn on the wrist and when walking at normal adult walking
speeds on flat surfaces. On the contrary, Fitbit was more likely to
underestimate energy expenditure when worn on the torso, with a tendency to
markedly underestimate energy expenditure during inclined ambulation, during
activities with constrained or variable body motion throughout the activity,
and during simulated household or sporting activities that involve
stop-and-start ambulation. Findings from 1 study for measures of energy
expenditure in free-living settings suggested that Fitbit and doubly labelled
water may provide similar measures of total energy expenditure over a 2-week
period. However, findings from a few studies in free-living settings suggested
that Fitbit devices may provide notable underestimations of daily energy
expenditure compared with a SenseWear accelerometer.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Given my relatively high caloric expenditure numbers, I&amp;#39;m not too worried about
underestimations.&lt;/p&gt;
&lt;p&gt;Also apparently &lt;a href=&quot;https://www.ncbi.nlm.nih.gov/pmc/articles/PMC5360603/&quot;&gt;SenseWear overestimates energy expenditure&lt;/a&gt;?&lt;/p&gt;
&lt;p&gt;I kept saying &amp;quot;the Fitbit&amp;quot;, but of course there is no such thing:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Most of the studies included in this review were published in the last 2
years, with studies primarily examining measurement accuracy for models of
Fitbit activity trackers introduced prior to 2015.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I used the Charge 2 (2016) until June and the Charge 3 (2018) after. It&amp;#39;s
possible things improved since 2015. I saw no difference in measurements between
the Charge 2 and the Charge 3 however.&lt;/p&gt;
&lt;p&gt;So what? Well, obviously take what the Fitbit says (and what everybody says
about the Fitbit) with a pinch of salt. The best thing is to do like I did:
collect your own data and come to your own conclusions.&lt;/p&gt;
&lt;p&gt;Personally, I find the Fitbit super helpful to set a proper caloric intake.&lt;/p&gt;
&lt;p&gt;What&amp;#39;s the alternative? Using a macro calculator &lt;a href=&quot;https://www.calculators.tech/macro-calculator&quot;&gt;like this one&lt;/a&gt;. The caloric
recommendation really depends on what goal (I chose &amp;quot;muscle gain&amp;quot;) and &amp;quot;activity
level&amp;quot; you set. With &amp;quot;lightly active&amp;quot; (true of me outside of workouts — and I
did say I wanted to gain muscle, they don&amp;#39;t build themselves), I get a 3185 kcal
recommendation. Using my working hypothesis that the Fitbit is accurate, the
average daily expenditure &lt;em&gt;during my cut&lt;/em&gt; was 3190, and building muscle means I
have to add 200-300 kcal on top of that. Oops.&lt;/p&gt;
&lt;p&gt;On the other hand, choosing &amp;quot;very active&amp;quot; puts me at 4000 daily kcal. That&amp;#39;s
likely too much — I only hit 3700 kcal expenditure on workout days, and then not
each time. So you have to choose &amp;quot;moderately active&amp;quot; to get a more reasonable
3591 kcal recommendation. How could I know this?&lt;/p&gt;
&lt;p&gt;A promising avenue is the aformentioned Jeremy Ethier&amp;#39;s program, which includes
a nutrition spreadsheet. The initial estimate is wildly off (saying I should eat
3113 kcal for muscle gain) but it automatically uses your recorded weight and
caloric intake to adjust the TDEE (total daily energy expenditure). I might try
to use that and see if it gives good results.&lt;/p&gt;
&lt;p&gt;And with these final comments, I&amp;#39;m done. This turned out much longer than I
expected. Hopefully, someone will be able to get some useful information out of
this!&lt;/p&gt;
      </description>
      <pubDate>2019-09-12T22:00:00.000Z</pubDate>
      <link>http://norswap.com/weight-training-4</link>
      <guid isPermaLink="true">http://norswap.com/weight-training-4</guid>
    </item>
    <item>
      <title>Y Combinator and Trampolines in Javascript</title>
      <description>
&lt;p&gt;In &lt;em&gt;&lt;a href=&quot;http://raganwald.com/2018/09/10/why-y.html&quot;&gt;Why Y? Deriving the Y Combinator in JavaScript&lt;/a&gt;&lt;/em&gt;, Reginald
Braithwaithe (aka Raganwald) explains, step by step, how the fixed-point Y
combinator and the long-tailed widowbird can be implemented in Javascript.&lt;/p&gt;
&lt;p&gt;At this point, you&amp;#39;re probably wondering &lt;strong&gt;What the hell are we talking about?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Essentially, these are tools that we can use to achieve two very useful things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Inject code at each recursive call in a recursive function.&lt;/li&gt;
&lt;li&gt;Make a &lt;a href=&quot;https://en.wikipedia.org/wiki/Tail_call&quot;&gt;tail-recursive&lt;/a&gt; function use a fixed amount of stack space, preventing
the fabled &lt;a href=&quot;https://en.wikipedia.org/wiki/Stack_overflow&quot;&gt;stack overflow&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Sometimes, achieving the second item is called &lt;em&gt;using a &lt;a href=&quot;https://en.wikipedia.org/wiki/Trampoline_(computing)&quot;&gt;trampoline&lt;/a&gt;&lt;/em&gt;, because
we enter the recursive function but on &amp;quot;&lt;em&gt;recursion&lt;/em&gt;&amp;quot;, we jump right back out.&lt;/p&gt;
&lt;p&gt;The technique is also called &amp;quot;tail-recursion elimination&amp;quot; or &amp;quot;tail call
optimization&amp;quot;.&lt;/p&gt;
&lt;p&gt;In this post I want to offer a very condensed version of this story that focuses
on the results. A motivation, really. You should read &lt;a href=&quot;http://raganwald.com/2018/09/10/why-y.html&quot;&gt;Reginald&amp;#39;s article&lt;/a&gt;
to know about the gory details.&lt;/p&gt;
&lt;p&gt;I also &lt;a href=&quot;https://github.com/raganwald/raganwald.github.com/issues/134&quot;&gt;simplified&lt;/a&gt; the combinators&amp;#39; implementation — to make them more idiomatic,
and, in my opinion, easier to understand.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;the-mockingbird-code-injection&quot;&gt;The Mockingbird (Code Injection)&lt;/h2&gt;
&lt;p&gt;Let&amp;#39;s start with a recursive (JavaScript) function:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const is_even = n =&amp;gt;
    (n === 0) || !is_even(n - 1);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This implement a very inefficient way to check if a number is even. It&amp;#39;s a toy
example, obviously.&lt;/p&gt;
&lt;p&gt;Let&amp;#39;s take our first goal first: &amp;quot;inject code at each recursive call in a
recursive function&amp;quot;.&lt;/p&gt;
&lt;p&gt;To achieve this, we need to rewrite the function in a different form. Here is
the so-called &amp;quot;mockingbird form&amp;quot;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const mock_is_even = (myself, n) =&amp;gt;
    (n === 0) || !myself(myself, n - 1);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;is_even&lt;/code&gt; now take a &lt;code&gt;myself&lt;/code&gt; function as argument, which it called recursively,
passing itself along.&lt;/p&gt;
&lt;p&gt;We can call &lt;code&gt;mock_is_even(mock_is_even, 10)&lt;/code&gt;, and it will behave just like
&lt;code&gt;is_even(10)&lt;/code&gt;. So far that&amp;#39;s pretty useless.&lt;/p&gt;
&lt;p&gt;We can re-implement &lt;code&gt;is_even&lt;/code&gt; in terms of &lt;code&gt;mock_is_even&lt;/code&gt; using the &amp;quot;mockingbird&amp;quot;
combinator:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const mockingbird =
    fn =&amp;gt;
        (...args) =&amp;gt;
            fn(fn, ...args);

const is_even = mockingbird(mock_is_even);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Okay, that works: when we call &lt;code&gt;is_even(10)&lt;/code&gt;, the call becomes
&lt;code&gt;mock_is_even(mock_is_even, 10)&lt;/code&gt;, exactly what we wanted.&lt;/p&gt;
&lt;p&gt;What&amp;#39;s the point?&lt;/p&gt;
&lt;p&gt;Well, now we can inject code. Assume we want to memoize the function. After all,
the result of &lt;code&gt;is_even(X)&lt;/code&gt; will always be the same for a given &lt;code&gt;X&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const memoized = fn =&amp;gt; {
    const map = new Map();
    return (...args) =&amp;gt; {
        const key = JSON.stringify(args);
        return map[key] || (map[key] = fn(args));
    }
}

const is_even_memo = mockingbird(memoized(mock_is_even));&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can verify it&amp;#39;s working by measuring the run time:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.time(&amp;#39;slow&amp;#39;);
is_even_memo(100); // not memoized yet
console.timeEnd(&amp;#39;slow&amp;#39;);

console.time(&amp;#39;fast&amp;#39;);
is_even_memo(100); // memoized
console.timeEnd(&amp;#39;fast&amp;#39;);&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;the-y-combinator-better-code-injection&quot;&gt;The Y Combinator (Better Code Injection)&lt;/h2&gt;
&lt;p&gt;This &lt;code&gt;myself(myself, ...)&lt;/code&gt; business is ugly. Can we do better? Yes.&lt;/p&gt;
&lt;p&gt;Instead of the mockingbird form:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const mock_is_even = (myself, n) =&amp;gt;
    (n === 0) || !myself(myself, n - 1);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can write our function in Y form:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const Y_is_even = (myself, n) =&amp;gt;
    (n === 0) || !myself(n - 1);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And here is how we derive the &lt;code&gt;is_even&lt;/code&gt; from the Y combinator:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const Y = fn =&amp;gt; {
    const wrapper = (...args) =&amp;gt; fn(wrapper, ...args);
    return wrapper;
}

const is_even = Y(Y_is_even);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Injection is done the same way as before:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const is_even_memo = Y(memoized(Y_is_even));&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;#39;s explain: the Y combinator is similar to the mockingbird, but takes care of
passing the function to itself, so that we don&amp;#39;t need to do it in Y-form
functions, unlike in mockingbird-form.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://raganwald.com/2018/09/10/why-y.html&quot;&gt;Reginald&amp;#39;s post&lt;/a&gt; provides the traditional way to express the combinator,
using only function parameters, whereas we &amp;quot;cheat&amp;quot; by using a variable inside
the function. If you want to understand the Y combinator&amp;#39;s root in &lt;a href=&quot;https://en.wikipedia.org/wiki/Lambda_calculus&quot;&gt;lambda
calculus&lt;/a&gt;, give the post a read!&lt;/p&gt;
&lt;h2&gt;The Longtailed Widowbird&lt;br/&gt; (Tail Recursion Elimination / Trampolines)&lt;/h2&gt;

&lt;p&gt;Let&amp;#39;s move on to our second goal: &amp;quot;Make a &lt;a href=&quot;https://en.wikipedia.org/wiki/Tail_call&quot;&gt;tail-recursive&lt;/a&gt; function use a fixed
amount of stack space, preventing the fabled &lt;a href=&quot;https://en.wikipedia.org/wiki/Stack_overflow&quot;&gt;stack overflow&lt;/a&gt;.&amp;quot;&lt;/p&gt;
&lt;p&gt;This process will work with functions written in Y-form — but only as long as
they are &lt;em&gt;tail-recursive&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Our &lt;code&gt;Y_is_even&lt;/code&gt; function is not tail recursive, pecause of that pesky &lt;code&gt;!&lt;/code&gt;
operator, which is applied after the call to &lt;code&gt;myself&lt;/code&gt; returns.&lt;/p&gt;
&lt;p&gt;Fortunately, we can rewrite it to be tail-recursive:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const Y_is_even_tailrec = (myself, n) =&amp;gt;
    n === 0 ? true
    n === 1 ? false
    : myself(n - 2);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The idea behind the longtailed widowbird is that, instead of injecting code
around the recursive function call, we will &lt;em&gt;replace&lt;/em&gt; the recursive call by code
that returns a function (which executes the &amp;quot;recursive&amp;quot; function call).&lt;/p&gt;
&lt;p&gt;Once we get this function, we can call it. If it does another recursive call, it
will return another function, which we can call as well. And so on and so forth.
We call the returned functions in a loop, until we get the final result.
Recursion has been eliminated in favor of iteration!&lt;/p&gt;
&lt;p&gt;Here is the longtailed widowbird combinator:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const longtailed = fn =&amp;gt; (...args0) =&amp;gt; {

    class Thunk {
        constructor (delayed) {
            this.delayed = delayed;
        }

        evaluate() {
            return this.delayed();
        }
    }

    const wrapper = (...args) =&amp;gt;
        new Thunk(() =&amp;gt; fn(wrapper, ...args));

    let value = fn(wrapper, ...args0);

    while (value instanceof Thunk)
        value = value.evaluate();

    return value;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;#39;s go over this.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;Thunk&lt;/code&gt; class is just a way to identify the functions we need to execute in
the loop (it&amp;#39;s used in the &lt;code&gt;value instancceof Thunk&lt;/code&gt; test). If we didn&amp;#39;t have
this class and just tested for JavaScript&amp;#39;s &lt;code&gt;Function&lt;/code&gt; class, our combinator
wouldn&amp;#39;t work with recursive functions that return functions!&lt;/p&gt;
&lt;p&gt;We do the same &lt;code&gt;wrapper&lt;/code&gt; trick as in the Y combinator, but this time we also
wrap the call in a function we store in a &lt;code&gt;Thunk&lt;/code&gt; instance.&lt;/p&gt;
&lt;p&gt;Then we get the initial value and we start iterating, until a result is
obtained!&lt;/p&gt;
&lt;p&gt;Let&amp;#39;s try this!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const iter_is_even = longtailed(Y_is_even_tailrec);

// No problem!
iter_is_even(1000000);

// Maximum call stack size exceeded
is_even(1000000);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Can we still memoize? Of course:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const iter_is_even_memo = longtailed(memoized(Y_is_even_tailrec));&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And that&amp;#39;s it folks! Code injection in recursive functions, and tail call
optimization in JavaScript, easy as pie!&lt;/p&gt;
&lt;p&gt;You can find all the code in this article collected &lt;a href=&quot;https://gist.github.com/norswap/be5fa7938f8331a252d3ff79e61e5834&quot;&gt;in this gist&lt;/a&gt;.&lt;/p&gt;
      </description>
      <pubDate>2019-08-31T22:00:00.000Z</pubDate>
      <link>http://norswap.com/js-trampolines</link>
      <guid isPermaLink="true">http://norswap.com/js-trampolines</guid>
    </item>
    <item>
      <title>The Expression Problem in Java (Litterature Review)</title>
      <description>
&lt;link href=&quot;https://cdnjs.cloudflare.com/ajax/libs/prism/1.16.0/themes/prism.css&quot; rel=&quot;stylesheet&quot; /&gt;

&lt;!-- &lt;link href=&quot;https://cdnjs.cloudflare.com/ajax/libs/prism/1.16.0/themes/prism-tomorrow.min.css&quot; rel=&quot;stylesheet&quot; /&gt; --&gt;

&lt;p&gt;Previously: &lt;a href=&quot;/java-visitor-pattern&quot;&gt;The Visitor Pattern in Java 8&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/java-visitor-pattern&quot;&gt;Last time&lt;/a&gt; I presented a way to implement the visitor pattern, by
taking advantage of Java 8&amp;#39;s &lt;code&gt;default&lt;/code&gt; interface methods.&lt;/p&gt;
&lt;p&gt;In the process I said this was a partial solution to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Expression_problem&quot;&gt;expression problem&lt;/a&gt;,
which was defined as:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The goal is to define a datatype by cases, where one can add new cases to the
datatype and new functions over the datatype, without recompiling existing
code, and while retaining static type safety (e.g., no casts).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Recall that in the context of Java, we can think of a &lt;em&gt;datatype&lt;/em&gt; as an interface
or parent class, and of a &lt;em&gt;case&lt;/em&gt; as a class implementing/extending the interface
or parent. When using this interpretation we will call the &lt;em&gt;cases&lt;/em&gt; &amp;quot;&lt;em&gt;data
classes&lt;/em&gt;&amp;quot;, which is a bit less awkward.&lt;/p&gt;
&lt;p&gt;On the other hand, some of the papers we will review will take another
interpretation in order to produce an interesting solution.&lt;/p&gt;
&lt;p&gt;The solution I presented last time is partial, because it is not strictly
type-safe: it uses a cast.&lt;/p&gt;
&lt;p&gt;Today, I want to look at the solutions that have been proposed in the
litterature, and try to extract their guiding insights, and show their
respective strengths and shortcomings.&lt;/p&gt;
&lt;h2 id=&quot;the-contenders&quot;&gt;The Contenders&lt;/h2&gt;
&lt;p&gt;While the litterature on the expression problem in Java-like object-oriented
languages is surprisingly rich, I want to focus specifically on three papers
which I think covers the space of interesting solutions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;The Expression Problem Revisited: Four new solutions using generics&lt;/strong&gt;, Mads
Torgersen, &lt;em&gt;ECOOP 2004&lt;/em&gt; &lt;a href=&quot;http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.85.2323&quot;&gt;[link with pdf]&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Extensibility for the Masses: Practical Extensibility with Object
Algebras&lt;/strong&gt;, Bruno C. d. S. Oliveira &amp;amp; William R. Cook, &lt;em&gt;ECOOP 2012&lt;/em&gt; &lt;a href=&quot;https://i.cs.hku.hk/~bruno/oa/&quot;&gt;[link with pdf]&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;The expression problem, trivially!&lt;/strong&gt;, Yanlin Wang &amp;amp; Bruno C. d. S. Oliveira,
&lt;em&gt;Modularity 2016&lt;/em&gt;, &lt;a href=&quot;https://i.cs.hku.hk/~bruno/papers/Modularity2016.pdf&quot;&gt;[pdf]&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Since the first paper actually presents four solutions, that gives us 6
solutions to review. I&amp;#39;ll also throw my partial solution into the mix for
comparison&amp;#39;s sake.&lt;/p&gt;
&lt;h2 id=&quot;the-problems-raison-dêtre-ambiguous-call-sites&quot;&gt;The Problem&amp;#39;s Raison d&amp;#39;Être: Ambiguous Call Sites&lt;/h2&gt;
&lt;p&gt;For the expression problem to be interesting &lt;em&gt;at all&lt;/em&gt;, it has to involve
ambiguous call sites: the same piece of code has to perform a method call which
could be dispatched to a specialized method for any of datatype cases.&lt;/p&gt;
&lt;p&gt;Said otherwise, if every piece of code is statically typed and doesn&amp;#39;t involve
any kind of &lt;a href=&quot;/polymorphism/&quot;&gt;polymorphism&lt;/a&gt; (e.g. inheritance or generics), then plain static
overloading is enough, and you don&amp;#39;t have a &lt;em&gt;problem&lt;/em&gt; in the first place.&lt;/p&gt;
&lt;p&gt;Therefore, to build a type-safe solution to the expression problem, two big
avenues are open.&lt;/p&gt;
&lt;p&gt;The first one has to be built into the compiler: the compiler will check that
implementations of operations (which can be added by anyone, not just the
original author of the datatype) exist for every data class. But this doesn&amp;#39;t
seem to exist. I said as much in &lt;a href=&quot;/java-visitor-pattern&quot;&gt;the previous post&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In theory, there is nothing that prevents solving the expression problem at
the language level. In an ideal world, we&amp;#39;d just be able to add abstract
extension methods that have to be implemented for all classes implementing the
interface. The linker would then verify that these methods were implemented
for all such classes, and generate the proper virtual method tables. But no
such object-oriented language exists.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The second avenue is to somehow &lt;em&gt;carry&lt;/em&gt; the specialized implementation to the
call sites. This is what every solution in the litterature does, each in its own
way.&lt;/p&gt;
&lt;p&gt;That is also how &lt;a href=&quot;https://en.wikipedia.org/wiki/Type_class&quot;&gt;typeclasses&lt;/a&gt; work in Haskell. In this case, it&amp;#39;s the typeclass
instances that carry the operation&amp;#39;s implementation to the call site.&lt;/p&gt;
&lt;p&gt;In light of this, the statement of the expression problem is somewhat
problematic, because it doesn&amp;#39;t specify which shape the ambiguous call sites can
take.&lt;/p&gt;
&lt;p&gt;But I can think of two very interesting examples.&lt;/p&gt;
&lt;p&gt;The first one is to apply one of the specialized methods on a list of data class
instances, &lt;em&gt;whose exact type is not known&lt;/em&gt; (said otherwise, which just know they
are instances of the datatype).&lt;/p&gt;
&lt;p&gt;Sadly, no type-safe solution in the litterature can do that. Our solution can,
but again, it isn&amp;#39;t type safe.&lt;/p&gt;
&lt;p&gt;Interestingly, Haskell can do this only if using a compiler extension
introducing &lt;a href=&quot;https://wiki.haskell.org/Existential_type&quot;&gt;existential types&lt;/a&gt;. An existential type is basically just a pair of
a type and its associated typeclass instance for a given typeclass. The
existential type just says &amp;quot;here is an instance of &lt;em&gt;something&lt;/em&gt; that has an
instance for the given typeclass&amp;quot;. Then you have to use a list of
existentially-typed values — which crucially you mean you can&amp;#39;t reuse a
pre-existing list that isn&amp;#39;t existentially-typed. There has to be a way to
(statically) retrieve the correct typeclass instance when constructing the list.&lt;/p&gt;
&lt;p&gt;The second example is, fortunately, the one that is always used as a benchmark
in the litterature: a tree structure where each node is a data class instance.&lt;/p&gt;
&lt;p&gt;This example is easier because it is possible to inject type information while
building the tree — something that is not possible with plain lists, but is
exactly what we&amp;#39;re doing when we&amp;#39;re building an existentially-typed list.&lt;/p&gt;
&lt;h2 id=&quot;the-benchmark-problem&quot;&gt;The Benchmark Problem&lt;/h2&gt;
&lt;p&gt;In particular, the typical example uses trees that represent arithmetic
expressions.&lt;/p&gt;
&lt;p&gt;This benchmark example was there since the beginning, and is certainly partially
responsible for the name of the &lt;em&gt;expression&lt;/em&gt; problem.&lt;/p&gt;
&lt;p&gt;Our datatype is an &lt;code&gt;Exp&lt;/code&gt; type.&lt;/p&gt;
&lt;p&gt;The cases for the datatype are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Lit&lt;/code&gt;: an integer literal&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Add&lt;/code&gt;: addition of two expression&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Neg&lt;/code&gt;: negation of an expression — which is added as an extension&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Initially, we&amp;#39;ll have a single operation: &lt;code&gt;Print&lt;/code&gt; which prints a string
representation of the expression to standard output. Later we&amp;#39;ll add &lt;code&gt;Eval&lt;/code&gt;,
which evaluates the expression.&lt;/p&gt;
&lt;h2 id=&quot;norswaps-solution&quot;&gt;Norswap&amp;#39;s Solution&lt;/h2&gt;
&lt;p&gt;To ease us into the problem, let&amp;#39;s see a type-unsafe solution to the problem
using my formulation of the &lt;a href=&quot;/java-visitor-pattern&quot;&gt;visitor pattern&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://gist.github.com/norswap/9d4dd9ae5c0fd2ef652a1f41778467ea#file-norswapep-java&quot;&gt;Norswap&amp;#39;s Solution Code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Compared to the previous post, the solution has been simplified/crippled a
little bit for the sake of brevity and better comparison. We no longer use
&lt;em&gt;implementation interfaces&lt;/em&gt;, which allow the composition of independently
developped extensions (i.e. new data classes or operations).&lt;/p&gt;
&lt;p&gt;None of Torgersen&amp;#39;s solutions can handle composition. This is excusable, as our
trick (using &lt;code&gt;default&lt;/code&gt; methods in interfaces) wasn&amp;#39;t available at the time the
paper was written.&lt;/p&gt;
&lt;h2 id=&quot;the-choice-for-data-structure-solutions&quot;&gt;The Choice for Data-Structure Solutions&lt;/h2&gt;
&lt;p&gt;The nature of the expression problem is that each time we add a new data class,
we need to add corresponding implementations for the existing operations.
Conversely, each time we add a new operation, we need to implement it for all
existing data classes.&lt;/p&gt;
&lt;p&gt;Unfortunately, it&amp;#39;s not as simple as just writing them. The &amp;quot;compiler&amp;quot; solution
that neatly composes everything for us isn&amp;#39;t available. Therefore, we will have
to take care of the plumbing ourselves.&lt;/p&gt;
&lt;p&gt;As long as we keep one dimension fixed, everything is easy. If we have a fixed
set of operations, they can be encoded as an interface which we can just
implement. If we have a fixed set of data classes, the simple visitor pattern
suffices, and we can just implement the visitor interface to add new operations.&lt;/p&gt;
&lt;p&gt;Things become tricky when we need to add both new operations and new data
classes.&lt;/p&gt;
&lt;p&gt;There are fundamentally two ways to do this.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Option 1&lt;/strong&gt;: replacing the data classes. Each time we add a new operation, we
need to extend all data classes so that they may handle the new operation.
Operation&amp;#39;s implementation will live inside the data classes.&lt;/p&gt;
&lt;p&gt;This option means we need to control/parameterize the creation of our data
structure. Whenever we add a new operation, we need to swap the classes that are
being instantiated!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Option 2&lt;/strong&gt;: replacing the operations. Each time we add a new data class, we
need to extend all existing operations so that they may handle the new data
class. Operation&amp;#39;s implementation will typically live in some kind of visitor
implementation.&lt;/p&gt;
&lt;p&gt;This options means we need to control/parameterized the operation&amp;#39;s call sites.
Whenever we add a new data class, we need to swap the object that holds the
operation&amp;#39;s implementations, lest it doesn&amp;#39;t work for the new data class.&lt;/p&gt;
&lt;p&gt;My solution uses option 2.&lt;/p&gt;
&lt;h2 id=&quot;torgersens-1st-solution-data-centered&quot;&gt;Torgersen&amp;#39;s 1st Solution: Data-Centered&lt;/h2&gt;
&lt;p&gt;This is the first solution in the &amp;quot;&lt;em&gt;The Expression Problem Revisited: Four new
solutions using generics&lt;/em&gt;&amp;quot; (&lt;a href=&quot;http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.85.2323&quot;&gt;link&lt;/a&gt;) paper by Mads Torgersen. Discussion of
the other three solutions will follow.&lt;/p&gt;
&lt;p&gt;This is a solution that takes &lt;em&gt;option 1&lt;/em&gt; from the last section: replacing the
data classes. When adding a new operation, we subclass all existing data
classes. The code that create data strutures needs to be parameterized.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://gist.github.com/norswap/9d4dd9ae5c0fd2ef652a1f41778467ea#file-torgersendataep-java&quot;&gt;Torgersen&amp;#39;s Data-Centered Solution Code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are two difficulties in this solution that not readily apparent when
&lt;em&gt;option 1&lt;/em&gt; is stated briefly.&lt;/p&gt;
&lt;p&gt;First, in order to make the solution type-safe, it is necessary to know which
operations the nodes in the expression tree implement. This means there needs to
be someway to &amp;quot;carry the type&amp;quot; to the nodes that are down in the tree. &lt;/p&gt;
&lt;p&gt;In this solution, this is done via generics, and in particular the use of a
F-bound: &lt;code&gt;C extends Exp&amp;lt;C&amp;gt;&lt;/code&gt;. F-bounds are a crude way to encode &amp;quot;self-types&amp;quot; in
Java. Basically it lets us use &lt;code&gt;C&lt;/code&gt; as though it meant &amp;quot;the type of this class&amp;quot;
(or, like here, the type of one of its superclasses or superinterfaces).
However, to use an F-bound, you need to &amp;quot;fix&amp;quot; &lt;code&gt;C&lt;/code&gt;. This is the role of all the
classes whose name end with &lt;code&gt;F&lt;/code&gt;, such as &lt;code&gt;class LitF extends Lit&amp;lt;ExpF&amp;gt;
implements ExpF&lt;/code&gt;. Unfortunately, that makes the solution more verbose as we need
to actually add in all of these &lt;code&gt;F&lt;/code&gt; classes.&lt;/p&gt;
&lt;p&gt;The second difficulty — which is only hinted at in the paper — is the need to
carry the node creation logic to the places where you would normally call a data
class constructor. Since there may be a lot of different types of nodes, it
makes sense to collect the creators in a factory.&lt;/p&gt;
&lt;p&gt;The issue with that is that each time you add a new data case you need to extend
the existing factory. Each time you add a new operation, you not only need to
extend every data class, but also to create a whole new factory that return
instances of these new classes.&lt;/p&gt;
&lt;p&gt;So this works, but it&amp;#39;s quite verbose and it&amp;#39;s relatively annoying that we
actually need to change the data classes being used when we add new operations.&lt;/p&gt;
&lt;h2 id=&quot;torgersens-2nd-solution-operation-centered&quot;&gt;Torgersen&amp;#39;s 2nd Solution: Operation-Centered&lt;/h2&gt;
&lt;p&gt;This solution takes &lt;em&gt;option 2&lt;/em&gt; outlined above. Each time we add a new data
class, we need to extend all existing operations so that they may handle the new
data class. Operation&amp;#39;s implementation live in a visitor implementation.&lt;/p&gt;
&lt;p&gt;This is also what my own solution does, I will explain the difference below.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://gist.github.com/norswap/9d4dd9ae5c0fd2ef652a1f41778467ea#file-torgersenoperationep-java&quot;&gt;Torgersen&amp;#39;s Operation-Centered Solution Code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;However, there is a big pitfall that comes from the need to be type-safe. For
the initial data classes, there are no issues. But when a new data class is
added, it is necessary to add a new visitor interface. This is as expected.&lt;/p&gt;
&lt;p&gt;However, each data class instance has to know the requirements on the visitors
it can handle. To use our previous examples, a &lt;code&gt;Neg&lt;/code&gt; node can only handle
visitors that implement &lt;code&gt;NegVisitor&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But it doesn&amp;#39;t stop there. If an &lt;code&gt;Add&lt;/code&gt; node has a &lt;code&gt;Neg&lt;/code&gt; child, it too should
only accept visitors that implement &lt;code&gt;NegVisitor&lt;/code&gt; — since they can invoke the
visitor on their children.&lt;/p&gt;
&lt;p&gt;Again, generics come to the rescue: we parameterize all data classes with &lt;code&gt;&amp;lt;V
extends Visitor&amp;gt;&lt;/code&gt; (for the initial data classes) or &lt;code&gt;&amp;lt;V extends NegVisitor&amp;gt;&lt;/code&gt;
(for &lt;code&gt;Neg&lt;/code&gt; — same principle would apply if we added new data classes).&lt;/p&gt;
&lt;p&gt;This doesn&amp;#39;t entirely fix the problem. In the &lt;code&gt;visit&lt;/code&gt; methods, it wouldnt work
to call, for instance, &lt;code&gt;add.left.accept(this)&lt;/code&gt;. Why? Because there is no
guarantee that &lt;code&gt;this&lt;/code&gt; has type &lt;code&gt;V&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Torgersen comes up with a really neat trick to solve this issue, which is to let
the visitor accept itself as an extra parameter of type &lt;code&gt;V&lt;/code&gt;. This parameter will
be supplied by the &lt;code&gt;accept&lt;/code&gt; methods: &lt;code&gt;visitor.visit(visitor, this)&lt;/code&gt; (where
&lt;code&gt;this&lt;/code&gt; is a an instance of a data class such as &lt;code&gt;Add&amp;lt;V&amp;gt;&lt;/code&gt;). Since &lt;code&gt;visitor&lt;/code&gt; has
type &lt;code&gt;V&lt;/code&gt; there, this type-checks ok.&lt;/p&gt;
&lt;p&gt;The cost? Once again, we can&amp;#39;t reuse our expression trees. They now have to be
parameterized differently depending on added data classes. So creation logic has
to be parameterized by the proper visitor interface (note you can&amp;#39;t really see
this is our simplistic demo code). At least, we don&amp;#39;t need verbose factories
this time.&lt;/p&gt;
&lt;h2 id=&quot;torgersens-3rd-solution-operation-centered-with-object-level-extensibility&quot;&gt;Torgersen&amp;#39;s 3rd Solution: Operation-Centered with Object-Level Extensibility&lt;/h2&gt;
&lt;p&gt;This solution is an extension of the second solution. The goal is to relax the
requirement on the control of all instantiation sites.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://gist.github.com/norswap/9d4dd9ae5c0fd2ef652a1f41778467ea#file-torgersenoperationep-java&quot;&gt;Torgersen&amp;#39;s Operation-Centered with Object-Level Extensibility Solution Code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;From the perspective of the previous solution, the goal here is to make it
possible to reuse old &lt;code&gt;Add&amp;lt;Visitor&amp;gt;&lt;/code&gt; and &lt;code&gt;Lit&amp;lt;Visitor&amp;gt;&lt;/code&gt; trees that were
instantiated without knowing that &lt;code&gt;Neg&lt;/code&gt; existed. These node will still work if
passed a &lt;code&gt;NegVisitor&lt;/code&gt; (which extends &lt;code&gt;Visitor&lt;/code&gt;)!&lt;/p&gt;
&lt;p&gt;The author calls this ability to reuse old trees &lt;em&gt;object-level extensibility&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;And since the old trees were created before we added &lt;code&gt;Neg&lt;/code&gt;, they couldn&amp;#39;t
contain &lt;code&gt;Neg&lt;/code&gt; nodes, and so using plain &lt;code&gt;Visitor&lt;/code&gt; implementations is fine as
well.&lt;/p&gt;
&lt;p&gt;Achieving object-level extensibility is actually pretty easy. In the data
classes, just change the node&amp;#39;s children type to &lt;code&gt;Exp&amp;lt;? super V&amp;gt;&lt;/code&gt;. Without
entering into the details, this means that &lt;code&gt;Add&amp;lt;NegVisitor&amp;gt;&lt;/code&gt; may have children
that with type &lt;code&gt;Exp&amp;lt;Visitor&amp;gt;&lt;/code&gt; or &lt;code&gt;Exp&amp;lt;NegVisitor&amp;gt;&lt;/code&gt;. On the other hand
&lt;code&gt;Add&amp;lt;Visitor&amp;gt;&lt;/code&gt; may not have a child of type &lt;code&gt;Exp&amp;lt;NegVisitor&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This effectively enables reusing old trees in newer trees. &lt;/p&gt;
&lt;p&gt;There is only one catch: your ability to rewrite the trees becomes limited.
Since &lt;code&gt;Add&amp;lt;Visitor&amp;gt;&lt;/code&gt; may not have children of type &lt;code&gt;Exp&amp;lt;NegVisitor&amp;gt;&lt;/code&gt; this may
hamper your ability to write involved tree rewrite logic that would need to
assign a newer tree as a child of an older tree.&lt;/p&gt;
&lt;p&gt;However, as the author correctly notes, there are plenty of use-cases (maybe
even most of them) that do not involve such kind of tree rewriting.&lt;/p&gt;
&lt;p&gt;If type-safety is a must-have for you and you don&amp;#39;t need tree rewrites, this is
pretty good. You&amp;#39;ll still pay a cost of sorts by having to carry these annoyings
type parameters everywhere.&lt;/p&gt;
&lt;h2 id=&quot;torgersens-4th-solution-type-unsafe-hybrid&quot;&gt;Torgersen&amp;#39;s 4th Solution: Type-Unsafe Hybrid&lt;/h2&gt;
&lt;p&gt;This one is interesting too.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://gist.github.com/norswap/9d4dd9ae5c0fd2ef652a1f41778467ea#file-torgersenhybridep-java&quot;&gt;Torgersen&amp;#39;s Hybrid Solution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://gist.github.com/norswap/9d4dd9ae5c0fd2ef652a1f41778467ea#file-torgersenbetterhybridep-java&quot;&gt;Torgersen&amp;#39;s Hybrid Solution, Without Generics&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Torgersen starts from the an operation-centered visitor solution (much like his
second solution) but pairs each operation (i.e. visitor implementation) with an
interface that defines the signature of the operation. Data classes can choose
to implement this interface. If they do so, the operation will notice (via an
&lt;code&gt;instanceof&lt;/code&gt; check) and call the implementation — otherwise it falls back on the
visitor pattern.&lt;/p&gt;
&lt;p&gt;The solution isn&amp;#39;t type-safe because Torgersen opts not to force the children of
each data class node to encode their visitor interface. So instead of being
typed as &lt;code&gt;Exp&amp;lt;V&amp;gt;&lt;/code&gt; or &lt;code&gt;Exp&amp;lt;? extends V&amp;gt;&lt;/code&gt; as in solution 2 and 3 respectively,
they are simply typed as &lt;code&gt;Exp&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The payload of foregoing type-safety here is that control over the creation
logic is no longer necessary. You can finally have data classes whose types and
implementations don&amp;#39;t change depending on subsequent extensions. In that, it is
similar to my solution.&lt;/p&gt;
&lt;p&gt;If you know in advance all operations you need to implement, you can also avoid
extending existing operations when you introduce a new data class, by having the
data class implement the operations&amp;#39; associated interfaces.&lt;/p&gt;
&lt;p&gt;Because the lack of type safety, when an expression accepts a visitor, it must
verify that this visitor actually can handle the expression&amp;#39;s data class or fall
back on some general behaviour (at worse, throw a runtime exception, which is
what my solution does).&lt;/p&gt;
&lt;p&gt;To make all of this work, the solution involves some helper super-classes, which
can be slightly confusing.&lt;/p&gt;
&lt;p&gt;I&amp;#39;d also argue that the most use of generics in this solution is woefully
unecessary — it just saves on inlining two lines of logic into every visitor,
which you sort of have to do &lt;em&gt;anyway&lt;/em&gt; because Java doesn&amp;#39;t support &lt;code&gt;instanceof&lt;/code&gt;
on generic type arguments (which are &lt;a href=&quot;https://www.baeldung.com/java-type-erasure&quot;&gt;erased&lt;/a&gt;). Hence I made a &lt;a href=&quot;https://gist.github.com/norswap/9d4dd9ae5c0fd2ef652a1f41778467ea#file-torgersenbetterhybridep-java&quot;&gt;simplified
solution&lt;/a&gt; that eliminates non-essential generics use, and
simplifies the scaffolding considerably, making it &lt;strong&gt;much&lt;/strong&gt; easier to
understand, in my humble opinion.&lt;/p&gt;
&lt;p&gt;Compared to my solution, this one is more complicated, but has the important
benefit that data classes can be added without extending all operations
individually, greatly reducing verbosity in that scenario.&lt;/p&gt;
&lt;h2 id=&quot;object-algebras&quot;&gt;Object Algebras&lt;/h2&gt;
&lt;p&gt;We now discussion the solution from the &amp;quot;Extensibility for the Masses: Practical
Extensibility with Object Algebras&amp;quot; paper (&lt;a href=&quot;https://i.cs.hku.hk/~bruno/oa/&quot;&gt;link&lt;/a&gt;). This one is quite
different from those we discussed previously, and conforms to neither of our two
options — because it doesn&amp;#39;t encode data as a data structure at all!&lt;/p&gt;
&lt;p&gt;Instead, data is encoded as a tree of method calls. Here is an example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;interface Algebra&amp;lt;E&amp;gt; {
    E lit (int value);
    E add (E left, E right);
}

public static &amp;lt;E&amp;gt; E expression (Algebra&amp;lt;E&amp;gt; a) {
    return a.add(a.lit(1), a.lit(2)); // 1 + 2
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;expression&lt;/code&gt; method encodes the expression tree &lt;code&gt;1 + 2&lt;/code&gt; made of an &amp;quot;add
node&amp;quot; with two &amp;quot;literal node&amp;quot; child. Of course, there are no such nodes — it&amp;#39;s
just a method!&lt;/p&gt;
&lt;p&gt;To do anything useful with &lt;code&gt;expression&lt;/code&gt;, we need to supply an &lt;code&gt;Algebra&amp;lt;E&amp;gt;&lt;/code&gt; where
&lt;code&gt;E&lt;/code&gt; is an (unconstrainted) type used to represent the result of an operation on
one of our &amp;quot;nodes&amp;quot;. So for instance, &lt;code&gt;a.lit(1)&lt;/code&gt; will return a value of type &lt;code&gt;E&lt;/code&gt;.
The &lt;code&gt;add&lt;/code&gt; method returns a value of type &lt;code&gt;E&lt;/code&gt;, but also takes as parameter two
values of type &lt;code&gt;E&lt;/code&gt;, corresponding to the result of &amp;quot;evaluating&amp;quot; its two
operands.&lt;/p&gt;
&lt;p&gt;To define an operation, we need to implement &lt;code&gt;Algebra&amp;lt;E&amp;gt;&lt;/code&gt;. Here is a full
implementation that uses the same example as previously:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://gist.github.com/norswap/9d4dd9ae5c0fd2ef652a1f41778467ea#file-objectalgebraep-java&quot;&gt;Object Algebra Solution&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So there our operations are printing and evaluation. We actually use two
different techniques for these two operations.&lt;/p&gt;
&lt;p&gt;In the case of &lt;code&gt;PrintAlgebra&lt;/code&gt;, we implement &lt;code&gt;Algebra&amp;lt;Print&amp;gt;&lt;/code&gt; where &lt;code&gt;Print&lt;/code&gt; is a
functional interface we defined with a &lt;code&gt;print()&lt;/code&gt; method. Therefore, calling
&lt;code&gt;expression(new PrintAlgebra())&lt;/code&gt; will return an object that can be used to print
the expression.&lt;/p&gt;
&lt;p&gt;This is not the most direct avenue — we could have opted to implement
&lt;code&gt;Algebra&amp;lt;String&amp;gt;&lt;/code&gt; instead and have &lt;code&gt;lit&lt;/code&gt; and &lt;code&gt;add&lt;/code&gt; return their string
representation directly. In fact, we take this approach with &lt;code&gt;EvalAlgebra&lt;/code&gt; which
implements &lt;code&gt;Algebra&amp;lt;Integer&amp;gt;&lt;/code&gt; — there, &lt;code&gt;lit&lt;/code&gt; and &lt;code&gt;add&lt;/code&gt; directly return the
integer they evaluate to.&lt;/p&gt;
&lt;p&gt;Finally, a really neat trick not mentionned in the paper is that we can build an
actual data structure from the functional encoding. For this, simply make an
algebra that implements &lt;code&gt;Algebra&amp;lt;Exp&amp;gt;&lt;/code&gt; or &lt;code&gt;NegAlgebra&amp;lt;Exp&amp;gt;&lt;/code&gt; (depending on your
needs, and assuming &lt;code&gt;Exp&lt;/code&gt; is the parent class) and have each method return the
node it corresponds to.&lt;/p&gt;
&lt;p&gt;Turning these data structures back into an algebra encoding is unfortunately not
possible. One could imagine that &lt;code&gt;Exp&lt;/code&gt; has a &lt;code&gt;E visit(Algebra&amp;lt;E&amp;gt;)&lt;/code&gt; method that
is overriden in data classes to simply call the corresponding algebra method.
The problem happens when you have introduced new data cases. If you added a
&lt;code&gt;neg&lt;/code&gt; method in &lt;code&gt;NegAlgebra&amp;lt;E&amp;gt;&lt;/code&gt;, now you need the signature to be &lt;code&gt;E
visit(NegAlgebra&amp;lt;E&amp;gt;)&lt;/code&gt;. This is &lt;em&gt;almost&lt;/em&gt; feasible, supposing we could
parameterize &lt;code&gt;Exp&lt;/code&gt; as follow: &lt;code&gt;Exp&amp;lt;A extends Algebra&amp;gt;&lt;/code&gt; and then define the
method &lt;code&gt;E visit (A&amp;lt;E&amp;gt;)&lt;/code&gt;. Unfortunately that would make &lt;code&gt;A&lt;/code&gt; a &lt;a href=&quot;https://en.wikipedia.org/wiki/Type_constructor&quot;&gt;higher-order type&lt;/a&gt;
(i.e. a type that takes a parameter, here &lt;code&gt;E&lt;/code&gt;) and Java doesn&amp;#39;t have those.&lt;/p&gt;
&lt;p&gt;Of course, you could just use &lt;code&gt;Algebra&amp;lt;E&amp;gt;&lt;/code&gt; as a bound and add a cast in there,
type-unsafe but effective.&lt;/p&gt;
&lt;p&gt;When dealing with object algebra, one may be concerned that it&amp;#39;s no longer
possible to &amp;quot;build a data structure dynamically&amp;quot;, i.e. that all data must be
statically defined like in our &lt;code&gt;expression&lt;/code&gt; method.&lt;/p&gt;
&lt;p&gt;That is fortunately not the case. Since the algebra encoding of an expression is
just method calls, any execution flow that calls algebra methods can yield
expressions. And execution can contain conditions, loops, etc. One potential
pitfall is that the whole construction logic needs to be re-run each time we
want to run an operation of our data. If the construction logic is expensive,
this can be a problem. Fortunately there is a solution: simply return a function
object that encodes the expression:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;
public E expr1 (NegAlgebra&amp;lt;E&amp;gt; a) {
    return expensive_predicate()
        ? a.add(a.lit(1), a.lit(2))
        : a.add(a.lit(1), a.neg(a.lit(2)));
}

// use: expr1(my_algebra);
// slow!

public E Function&amp;lt;NegAlgebra&amp;lt;E&amp;gt;, E&amp;gt; expr2() {
    return expensive_predicate()
        ? a -&amp;gt; a.add(a.lit(1), a.lit(2))
        : a -&amp;gt; a.add(a.lit(1), a.neg(a.lit(2)));
}

// use: expr2.apply(my_algebra);
// fast!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When we pass an algebra to &lt;code&gt;expr2&lt;/code&gt;, &lt;code&gt;expensive_predicate()&lt;/code&gt; is not run — it is
only run once when the &lt;code&gt;expr2&lt;/code&gt; is created.&lt;/p&gt;
&lt;p&gt;Finally, object algebra make &amp;quot;tree reuse&amp;quot; easy. You can compose an expression
built with an &lt;code&gt;Algebra&amp;lt;E&amp;gt;&lt;/code&gt; and one built with a &lt;code&gt;NegAlgebra&amp;lt;E&amp;gt;&lt;/code&gt; pretty easily:
the trick is that they only interface using &lt;code&gt;E&lt;/code&gt;, so as long as &lt;code&gt;E&lt;/code&gt; is the same,
anything goes. Of course, this means you have to use &lt;em&gt;compatible&lt;/em&gt; algebras. It
could be argued that is not type-safe (or that it is another advantage): nothing
prevents you from using two algebra with different semantics together, passing
the result of one to the other... as long as &lt;code&gt;E&lt;/code&gt; is the same.&lt;/p&gt;
&lt;p&gt;The paper mentions other interesting possibilities: multi-parameter algebra
(mimicking &lt;a href=&quot;https://en.wikipedia.org/wiki/Type_family&quot;&gt;type families&lt;/a&gt;), combinators for automatic combination of multiple
algebra, as well as allowing extension of the &lt;code&gt;E&lt;/code&gt; parameter (e.g. &lt;code&gt;Eval&amp;lt;E
extends Number&amp;gt; implements Algebra&amp;lt;E&amp;gt;&lt;/code&gt;), ...&lt;/p&gt;
&lt;p&gt;There is a lot to like about object algebra, it&amp;#39;s a really elegant technique —
in fact it&amp;#39;s the shortest implementation, and one of the most readable. It has
many advantages, from the possibility of building a real data structure to &amp;quot;tree
reuse&amp;quot;. Perhaps its main weakness is being a bit &lt;em&gt;too&lt;/em&gt; alien to be integrated in
many code bases, where one will &lt;em&gt;need&lt;/em&gt; to have actual data structures. For
instance, in my &lt;a href=&quot;https://github.com/norswap/autumn&quot;&gt;Autumn&lt;/a&gt; parsing library, the parser combinators can&amp;#39;t be
canonically represented as function calls — while it is possible to implement
parsing that way (by using objects similar to &lt;code&gt;Print&lt;/code&gt; in our example), it would
be incredibly slow. However it is possible to use an object algebra to build the
parser combinator graph, and to reuse the encoding for visiting it. However,
this is only possible because this graph is immutable (and so will always stay
in sync with its functional encoding).&lt;/p&gt;
&lt;p&gt;It&amp;#39;s definitely a technique to keep in the back of your mind.&lt;/p&gt;
&lt;h2 id=&quot;covariant-return-types&quot;&gt;Covariant Return Types&lt;/h2&gt;
&lt;p&gt;Finally, we look at our last solution, from the paper &amp;quot;The Expression Problem,
Trivially!&amp;quot; (&lt;a href=&quot;https://i.cs.hku.hk/~bruno/papers/Modularity2016.pdf&quot;&gt;link&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;This solution is very very close to Torgersen&amp;#39;s &lt;a href=&quot;https://gist.github.com/norswap/9d4dd9ae5c0fd2ef652a1f41778467ea#file-torgersendataep-java&quot;&gt;first (data-driven) solution&lt;/a&gt;,
but the essential differences between both is that this solution foregoes the
use of generics in favor of covariant return types. What are covariant return
types? In Java, you can override a method by a method with a different return
type, but only if that type is a subtype of the original return type, for
instance:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;abstract class A {
    abstract Object foo();
}

abstract class B extends A {
    @Override String foo();
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This works because &lt;code&gt;String&lt;/code&gt; is a subclass of &lt;code&gt;Object&lt;/code&gt;. And if you didn&amp;#39;t know,
yes you can override an abstract method without implementing it — that&amp;#39;s an
essential feature needed in the covariant solution.&lt;/p&gt;
&lt;p&gt;Let&amp;#39;s have a look at the solution:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://gist.github.com/norswap/9d4dd9ae5c0fd2ef652a1f41778467ea#file-covariantep-java&quot;&gt;Covariant Return Type Solution&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Whereas Torgersen&amp;#39;s solution encodes the expression type as an F-shape bounded
generic type parameter (&lt;code&gt;C extends Exp&amp;lt;C&amp;gt;&lt;/code&gt;), and subsequently types children
using this type (e.g. &lt;code&gt;C left, right;&lt;/code&gt; in the &lt;code&gt;Add&lt;/code&gt; class; the covariant
solution defines the children as abstract method whose return type is &lt;code&gt;Exp&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Both solution need a &amp;quot;fix class&amp;quot;: in Torgersen&amp;#39;s solution, the class fixes &lt;code&gt;C&lt;/code&gt;:
&lt;code&gt;AddF extends Add&amp;lt;ExpF&amp;gt;&lt;/code&gt; and later &lt;code&gt;EvalAddF extends EvalAdd&amp;lt;EvalExpF&amp;gt;&lt;/code&gt;. In the
covariant solution, the methods are overriden with the actual expression type:
simply &lt;code&gt;Exp&lt;/code&gt; in the base case, but &lt;code&gt;EvalExp&lt;/code&gt; in the &amp;quot;eval&amp;quot; extension.&lt;/p&gt;
&lt;p&gt;This is rather neat, and absent some issue I didn&amp;#39;t think of, seems strictly
superior Torgersen&amp;#39;s solution. It does however come with that solution&amp;#39;s other
pitfalls, including the need to parameterize the construction logic. You&amp;#39;ll note
we didn&amp;#39;t include factories in our code for this solution, but we did in
Torgersen&amp;#39;s solution. Don&amp;#39;t let this fool you: they are equally needed (or can
equally be dispensed with) in both cases.&lt;/p&gt;
&lt;h2 id=&quot;discussion--recommendations&quot;&gt;Discussion &amp;amp; Recommendations&lt;/h2&gt;
&lt;p&gt;I came out of this article having learned a lot more than I expected going in.
The impetus for this article was that I couldn&amp;#39;t clearly articulate how the
different solutions worked and how they related to each other.&lt;/p&gt;
&lt;p&gt;I also wanted to make the point that they were needlessly complex and that my
solution was better. Having done the research, I wouldn&amp;#39;t say that this is
necessarily true. Hence the little discussion now to be had about what should be
used when.&lt;/p&gt;
&lt;p&gt;First off, you should try to determine your requirements as precisely as
possible. In particular:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Do you need strict type safety? How do you define that? (What is not allowed
to happen?)&lt;/li&gt;
&lt;li&gt;Do you care about independent extensibility: if two different developers
extend the base framework and redistribute their exensions, can a third
developer come along and compose their extensions without resorting to
modifying the code written by the two first developers?&lt;/li&gt;
&lt;li&gt;Who is going to use the solution? What is its area of surface?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With that in mind...&lt;/p&gt;
&lt;p&gt;First off, if you care about independent extensibility, you have no choice but
to use my solution. The others &lt;em&gt;might&lt;/em&gt; be modified to accomodate it, by using
Java 8&amp;#39;s &lt;code&gt;default&lt;/code&gt; interface methods — but you&amp;#39;ll have to figure that yourself.
Do keep in mind that this aspect of it wasn&amp;#39;t shown in &lt;a href=&quot;https://gist.github.com/norswap/9d4dd9ae5c0fd2ef652a1f41778467ea#file-norswapep-java&quot;&gt;the example
code&lt;/a&gt; but is explained in &lt;a href=&quot;/java-visitor-pattern&quot;&gt;the previous post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Beware that independent extensibility does add a lot of boilerplate, and likely
will in other solutions too. And remember my solution isn&amp;#39;t type-safe.&lt;/p&gt;
&lt;p&gt;If you need perfect type safety (do you really?) &lt;strong&gt;and&lt;/strong&gt; you&amp;#39;re using immutable
trees, I would go for Torgensen&amp;#39;s 3rd solution (operation-centered with
object-level extensibility).&lt;/p&gt;
&lt;p&gt;In general, I would try to think hard about whether object algebras can be used
in your use case. In a sense, they&amp;#39;re the most elegant solution. One big caveat:
I would think twice about using them to build a data structure — now you have
two representations to keep in sync, and double duties.&lt;/p&gt;
&lt;p&gt;In general, I feel like the sweet spot for them is either small localized
things, or a central paradigm around which everything revolves. I&amp;#39;d be uneasy
about making an object algebra one of many big moving parts in a program. My
programmer&amp;#39;s intuition say this way lay clunky mixed-metaphors.&lt;/p&gt;
&lt;p&gt;I would avoid using the data-centered solutions (Torgersen&amp;#39;s 1st and the
covariant solution) &lt;strong&gt;unless&lt;/strong&gt; object instantiation is very tightly controlled
or centralized in your program. Playing with factories is not super fun.&lt;/p&gt;
&lt;p&gt;A few more observations:&lt;/p&gt;
&lt;p&gt;My solution and Torgersen&amp;#39;s 4th (hybrid) solution are pretty much tied. Mine is
guaranteed to work with independent extensibility (with the proper boilerplate),
but Torgersen&amp;#39;s will also work fairly often. But for instance, it won&amp;#39;t work if
two people introduce new data classes and implement an old visitor for these
classes — there is no easy/safe way to &amp;quot;merge&amp;quot; the two implementations. However,
it would more natural to implement the operations directly into the data class
in this case! Torgersen&amp;#39;s solution can also lead to less boilerplate in the case
where you never have to deal with independent extensibility.&lt;/p&gt;
&lt;p&gt;The covariant solution strictly dominates Torgersen&amp;#39;s 1st (data-centered)
solution.&lt;/p&gt;
      </description>
      <pubDate>2019-08-20T22:00:00.000Z</pubDate>
      <link>http://norswap.com/expression-problem-java</link>
      <guid isPermaLink="true">http://norswap.com/expression-problem-java</guid>
    </item>
    <item>
      <title>The Intuition For React</title>
      <description>
&lt;p&gt;The other day, I found &lt;a href=&quot;https://svelte.dev/blog/virtual-dom-is-pure-overhead&quot;&gt;this article&lt;/a&gt; (&amp;quot;Virtual DOM is pure overhead&amp;quot;) on
&lt;a href=&quot;https://news.ycombinator.com/item?id=19950253&quot;&gt;Hacker News&lt;/a&gt; and started reading it. Halfway through, &lt;a href=&quot;https://reactjs.org/&quot;&gt;React&lt;/a&gt; finally clicked
for me.&lt;/p&gt;
&lt;p&gt;See, I don&amp;#39;t do web programming, but I keep abreast of tech news, notably via
hacker news and web frameworks always feature heavily. If you had asked me
before what React was I could have given a generic answer (&amp;quot;something something
fronted framework something something state&amp;quot;), but I couldn&amp;#39;t have explaine why
we actually needed React, what it improved compared to using vanilla Javascript.&lt;/p&gt;
&lt;p&gt;Well, basically, the idea is that when some event occurs (e.g. the user performs
some input) the state of the page/application is going to change (probably
through the effect of an event listener). When that happens, you might have to
redraw part of the page layout.&lt;/p&gt;
&lt;p&gt;That&amp;#39;s when things can start to become hairy. If your application is complex,
there might many possible configurations for the layout, and so many ways in
which the layout could change.&lt;/p&gt;
&lt;p&gt;A common approach to these kind of problems is to model the application as a
state machine, with each state change represented as a state transition. This
approach works, but doesn&amp;#39;t scale too well to complex applications — the state
machine gets too complex, it doesn&amp;#39;t fit into your head anymore.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The idea behind React then is&lt;/strong&gt;: stop &lt;em&gt;changing&lt;/em&gt; the layout. Instead,
re-render the whole layout from the state each time the state changes.&lt;/p&gt;
&lt;p&gt;That way, you don&amp;#39;t have to worry about handling each possible change in each
possible application state: instead you just write component that know how to
render themselves given the state they are given.&lt;/p&gt;
&lt;p&gt;Of course, re-rendering on every change would be pretty slow, so React uses a
&amp;quot;Virtual DOM&amp;quot; (just a tree mimicking the real &lt;a href=&quot;https://www.w3.org/TR/WD-DOM/introduction.html&quot;&gt;DOM&lt;/a&gt;) and compares that to the
real DOM, only replacing parts of the layout that have actually changed.&lt;/p&gt;
&lt;p&gt;That&amp;#39;s pretty simple. I thought: well isn&amp;#39;t that explained on &lt;a href=&quot;https://reactjs.org/&quot;&gt;the official
website&lt;/a&gt;?&lt;/p&gt;
&lt;p&gt;Well actually it does a pretty good job:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Declarative&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;React makes it painless to create interactive UIs. Design simple views for
each state in your application, and React will efficiently update and render
just the right components when your data changes.&lt;/p&gt;
&lt;p&gt;Declarative views make your code more predictable and easier to debug.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Component-Based&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Build encapsulated components that manage their own state, then compose them
to make complex UIs.&lt;/p&gt;
&lt;p&gt;Since component logic is written in JavaScript instead of templates, you can
easily pass rich data through your app and keep state out of the DOM.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;But it doesn&amp;#39;t explain that the purpose of this &amp;quot;efficient re-rendering&amp;quot; is to
avoid having to keep track of the current layout yourself and change it in a
legitimate way, which quickly becomes error prone.&lt;/p&gt;
&lt;p&gt;And that&amp;#39;s it for today!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Post Scriptum&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The topic of the &lt;a href=&quot;https://svelte.dev/blog/virtual-dom-is-pure-overhead&quot;&gt;article&lt;/a&gt; itself is pretty interesting in its
own right. So is the discussion at &lt;a href=&quot;https://news.ycombinator.com/item?id=19950253&quot;&gt;Hacker News&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In reeeal condensed, the article says that because the optimal manual change to
the DOM is going to be faster than diffing + a sub-optimal DOM change performed
by React, the virtual DOM is pure overhead. It&amp;#39;s right, but leaves out the fact
that all that is done for managing complexity.&lt;/p&gt;
&lt;p&gt;The article is written by Rich Harris, the author of &lt;a href=&quot;https://svelte.dev/&quot;&gt;the Svelte
framework&lt;/a&gt; — and sell Svelte&amp;#39;s ability to basically manage complexity
but at the same time generate the optimal change at build-time.&lt;/p&gt;
&lt;p&gt;The discussion makes other interesting points regarding the genesis of React.
Because the algorithm is fickle I&amp;#39;m gonna be quoting the discussion here:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;oraphalous&lt;/em&gt;:&lt;/p&gt;
&lt;p&gt;I think this article - and many of the comments on this thread are forgetting
the context of how DOM manipulation was typically done when the virtual DOM
approach was introduced.&lt;/p&gt;
&lt;p&gt;Here&amp;#39;s the gist of how folks would often update an element. You&amp;#39;d subscribe to
events on the root element of your component. And if your component is of any
complexity at all - first thing you&amp;#39;d probably do is ask jQuery to go find any
child elements that need updating - inspecting the DOM in various ways so as
to determine the component&amp;#39;s current state.&lt;/p&gt;
&lt;p&gt;If your component needed to affect components higher up, or sibling to the
current instance - then your application is often doing a search of the DOM to
find the nodes.. and yes if you architect things well then you could avoid a
lot of these - but let&amp;#39;s face it, front end developers weren&amp;#39;t typically
renown for their application architecture skills.&lt;/p&gt;
&lt;p&gt;In short - the DOM was often used to store state. And this just isn&amp;#39;t a very
efficient approach.&lt;/p&gt;
&lt;p&gt;This is what I understood the claim that VDOMs are faster than the real DOM
meant - and the article is pretty much eliding this detail.&lt;/p&gt;
&lt;p&gt;As far as I&amp;#39;m aware React and its VDOM approach was the framework that
deserves the credit for changing the culture of how we thought about state
management on the frontend. That newer frameworks have been able to build upon
this core insight - in ways that are even more efficient than the VDOM
approach is great - but they should pay homage to that original insight and
change in perspective React made possible.&lt;/p&gt;
&lt;p&gt;I feel this article and many of the comments here so far - fail to do that -
and worse, seem to be trying to present React&amp;#39;s claim of the VDOM faster than
the DOM as some kind of toddler mistake.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;jasonkester:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;the DOM was often used to store state.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Every once in a while I&amp;#39;m reminded that I&amp;#39;m mostly disconnected from the way
&amp;quot;most&amp;quot; people build things. Thanks for this insight. It finally explains why I
hear people talking down about &amp;quot;jQuery developers&amp;quot;, if that was something that
people actually did.&lt;/p&gt;
&lt;p&gt;But wow. I&amp;#39;ve been building javascript-heavy web stuff since the mid 90&amp;#39;s and it
had never occurred to me to do that. You have your object model, and each thing
had a reference back to its DOM node and some methods to update itself if
necessary. All jQuery did was make it less typing to initially grab the DOM node
(or create it), and give you some shorthand for setting classes on them.&lt;/p&gt;
&lt;p&gt;It also explains why people liked React, which has always seemed completely
overcomplicated to me, but which probably simplified things a lot if you didn&amp;#39;t
ever have a proper place to keep your data model.&lt;/p&gt;
&lt;p&gt;I can&amp;#39;t imagine I was the only one who had things figured out back then,
though. The idea you&amp;#39;re talking about sounds pretty terrible.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;onion2k:&lt;/p&gt;
&lt;p&gt;Bare in mind that most people using jQuery weren&amp;#39;t writing JavaScript
applications. They were writing backend-driven applications with jQuery
enhancements, so there was no real concept of frontend &amp;#39;state&amp;#39; that was
separate to the DOM itself. If your frontend code needed to work with &amp;#39;state&amp;#39;
like form values or element attributes you had to read them, and because there
could be multiple separate bits of code working with the same form or element
you had to write values back to the DOM so the next bit of code had the
correct &amp;#39;state&amp;#39;.&lt;/p&gt;
&lt;p&gt;The thing that changed to make frontend development improve dramatically was
hash based routing with ajax, and later the introduction of the history API.
That caused frontend development to have a need to retain state between
&amp;#39;pages&amp;#39;, so then was a need to find a better way to store it than using DOM
attributes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Udik:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;the thing that changed to make frontend development improve
dramatically was hash based routing with ajax...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I think that what&amp;#39;s changed is simply that people realized that it&amp;#39;s way less
messy to use the backend only as a data source (with ajax calls), and leave
everything else to the frontend. The cognitive overhead of having the server
producing html with some implicit state, then updating that state interactively,
and then losing everything again by posting the whole page to the server, was
simply unbearable.&lt;/p&gt;
&lt;p&gt;When I started building web applications in 2004 I had some experience in
writing desktop apps: I simply created a js library to create and destroy UI
elements, and wrote &amp;quot;desktop&amp;quot; apps running in the browser.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Isn&amp;#39;t all that positively enlightening?&lt;/p&gt;
      </description>
      <pubDate>2019-05-31T22:00:00.000Z</pubDate>
      <link>http://norswap.com/react-intuition</link>
      <guid isPermaLink="true">http://norswap.com/react-intuition</guid>
    </item>
    <item>
      <title>The Visitor Pattern in Java 8</title>
      <description>
&lt;p&gt;The visitor pattern is probably one of the most (in)famous design patterns.&lt;/p&gt;
&lt;p&gt;The problem it solves is fairly simple. In most object-oriented languages, it&amp;#39;s
easy to add new &lt;em&gt;data-type variants&lt;/em&gt;, i.e. new sub-classes. These classes can
naturally override the methods in the super-class/interface. However, we can&amp;#39;t
add methods to an existing super-class without modifying it — which is not
possible if it belongs to a library. The visitor pattern is a way to achieve
something similar.&lt;/p&gt;
&lt;p&gt;Imagine you want to add a &lt;code&gt;print()&lt;/code&gt; method to an existing interface called
&lt;code&gt;Base&lt;/code&gt; that has implementations &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt;. If we could add &lt;code&gt;print()&lt;/code&gt; to
&lt;code&gt;Base&lt;/code&gt;, we could call &lt;code&gt;new A().print()&lt;/code&gt;. The visitor pattern will allow us to do
&lt;code&gt;new A().accept(new PrintVisitor())&lt;/code&gt; to achieve the same thing.&lt;/p&gt;
&lt;p&gt;For this to work, &lt;code&gt;Base&lt;/code&gt; needs to have been conceived with the visitor pattern
in mind. It needs to declare an abstract &lt;code&gt;accept(Visitor)&lt;/code&gt; method and all its
implementations need to implement it according to the pattern.&lt;/p&gt;
&lt;p&gt;With this interface and requirements in mind, let&amp;#39;s see some code.&lt;/p&gt;
&lt;h2 id=&quot;basic-example&quot;&gt;Basic Example&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;interface Visitor {
    void visit (A object);
    void visit (B object);
}

interface Base {
    void accept (Visitor visitor);
}

class A implements Base {
    @Override public void accept (Visitor visitor) {
        visitor.visit(this); // calls visit(A)
    }
}

class B implements Base {
    @Override public void accept (Visitor visitor) {
        visitor.visit(this); // calls visit(B)
    }
}

class PrintVisitor implements Visitor
{
    @Override public void visit (A object) {
        System.out.println(&amp;quot;printing an A&amp;quot;);
    }
    @Override public void visit (B object) {
        System.out.println(&amp;quot;printing a B&amp;quot;);
    }
}

public class Example
{
    public static void print (Base object) {
        object.accept(new PrintVisitor());
    }
    public static void main (String[] args) {
        print(new A());
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What happens is that the &lt;code&gt;accept()&lt;/code&gt; method declared in &lt;code&gt;Base&lt;/code&gt; must be overriden
in all of its implementations (&lt;code&gt;Base&lt;/code&gt; could have been a class as well). The role
of the overriden method is to redirect the execution to the correct
&lt;code&gt;Visitor#visit&lt;/code&gt; overload. This is possible (and type-safe) because the static
type of &lt;code&gt;this&lt;/code&gt; corresponds to its dynamic type (&lt;code&gt;A&lt;/code&gt; or &lt;code&gt;B&lt;/code&gt;) in the overriden
method.&lt;/p&gt;
&lt;p&gt;And honestly, that&amp;#39;s all there is to the common formulation of the visitor
pattern. Explanations tend to contrive the point.&lt;/p&gt;
&lt;p&gt;However, the pattern can be taken much further to supply a solution to the
&lt;em&gt;expression problem&lt;/em&gt;. Basically, what if we have our visitor defined like above
but then we add a new implementation of &lt;code&gt;Base&lt;/code&gt;? Currently, all implementations
have to be known in advance, because they are hardcoded into &lt;code&gt;Visitor&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But first, let&amp;#39;s solve a small practical issue.&lt;/p&gt;
&lt;h2 id=&quot;handling-different-signatures&quot;&gt;Handling Different Signatures&lt;/h2&gt;
&lt;p&gt;There is an easily solvable issue with the design I presented above: both
&lt;code&gt;accept&lt;/code&gt; and &lt;code&gt;visit&lt;/code&gt; don&amp;#39;t admit extra parameters, nor do they have return
values.&lt;/p&gt;
&lt;p&gt;One solution is to rewrite these methods to include the required parameters and
return type. But doing this means that you need one &lt;code&gt;Visitor&lt;/code&gt;-like class and one
&lt;code&gt;accept&lt;/code&gt; overload for each signature of interest.&lt;/p&gt;
&lt;p&gt;A better solution is to use the &lt;code&gt;Visitor&lt;/code&gt; implementation to pass data around.
Here is an example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;class AddRankVisitor extends Visitor
{
    public int result;
    public final int base;

    public AddRankVisitor (int base) {
        this.base = base;
    }

    @Override public void visit (A object) { set_result(base + 1); }
    @Override public void visit (B object) { set_result(base + 2); }
}

public class Example
{
    public static void add_rank (Base object, int base)
    {
        Visitor visitor = new AddRankVisitor(base);
        object.accept(visitor);
        return visitor.result;
    }

    public static void main (String[] args) {
        System.out.println(add_rank(new A(), 5)); // prints 6
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We use &lt;code&gt;result&lt;/code&gt; to represent the return value, and &lt;code&gt;base&lt;/code&gt; as a parameter. Pretty
easy, isn&amp;#39;t it?&lt;/p&gt;
&lt;h2 id=&quot;the-expression-problem&quot;&gt;The Expression Problem&lt;/h2&gt;
&lt;p&gt;The original formulation of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Expression_problem&quot;&gt;expression problem&lt;/a&gt; is as follow:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The goal is to define a datatype by cases, where one can add new cases to the
datatype and new functions over the datatype, without recompiling existing
code, and while retaining static type safety (e.g., no casts).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you consider it in the context of object-oriented programming, a &lt;em&gt;datatype&lt;/em&gt;
corresponds to a parent class or interface. &lt;em&gt;New datatype cases&lt;/em&gt; are new classes
extending the parent class or interface. &lt;em&gt;New functions&lt;/em&gt; are as thought you
could add an abstract method to the parent class or interface, along with
overrides for the implementing classes.&lt;/p&gt;
&lt;p&gt;Adding a new case is simply sub-classing/implementation. Adding new functions
can be done via the visitor pattern as seen above. But can we do both?&lt;/p&gt;
&lt;p&gt;If you defined visitors as we did above, then if you add a new implementation of
&lt;code&gt;Base&lt;/code&gt;, it won&amp;#39;t be handled by our &lt;code&gt;print&lt;/code&gt; and &lt;code&gt;add_rank&lt;/code&gt; methods. Like we said
before, &lt;code&gt;Visitor&lt;/code&gt; needs to list all the implementations.&lt;/p&gt;
&lt;p&gt;In theory, there is nothing that prevents solving the expression problem at the
language level. In an ideal world, we&amp;#39;d just be able to add abstract extension
methods that have to be implemented for all classes implementing the interface.
The &lt;a href=&quot;https://en.wikipedia.org/wiki/Linker_(computing)&quot;&gt;linker&lt;/a&gt; would then verify that these methods were implemented for all such
classes, and generate the proper &lt;a href=&quot;https://en.wikipedia.org/wiki/Virtual_method_table&quot;&gt;virtual method tables&lt;/a&gt;. But no such
object-oriented language exists.&lt;/p&gt;
&lt;p&gt;Perhaps a more well-understood way to do this is through statically-typed
&lt;a href=&quot;https://en.wikipedia.org/wiki/Multiple_dispatch&quot;&gt;multi-methods&lt;/a&gt;. But I don&amp;#39;t know any actual practical language (i.e. something
used in production) that has them, though there are academic papers on the
subject. &lt;a href=&quot;https://nim-lang.org/docs/tut2.html#object-oriented-programming-dynamic-dispatch&quot;&gt;Nim&lt;/a&gt; has statically-typed multi-methods but you must include a default
implementation. &lt;a href=&quot;https://blogs.msdn.microsoft.com/laurionb/2009/08/13/multimethods-in-c-4-0-with-dynamic/&quot;&gt;C# 4&lt;/a&gt; has a &lt;code&gt;dynamic&lt;/code&gt; keyword that enables multi-methods but
without compile-time checking.&lt;/p&gt;
&lt;p&gt;There are languages that solve the expression problem however. The foremost
solution is &lt;a href=&quot;https://en.wikipedia.org/wiki/Type_class&quot;&gt;typeclasses&lt;/a&gt;, notably in Haskell (also read &lt;a href=&quot;/typeclass-scheme&quot;&gt;here&lt;/a&gt;
for my thoughts on a potential typeclass system).&lt;/p&gt;
&lt;p&gt;Basically, you can add new methods over existing types by writing new
typeclasses and their implementations for the given types. Compared to our
object-oriented scenario, there is no notion of inheritance, so no way to say
that a group of types should implement the typeclass — the expectation is that
this will be caught statically when you try to require a typeclass
implementation for such a type.&lt;/p&gt;
&lt;p&gt;But back to Java-land. Let&amp;#39;s see how we can approach a solution by building on
top of the visitor pattern.&lt;/p&gt;
&lt;h2 id=&quot;adding-a-class-to-an-existing-visitor&quot;&gt;Adding a Class to an Existing Visitor&lt;/h2&gt;
&lt;p&gt;Let&amp;#39;s add a new implementation of &lt;code&gt;Base&lt;/code&gt; called &lt;code&gt;C&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;interface VisitorC extends Visitor {
    void visit (C object);
}

class C implements Base {
    @Override public void accept (Visitor visitor) {
        ((VisitorC) visitor).visit(this);
    }
}

class PrintVisitorC extends PrintVisitor implements VisitorC {
    @Override public void visit (C object) {
        System.out.println(&amp;quot;printing a C&amp;quot;);
    }
}

class AddRankVisitorC extends AddRankVisitor implements VisitorC
{
    public AddRankVisitorC (int base) { super(base); }
    @Override public void visit (C object) { set_result(base + 3); }
}

public class Example
{
    public static void print (Base object) {
        object.accept(new PrintVisitorC());
    }

    public static void add_rank (Base object, int base)
    {
        VisitorC visitor = new AddRankVisitorC(base);
        object.accept(visitor);
        return visitor.result;
    }

    public static void main (String[] args) {
        print(new A());
        print(new C());
        System.out.println(add_rank(new A(), 5)); // prints 6
        System.out.println(add_rank(new C(), 5)); // prints 8
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since &lt;code&gt;Visitor&lt;/code&gt; doesn&amp;#39;t have an overload for &lt;code&gt;C&lt;/code&gt;, we add this overload in an
extension of &lt;code&gt;Visitor&lt;/code&gt; called &lt;code&gt;VisitorC&lt;/code&gt;. The only worry: &lt;code&gt;accept&lt;/code&gt; takes
&lt;code&gt;Visitor&lt;/code&gt;, not &lt;code&gt;VisitorC&lt;/code&gt;, so we have to perform a cast.&lt;/p&gt;
&lt;p&gt;We similarly extends &lt;code&gt;PrintVisitor&lt;/code&gt; and &lt;code&gt;AddRankVisitor&lt;/code&gt; to add an
implementation for the &lt;code&gt;visit(C)&lt;/code&gt; overload.&lt;/p&gt;
&lt;p&gt;Also notice how we do not need to reimplement the storage for &lt;code&gt;AddRankVisitorC&lt;/code&gt;
if we extend &lt;code&gt;AddRankVisitor&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The trick works: we can use a &lt;code&gt;PrintVisitorC&lt;/code&gt; and &lt;code&gt;AddRankVisitorC&lt;/code&gt; to visit
both the previous &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; classes but also the new &lt;code&gt;C&lt;/code&gt; class.&lt;/p&gt;
&lt;p&gt;In the process however, we&amp;#39;ve jeopardized type safety. We could write: &lt;code&gt;new
C().accept(new PrintVisitor())&lt;/code&gt; and the code would compile but crash at run-time
with a &lt;code&gt;ClassCastException&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There actually is a pretty rich literature on how to solve the expression
problem in Java with proper statical type safety. So it &lt;em&gt;is&lt;/em&gt; possible. However,
all these solutions have other pitfalls (in my humble opinion, worse pitfalls).
A followup article will discuss the limitations of these solutions and why I
feel my solution is better.&lt;/p&gt;
&lt;p&gt;But before... we are not entirely done yet!&lt;/p&gt;
&lt;h2 id=&quot;composing-independent-extensions&quot;&gt;Composing Independent Extensions&lt;/h2&gt;
&lt;p&gt;The last section deals with extending our system with a new class. But what if
you use two libraries, both of which have independently extended the visitor.
Can you compose them back into a single usable visitor?&lt;/p&gt;
&lt;p&gt;If the library authors have followed a couple of simple guidlines, you can!&lt;/p&gt;
&lt;p&gt;The key idea is as follow: each time we implement / extend a visitor, we will do
it in an interface instead of a class. We will add a corresponding class only to
make the interface instanciable and supply the necessary storage.&lt;/p&gt;
&lt;p&gt;With that in mind, let us revise what we have done above. First for what we had
before adding &lt;code&gt;C&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;interface _PrintVisitor extends Visitor
{
    @Override default void visit (A object) {
        System.out.println(&amp;quot;printing an A&amp;quot;);
    }
    @Override default void visit (B object) {
        System.out.println(&amp;quot;printing a B&amp;quot;);
    }
}

class PrintVisitor implements _PrintVisitor {}&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;interface _AddRankVisitor extends Visitor
{
    int result();
    void set_result (int result);
    int base();

    @Override default void visit (A object) { set_result(base() + 1); }
    @Override default void visit (B object) { set_result(base() + 2); }
}

class AddRankVisitor implements _AddRankVisitor
{
    private int result;
    private int base;

    @Override public int result() { return result; }

    @Override public void set_result (int result) {
        this.result = result;
    }

    @Override int base() { return base; }

    public AddRankVisitor (int base) {
        this.base = base;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For &lt;code&gt;PrintVisitor&lt;/code&gt;, the class becomes an interface with a prefix &lt;code&gt;_&lt;/code&gt; and we add
a class with an empty body — no extra work required.&lt;/p&gt;
&lt;p&gt;For &lt;code&gt;AddRankVisitor&lt;/code&gt;, our fields are replaced with getter/setters in the
interface and we have to implement the storage for those in the class.&lt;/p&gt;
&lt;p&gt;Notice that with this setup, our former &lt;code&gt;Example.main&lt;/code&gt; methods (from before
adding &lt;code&gt;C&lt;/code&gt;) still work unmodified.&lt;/p&gt;
&lt;p&gt;Let&amp;#39;s then add back &lt;code&gt;C&lt;/code&gt;, which will constitute the first of two independent
extensions:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;// `VisitorC` and `C` remain unchanged from above!

interface _PrintVisitorC extends _PrintVisitor, VisitorC
{
    @Override default void visit (C object) {
        System.out.println(&amp;quot;printing a C&amp;quot;);
    }
}

class PrintVisitorC implements _PrintVisitorC {}

interface _AddRankVisitorC extends AddRankVisitor, VisitorC
{
    @Override default void visit (C object) { set_result(base + 3); }
}

class AddRankVisitorC extends AddRankVistor
    implements _AddRankVisitorC
{
    public AddRankVisitorC (int base) { super(base); }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is a lot like what we just did for the base visitors. Like before, we don&amp;#39;t
need to reimplement the storage for &lt;code&gt;AddRankVisitorC&lt;/code&gt; if we extend
&lt;code&gt;AddRankVisitor&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let&amp;#39;s do another similar extension, called &lt;code&gt;D&lt;/code&gt;. This is almost the same code by
a different name:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;interface VisitorD extends Visitor {
    void visit (D object);
}

class D implements Base
{
    @Override public void accept (Visitor visitor) {
        ((VisitorD) visitor).visit(this);
    }
}

interface _PrintVisitorD extends _PrintVisitor, VisitorD
{
    @Override default void visit (D object) {
        System.out.println(&amp;quot;printing a D&amp;quot;);
    }
}

class PrintVisitorD implements _PrintVisitorD {}

interface _AddRankVisitorD extends AddRankVisitor, VisitorD
{
    @Override default void visit (D object) { set_result(base + 4); }
}

class AddRankVisitorD extends AddRankVistor
    implements _AddRankVisitorD
{
    public AddRankVisitorD (int base) { super(base); }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that we have our two independant extensions setup properly with interfaces,
let&amp;#39;s compose them into a single one.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;interface VisitorCD
    extends VisitorC, VisitorD {}

interface _PrintVisitorCD
    extends VisitorCD, _PrintVisitorC, _PrintVisitorD {}

class PrintVisitorCD
    implements _PrintVisitorCD {}

interface _AddRankVisitorCD
    extends VisitorCD, _AddRankVisitorC, _AddRankVisitorD {}

class AddRankVisitorCD extends AddRankVistor
    implements _AddRankVisitorCD
{
    public AddRankVisitorCD (int base) { super(base); }
}

public class Example
{
    public static void print (Base object) {
        object.accept(new PrintVisitorCD());
    }

    public static void add_rank (Base object, int base)
    {
        VisitorCD visitor = new AddRankVisitorCD(base);
        object.accept(visitor);
        return visitor.result;
    }

    public static void main (String[] args) {
        print(new A());
        print(new C());
        print(new D());
        System.out.println(add_rank(new A(), 5)); // prints 6
        System.out.println(add_rank(new C(), 5)); // prints 8
        System.out.println(add_rank(new D(), 5)); // prints 9
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That&amp;#39;s it? Yep that&amp;#39;s it! And that&amp;#39;s actually the long version — which you
should use when you expose the visitor as part of a library. Even then
&lt;code&gt;VisitorCD&lt;/code&gt; is not capital and just helps add a tiny bit of type safety.&lt;/p&gt;
&lt;p&gt;If you write client code and nobody is supposed to extend your visitor, you
could just write:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;class PrintVisitorCD
    implements _PrintVisitorC, _PrintVisitorD {}

class AddRankVisitorCD
    extends AddRankVisitor
    implements, _AddRankVisitorC, _AddRankVisitorD
{
    public AddRankVisitorCD (int base) { super(base); }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Isn&amp;#39;t life beautiful?&lt;/p&gt;
&lt;p&gt;You can consult the full final example (with &lt;code&gt;A&lt;/code&gt;, &lt;code&gt;B&lt;/code&gt;, &lt;code&gt;C&lt;/code&gt;, &lt;code&gt;D&lt;/code&gt;, &lt;code&gt;PrintVisitor&lt;/code&gt;
and &lt;code&gt;AddRankVisitor&lt;/code&gt;) on &lt;a href=&quot;https://gist.github.com/norswap/7f3d40adb85491d440bdf026b738890a&quot;&gt;this page&lt;/a&gt;.&lt;/p&gt;
      </description>
      <pubDate>2019-05-24T22:00:00.000Z</pubDate>
      <link>http://norswap.com/java-visitor-pattern</link>
      <guid isPermaLink="true">http://norswap.com/java-visitor-pattern</guid>
    </item>
    <item>
      <title>The Zizek Peterson Debate</title>
      <description>
&lt;p&gt;Having previously enjoyed and written about both &lt;a href=&quot;/zizek-ideology/&quot;&gt;Slavoj Zizek&lt;/a&gt; and &lt;a href=&quot;/12-rules/&quot;&gt;Jordan
Peterson&lt;/a&gt;, I was interested to learn they&amp;#39;d have a debate. Billed as &amp;quot;The Debate
of the Century&amp;quot;, its official title was &amp;quot;Happiness: Capitalism vs. Marxism&amp;quot;.&lt;/p&gt;
&lt;p&gt;Having watched it (&lt;a href=&quot;https://www.youtube.com/watch?v=lsWndfzuOc4&quot;&gt;video&lt;/a&gt;), I regret to inform you it was neither of those
things. But I nonetheless found it interesting.&lt;/p&gt;
&lt;p&gt;The debate can best be seen as a collection of interesting ideas from both
authors with occasional bridges being thrown accross.&lt;/p&gt;
&lt;h2 id=&quot;peteresons-opening-statement&quot;&gt;Petereson&amp;#39;s Opening Statement&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=lsWndfzuOc4&amp;amp;t=899s&quot;&gt;(Video Timestamp)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Peterson opens with a 30-minutes speech where he criticizes the communist
manifesto, which he&amp;#39;d re-read for the occasion. I&amp;#39;d say his criticism is
essentially well-placed, &lt;em&gt;but&lt;/em&gt; as many are &lt;a href=&quot;http://archive.is/l1kc9&quot;&gt;quick to point out&lt;/a&gt;,
attacking the manifesto isn&amp;#39;t perhaps attacking Communism or even Marxism as its
strongest point. Still, that criticism would be salutary for most &amp;quot;communists&amp;quot;
I&amp;#39;ve talked to (which, unfortunately were more fanboys than rigorous
intellectuals). Another issue is that it&amp;#39;s hard to pin down what communism &lt;em&gt;is&lt;/em&gt;
with its constellation of thinkers. At least Marxism is closed off now that Marx
is dead and he never amended his manifesto that I know of.&lt;/p&gt;
&lt;p&gt;I was surprised (and a bit disappointed) that Peterson didn&amp;#39;t seem more
knowledgeable about communism. He makes a big deal out of how he obsessed about
the cold war, and it would seem to me that understanding the ideological roots
of the Soviet Union would be pretty important. Similarly, he&amp;#39;s crusading against
&amp;quot;post-modern neo-marxists&amp;quot; and it&amp;#39;s strange not to understand or at least know
your opponent&amp;#39;s ideas.&lt;/p&gt;
&lt;p&gt;The statement has some interesting ideas though, including the statement that
&amp;quot;almost all ideas are wrong&amp;quot;.&lt;/p&gt;
&lt;h2 id=&quot;zizeks-opening-statement&quot;&gt;Zizek&amp;#39;s Opening Statement&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=lsWndfzuOc4&amp;amp;t=2776s&quot;&gt;(Video Timestamp)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Zizek&amp;#39;s opening statement is probably the most interesting part of the debate.
You can find a transcript of it &lt;a href=&quot;http://archive.is/2XONl&quot;&gt;here&lt;/a&gt;. In typical Zizek fashion,
it&amp;#39;s made of many idea nuggets only tenuously linked to one other — although
there is a link, all the more difficult to follow in the spoken form.&lt;/p&gt;
&lt;p&gt;Zizek makes many interesting points. First, on how happiness is often the wrong
yardstick:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In our daily lives, we pretend to desire things which we do not really desire,
so that ultimately the worst thing that can happen is to get what we
officially desire. So, I agree that human life of freedom and dignity does not
consist just in searching for happiness, no matter how much we spiritualise
it, or in the effort to actualise our inner potentials. We have to find some
meaningful cause beyond the mere struggle for pleasurable survival.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Second on how modernity is characterized by the absence of authority (and
divinity) that could impose meaning from above, and how it&amp;#39;s impossible to go
back to this pre-modern state of affairs.&lt;/p&gt;
&lt;p&gt;He sees the rejections of some systemic failures of capitalism onto external
causes (from Donald Trump to migrants).&lt;/p&gt;
&lt;p&gt;His thoughts on social constructionism vs evolutionary psychology (comparing
them, of all things, to French cuisine) are also worth a listen/read.&lt;/p&gt;
&lt;p&gt;What&amp;#39;s perhaps most surprising is that Zizek doesn&amp;#39;t defend Marxism, which he
squarely throws under the bus as failed. He doesn&amp;#39;t do much to defend Communism
either, but points a problem with capitalism on what Marx called &amp;quot;commons&amp;quot; (I
wrote &lt;a href=&quot;/commons/&quot;&gt;about commons&lt;/a&gt; before). Capitalism threatens the commons due to its
self-reproducing nature, though he points out that communism had this
self-reproducing nature to (&amp;quot;the historical necessity of progress towards
communism&amp;quot;, though — fittingly — this drive was much more centralized).&lt;/p&gt;
&lt;p&gt;In fact, this was a surprise for many, but both men tended to agree a whole lot,
with only surface differences (some, though not all, could be chalked to their
vastly different backgrounds). The tone of the debate was also noted to be very
cordial and respectful, something I really appreciated.&lt;/p&gt;
&lt;p&gt;Zizek&amp;#39;s conclusion is, in his words &amp;quot;pessimistic&amp;quot;: we will continue to slide
towards disaster, maybe some catastrophes can shake us out of our ruts.&lt;/p&gt;
&lt;p&gt;I encourage you to &lt;a href=&quot;https://www.youtube.com/watch?v=lsWndfzuOc4&quot;&gt;watch the video&lt;/a&gt; or &lt;a href=&quot;http://archive.is/2XONl&quot;&gt;read the transcript&lt;/a&gt;
(or both), this part is the most interesting.&lt;/p&gt;
&lt;p&gt;I&amp;#39;d say this reminds me a lot of what I&amp;#39;ve &lt;a href=&quot;/zizek-ideology/&quot;&gt;seen from him&lt;/a&gt;
already. Some idea make a reappearance, other are newly developed, but it&amp;#39;s
clear these are coherent thoughts from the same thinker.&lt;/p&gt;
&lt;h2 id=&quot;further-comments&quot;&gt;Further Comments&lt;/h2&gt;
&lt;p&gt;The rest of the debate was (if memory serves) also interesting, but it gets even
more disjointed. Zizek was hard to follow in his prepared statement, he becomes
increasingly erratic in the rest of the debates. It&amp;#39;s funny to see Peterson
almost sweating from concentration trying to discern a thread.&lt;/p&gt;
&lt;p&gt;Like I said before, I appreciated immensely that both men seemed pretty much on
agreement (as well they should, adopting neither deluded far-left or far-right
opinions), and that the debate was cordial, even mutually admirative at times.&lt;/p&gt;
&lt;p&gt;It&amp;#39;s also &lt;em&gt;entertaining&lt;/em&gt; to watch, and I suspect this was the mode in which most
people consumed the debate.&lt;/p&gt;
&lt;p&gt;Peterson is his usual intensely-driven professorial self, which I personally
enjoy — while Zizek is his tick-ridden idiosyncratic self. He&amp;#39;s also quite
semi-intentionally quite funny. It&amp;#39;s hard not to crack up when — out of time for
his remarks, he starts telling a Slovenian joke, then after the first sentence
interrupts himself to add &amp;quot;I will finish immediately&amp;quot; before finishing the joke.&lt;/p&gt;
&lt;p&gt;If you&amp;#39;re curious, here&amp;#39;s &lt;a href=&quot;https://www.youtube.com/watch?v=lsWndfzuOc4&amp;amp;feature=youtu.be&amp;amp;t=6336&quot;&gt;the timestamp for the joke&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Regarding how the debate was receiving, judging from Twitter and some quick
google, pretty well on the center-right, and pretty badly on the left (broadly).&lt;/p&gt;
&lt;p&gt;A good criticism is the one made &lt;a href=&quot;http://archive.is/l1kc9&quot;&gt;by Benjamin Studebaker&lt;/a&gt;. His
argument abbreviated:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There are three necessary features which distinguish a bad Marx paper:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The paper contains a close reading of the Manifesto.&lt;/li&gt;
&lt;li&gt;The paper contains almost no references to any other texts, either by Marx or by other socialist thinkers.&lt;/li&gt;
&lt;li&gt;The paper contains a long digression about all the reasons the Soviet Union was terrible. I call this the “tankie-bashing” bit.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://archive.is/l1kc9&quot;&gt;The article&lt;/a&gt; also has a nice summary of Peterson&amp;#39;s opening
statement.&lt;/p&gt;
&lt;p&gt;His charge against Peterson&amp;#39;s argument is followed with how he thinks Zizek
should have replied to defend communism. It&amp;#39;s quite interesting, but it&amp;#39;s not
what the debate ended up being.&lt;/p&gt;
&lt;p&gt;Other commentators &lt;a href=&quot;http://archive.is/IkI0e&quot;&gt;opted for snide&lt;/a&gt;, which I think is sad — although the linked
live commentary &lt;em&gt;is&lt;/em&gt; quite funny.&lt;/p&gt;
&lt;p&gt;Other than that, multiple commentators (&lt;a href=&quot;http://archive.is/PHLu5&quot;&gt;one&lt;/a&gt;, &lt;a href=&quot;http://archive.is/MY9q5&quot;&gt;two&lt;/a&gt;) pointed that the &amp;quot;Debate
of the Century&amp;quot; was overhyped (overmarketed, really), and seemed poorly prepared
by its protagonists. And I must agree. Zizek is particularly culpable here, for
talking about wherever he felt like that was tenuously related rather than
sticking to &amp;quot;his camp&amp;quot;, but I feel like the resulting discussing ended up more
interesting because of it.&lt;/p&gt;
&lt;p&gt;And sure, the level of the discussion might have been unappealing to all the
critcial theorists that were widely read. But precisely due to the marketing,
this event had the possibility to reach a much wider audience. And if you think
something wrong was said therein, you ought to engage the content rather than
ridiculing the form.&lt;/p&gt;
&lt;p&gt;Ultimately, &lt;a href=&quot;https://www.youtube.com/watch?v=lsWndfzuOc4&quot;&gt;make your own opinion&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Bonus: &lt;a href=&quot;https://www.iep.utm.edu/zizek/&quot;&gt;Zizek on the Internet Encyclopedia of Philosophy&lt;/a&gt;&lt;/p&gt;
&lt;!-- original: https://pastebin.com/SNsDQ5SF --&gt;
&lt;!-- https://www.currentaffairs.org/2019/04/how-zizek-should-have-replied-to-jordan-peterson --&gt;
&lt;!-- https://nowtoronto.com/culture/books/jordan-peterson-slavoj-zizek-debate/ --&gt;
&lt;!-- https://www.theguardian.com/world/2019/apr/20/jordan-peterson-slavoj-zizek-happiness-capitalism-marxism --&gt;
&lt;!-- https://www.currentaffairs.org/2019/04/live-commentary-on-the-zizek-peterson-debate --&gt;
      </description>
      <pubDate>2019-05-17T22:00:00.000Z</pubDate>
      <link>http://norswap.com/zizek-peterson</link>
      <guid isPermaLink="true">http://norswap.com/zizek-peterson</guid>
    </item>
    <item>
      <title>One Year of Weightlifting</title>
      <description>
&lt;p&gt;Previously: &lt;a href=&quot;/weight-training&quot;&gt;Starting Weight Training&lt;/a&gt;, &lt;a href=&quot;/weight-training-2&quot;&gt;More Weightlifting
Observations&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Been lifting for more than one year now! So what&amp;#39;s new compared to last time?&lt;/p&gt;
&lt;p&gt;The last post ended in me saying training got me tired and switching to training
only twice a week instead of three. This ended up lasting a bit less than three
months until early-January, and in retrospect, it was a mistake. I probably
should have done some kind of &lt;a href=&quot;https://builtwithscience.com/deload-week/&quot;&gt;deload week&lt;/a&gt; instead and (a) eaten more, (b)
slept more. More on this later. It&amp;#39;s not entirely borne out in the data, but
that period felt like a slog in terms of progress.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;progress.png&quot; alt=&quot;Graph of weight lifted over time.&quot;&gt;&lt;/p&gt;
&lt;p&gt;There is about two weeks of data missing between that graph and &lt;a href=&quot;/weight-training-2#progression&quot;&gt;the
last&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;What else can be seen there? The 160kg squat is my new elusive nemesis. My max
is once 2x157.5kg currently. Deadlift stalled at 160kg for a bit, but then took
off. I finally broke 100kg on the bench press.&lt;/p&gt;
&lt;h1 id=&quot;revamped-program&quot;&gt;Revamped Program&lt;/h1&gt;
&lt;p&gt;I finally changed my program! Or more properly, extended it. Previously, I&amp;#39;d
been running classical &lt;a href=&quot;https://stronglifts.com/5x5/&quot;&gt;Stronglifts&lt;/a&gt; which had two workouts: squat, bench press
and barbell row for workout A; squat again, overhead press and deadlift for
workout B. What I did was drop the barbell row altogether (I described my
frustration with it &lt;a href=&quot;/weight-training-2&quot;&gt;last time&lt;/a&gt; and it did return), and drop the squat from
workout B.&lt;/p&gt;
&lt;p&gt;To supplement this, I integrated exercises from Jeremy Ethier&amp;#39;s &lt;a href=&quot;https://builtwithscience.com/best-full-body-workout/&quot;&gt;full body
workout&lt;/a&gt;, excepted the &amp;quot;High to Low Cable Flies&amp;quot; — couldn&amp;#39;t fit it in
the schedule and this requires two cables systems, which tend to be fairly busy
machines.&lt;/p&gt;
&lt;p&gt;I effected this change at around the start of March, as you can see from the row
disappearing from the graph above. There is also a correlation with the deadlift
finally taking off.&lt;/p&gt;
&lt;p&gt;To track the new workout, I&amp;#39;m using (in addition to the Stronglifts app) an app
called &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.selahsoft.workoutlog&quot;&gt;Simple Workout Log&lt;/a&gt;. I&amp;#39;m afraid it doesn&amp;#39;t generate a graph for all
exercises, and generating one per exercise would be unwieldy however.&lt;/p&gt;
&lt;p&gt;The workout is more body-building oriented than my previous strictly
power-lifting routine. Except for the barbell row, all the Stronglifts lifts
(the &amp;quot;big lifts&amp;quot;) also appear in the new workout. For them I kept the
Stronglifts progression and the focus on lifting heavy. For the other exercises
however I used Jeremy&amp;#39;s guideline.&lt;/p&gt;
&lt;p&gt;The result was increased volume. I finally look somewhat obviously muscular.
Although a lot of that had to do with nutrition.&lt;/p&gt;
&lt;h1 id=&quot;nutrition--measurements&quot;&gt;Nutrition &amp;amp; Measurements&lt;/h1&gt;
&lt;p&gt;In January, I started actively tracking both my calorie expenditure (with a
&lt;a href=&quot;https://www.fitbit.com/be/charge2&quot;&gt;Fitbit Charge 2&lt;/a&gt; that was actually loaned to me by my colleague Sana for
data-mining purposes) and my calorie expenses (using the &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.myfitnesspal.android&quot;&gt;MyFitnessPal&lt;/a&gt; app,
just like about everybody).&lt;/p&gt;
&lt;p&gt;The goal was to eat more to enable gains. My objective was to try to reach 3200
calories every day, and 3600 up to 4000 on workout days.&lt;/p&gt;
&lt;p&gt;That (later and the workout change outlined above) worked nicely in enabling
some further mass gains.&lt;/p&gt;
&lt;p&gt;I also bought a smart scale, but I&amp;#39;m not that happy with it. It&amp;#39;s accurate on
weight, but the bodyfat percentage given is wildly off: it has me at 13% which
would have me quite ripped — a more accurate scale gives 17%, which is in line
with picture references. Still, it can tell you if you&amp;#39;re trending up or down
and some indication of the magnitude. Here&amp;#39;s &lt;a href=&quot;https://www.amazon.fr/gp/product/B07GWCC412/&quot;&gt;what I bought&lt;/a&gt; so you can avoid
it. The more accurate scale is a big one at the gym. Apparently you have to look
for &amp;quot;dual frequencies&amp;quot; scales, but I couldn&amp;#39;t find any.&lt;/p&gt;
&lt;p&gt;I did get a lot of mileage out of a &lt;a href=&quot;https://www.amazon.fr/gp/product/B07BMNDW7F&quot;&gt;kitchen scale&lt;/a&gt; however, in order to get
more correct inputs into MyFitnessPal.&lt;/p&gt;
&lt;h1 id=&quot;next-up-cutting&quot;&gt;Next Up: Cutting&lt;/h1&gt;
&lt;p&gt;The next step is already underway: I&amp;#39;m going to &amp;quot;cut&amp;quot; to reduce bodyfat and
obtain the sacro-sanct six pack.&lt;/p&gt;
&lt;p&gt;I probably could have gained some more, but now feels like a nice time to try to
achieve this milestone, while I&amp;#39;m finishing my PhD and still have flexibility in
my schedule. It&amp;#39;s always harder to do something on the first go, as there are
things to figure out, and mistakes will necessarily be made.&lt;/p&gt;
&lt;p&gt;I&amp;#39;ve been easing into it for three weeks, and early signs are encouraging.
However, a full discussion will have to wait for later!&lt;/p&gt;
      </description>
      <pubDate>2019-05-11T22:00:00.000Z</pubDate>
      <link>http://norswap.com/weight-training-3</link>
      <guid isPermaLink="true">http://norswap.com/weight-training-3</guid>
    </item>
    <item>
      <title>Getting Youtube Transcripts</title>
      <description>
&lt;p&gt;Here&amp;#39;s a neat trick I just found out about: You can &lt;a href=&quot;https://ccm.net/faq/40644-how-to-get-the-transcript-of-a-youtube-video&quot;&gt;request the transcript&lt;/a&gt; of a
YouTube video that has captions by going to More &amp;gt; Transcript.&lt;/p&gt;
&lt;p&gt;Reading the transcript is often a nice alternative to sitting through a video of
someone talking, even in x2.&lt;/p&gt;
&lt;p&gt;Unfortunately, it&amp;#39;s still impossible to request automatic captionning for videos
where the author didn&amp;#39;t enable it. I wish they&amp;#39;d change that.&lt;/p&gt;
      </description>
      <pubDate>2019-05-11T22:00:00.000Z</pubDate>
      <link>http://norswap.com/youtube-transcripts</link>
      <guid isPermaLink="true">http://norswap.com/youtube-transcripts</guid>
    </item>
    <item>
      <title>Streaming Music From Phone to Computer</title>
      <description>
&lt;p&gt;I keep my full music library (50+ GB of music) synced with the external SD card
on my (Android) phone. Occasionaly, it is handy to stream music to a computer.
Notably, my work laptop only has a 256GB of disk, so streaming lets me save
space, not to mention avoid syncing pains.&lt;/p&gt;
&lt;p&gt;It&amp;#39;s not incredibly obvious how to do this however, even after some quick
googling. Hence this post.&lt;/p&gt;
&lt;h2 id=&quot;the-simple-solution&quot;&gt;The Simple Solution&lt;/h2&gt;
&lt;p&gt;This works well on home wifi networks.&lt;/p&gt;
&lt;p&gt;We&amp;#39;re going to use the DLNA/UPnP protocols to stream from our phone to a computer.&lt;/p&gt;
&lt;p&gt;On my (Android) phone, I use the &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.findhdmusic.app.upnpcast&quot;&gt;Hi-Fi Cast&lt;/a&gt; app. It&amp;#39;s basically a music player
with the ability to stream to media servers (including &lt;a href=&quot;https://en.wikipedia.org/wiki/Chromecast&quot;&gt;Chromecast&lt;/a&gt;, which is
also handy to stream to TVs).&lt;/p&gt;
&lt;p&gt;On the computer, you&amp;#39;ll need to install &lt;a href=&quot;https://kodi.tv/&quot;&gt;Kodi&lt;/a&gt;. Normally, Kodi is used more to
stream from the computer to other devices (typically a Smart TV) but here we
want to stream &lt;strong&gt;to&lt;/strong&gt; Kodi. This is going to take some simple configuration.&lt;/p&gt;
&lt;p&gt;We&amp;#39;re going to follow the instructions from &lt;a href=&quot;https://kodi.wiki/view/UPnP/Client&quot;&gt;here&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;To turn on XBMC&amp;#39;s UPnP client, in Kodi go to Settings -&amp;gt; Services -&amp;gt; UPnP and
enable &amp;quot;Allow control of Kodi via UPnP&amp;quot;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Note you need to be at least in &amp;quot;Standard&amp;quot; configuration mode (not &amp;quot;Basic&amp;quot;) to
do this, and enabling UPnP (on the same page) is a pre-requisite.&lt;/p&gt;
&lt;p&gt;Aside: If you&amp;#39;d like to stream from your computer to your phone &lt;em&gt;while picking what to
play from your phone&lt;/em&gt;, you can enable &amp;quot;Share my libraries&amp;quot; (you need to import
some media into Kodi, otherwise this is useless).&lt;/p&gt;
&lt;p&gt;Now, in Hi-Fi cast go to the menu -&amp;gt; Playback Devices. Your computer should
appear with the name &amp;quot;Kodi (&amp;lt;computer name&amp;gt;)&amp;quot;. Select it and enjoy streaming
to your computer.&lt;/p&gt;
&lt;p&gt;What if it doesn&amp;#39;t work? There might be some OS configuration options to set.
In particular, on Windows, &amp;quot;Control Panel -&amp;gt; Network and Sharing Center -&amp;gt;
Advanced sharing settings -&amp;gt; Media Streaming&amp;quot; might be relevant.&lt;/p&gt;
&lt;p&gt;Another class of issues relate to the network you&amp;#39;re on. If you have control of
the network configuration (i.e. the configuration of your internet router) and
are technically literate, you can try to see if there is anything fishy going on
there.&lt;/p&gt;
&lt;p&gt;I wanted to stream my music not only at home, but also at work, where this naive
setup didn&amp;#39;t work. Making it work there is the object of the next section.&lt;/p&gt;
&lt;h2 id=&quot;streaming-on-restricted-networks&quot;&gt;Streaming on Restricted Networks&lt;/h2&gt;
&lt;p&gt;I wanted to stream my music at work (I work at a University). The simple
solution didn&amp;#39;t work. Obviously, the network had some kind of restriction on
protocols or ports being used.&lt;/p&gt;
&lt;p&gt;After &lt;a href=&quot;https://forum.kodi.tv/showthread.php?tid=341162&quot;&gt;some advanced investigation foo&lt;/a&gt;, I managed to figure out
the problem.&lt;/p&gt;
&lt;p&gt;Basically, the auto-discovery protocol was blocked on the campus network. Which
is quite understanble really — I can imagine some kind of broadcasting is
involved, which isn&amp;#39;t optimal when you&amp;#39;re tight on bandwidth.&lt;/p&gt;
&lt;p&gt;The solution is then to directly input the address of the playback device (the
computer&amp;#39;s IP address + the port on which Kodi listens for incoming streams),
which is supported by Hi-Fi cast (under &amp;quot;Playback Devices&amp;quot;, select the drop-down
(&amp;quot;...&amp;quot;) menu and then &amp;quot;Add UPnP Renderer&amp;quot;).&lt;/p&gt;
&lt;p&gt;But what is this address? That&amp;#39;s where I had to &lt;a href=&quot;https://forum.kodi.tv/showthread.php?tid=341162&quot;&gt;investigate&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Ultimately I ended up scanning my machine (a Mac) for listening ports by running
the command &lt;code&gt;sudo lsof -i -n -P | grep TCP&lt;/code&gt;. This turned out that Kodi was
listening on 1912, 1655, and 9090, with 1655 being the one we are interested in.&lt;/p&gt;
&lt;p&gt;The renderer address to add to Hi-Fi Cast is thus &lt;code&gt;http://&amp;lt;ip&amp;gt;:1655/&lt;/code&gt;. The IP
address should be the local one (on campus we actually have public IPs!).&lt;/p&gt;
&lt;p&gt;You can find your local IP (probably you want IPv4 — something like
&amp;quot;192.168.0.42&amp;quot;) by running &lt;code&gt;ifconfig&lt;/code&gt; on Mac and looking for &amp;quot;en0&amp;quot;. On Windows,
run &lt;code&gt;ipconfig /all&lt;/code&gt; and look for &amp;quot;Local Area Connection&amp;quot;.&lt;/p&gt;
&lt;h2 id=&quot;alternatives&quot;&gt;Alternatives&lt;/h2&gt;
&lt;p&gt;If that doesn&amp;#39;t work, an alternative is to set up some kind of server on your
phone to serve files, and to connect to it with your computer.&lt;/p&gt;
&lt;p&gt;I used the excellent &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.icecoldapps.serversultimate&amp;amp;hl=en&quot;&gt;Servers Ultimate&lt;/a&gt; app for this (it&amp;#39;s a trial and costs 9€
after that — it&amp;#39;s probably possible to fish for alternatives though!).&lt;/p&gt;
&lt;p&gt;Two kind of servers that work are &amp;quot;FTP Server&amp;quot; (not native nor proxy!) and
&amp;quot;WebDAV Server&amp;quot;. I ran them with the default options, on ports 2121 and 8484
(respectively). Of the two, FTP worked on both Windows and Mac while I couldn&amp;#39;t
get WebDAV to work on Windows.&lt;/p&gt;
&lt;p&gt;(In case you&amp;#39;d be tempted to try an SMB server, don&amp;#39;t. Unless your device is
rooted, you can&amp;#39;t select the default port (455) because Android forbids
listening on ports in the 0-1024 range. Windows (and apparently, Linux?) won&amp;#39;t
be able to connect to it. Mac is reported to work, but it didn&amp;#39;t work for me
with Servers Ultimate... It did work with &lt;a href=&quot;https://play.google.com/store/apps/details?id=fr.webrox.landrive&quot;&gt;another app&lt;/a&gt; though, but I still had
issues. I think I had to create user accounts, and the Mac wouldn&amp;#39;t disconnect
the network share, I had to issue a &lt;a href=&quot;https://apple.stackexchange.com/questions/256209/&quot;&gt;&lt;code&gt;umount&lt;/code&gt; command&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;Don&amp;#39;t forget to change the directory you want to share — you probably don&amp;#39;t want
to make your whole phone accessible, esp. if you&amp;#39;re not gonna set a password.&lt;/p&gt;
&lt;p&gt;I wanted to share a directory on my SD card, and for that I had to find its
exact path (which you can do using a disk usage application like &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.mobile_infographics_tools.mydrive&quot;&gt;this
one&lt;/a&gt;). For me the SD card was at &lt;code&gt;/storage/0000-0000&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Once the server is running you can access it by typing its address + port in the
Explorer address bar. e.g. &lt;code&gt;ftp://192.168.0.101:2121/&lt;/code&gt; for FTP. On Mac, in the
Finder you need to do &amp;quot;Go &amp;gt; Connect to Server...&amp;quot; and enter the same thing.&lt;/p&gt;
&lt;p&gt;For WebDav, on Mac you use &lt;code&gt;http&lt;/code&gt; (or &lt;code&gt;https&lt;/code&gt; if you use SSL): e.g.
&lt;code&gt;http://192.168.0.101:8484/&lt;/code&gt;. I couldn&amp;#39;t make it work on Windows, but in theory
you&amp;#39;d type &lt;code&gt;\\192.168.0.101@8484\DavWWWRoot\&lt;/code&gt; (the last part is important and is
a special Windows keyword). If you use SSL, you need to write
&lt;code&gt;\\192.168.0.101@SLL@8484\DavWWWRoot\&lt;/code&gt; instead. &lt;a href=&quot;https://www.webdavsystem.com/server/access/windows/&quot;&gt;More instructions
here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And that&amp;#39;s it — happy listening!&lt;/p&gt;
      </description>
      <pubDate>2019-04-28T22:00:00.000Z</pubDate>
      <link>http://norswap.com/stream-from-phone</link>
      <guid isPermaLink="true">http://norswap.com/stream-from-phone</guid>
    </item>
  </channel>
</rss>
