<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>norswap</title>
    <description></description>      
    <link>http://norswap.com/</link>
    <atom:link href="http://norswap.com/atom.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Programming Sucks</title>
      <description>
&lt;p&gt;Source: &lt;a href=&quot;http://www.stilldrinking.org/programming-sucks&quot;&gt;http://www.stilldrinking.org/programming-sucks&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Every programmer occasionally, when nobody’s home, turns off the lights, pours a
glass of scotch, puts on some light German electronica, and opens up a file on
their computer. It’s a different file for every programmer. Sometimes they wrote
it, sometimes they found it and knew they had to save it. They read over the
lines, and weep at their beauty, then the tears turn bitter as they remember the
rest of the files and the inevitable collapse of all that is good and true in
the world.&lt;/p&gt;
&lt;p&gt;This file is Good Code. It has sensible and consistent names for functions and
variables. It’s concise. It doesn’t do anything obviously stupid. It has never
had to live in the wild, or answer to a sales team. It does exactly one,
mundane, specific thing, and it does it well. It was written by a single person,
and never touched by another. It reads like poetry written by someone over
thirty.&lt;/p&gt;
&lt;p&gt;Every programmer starts out writing some perfect little snowflake like this.
Then they’re told on Friday they need to have six hundred snowflakes written by
Tuesday, so they cheat a bit here and there and maybe copy a few snowflakes and
try to stick them together or they have to ask a coworker to work on one who
melts it and then all the programmers’ snowflakes get dumped together in some
inscrutable shape and somebody leans a Picasso on it because nobody wants to see
the cat urine soaking into all your broken snowflakes melting in the light of
day. Next week, everybody shovels more snow on it to keep the Picasso from
falling over.&lt;/p&gt;
      </description>
      <pubDate>2017-05-09T22:00:00.000Z</pubDate>
      <link>http://norswap.com/programming-sucks</link>
      <guid isPermaLink="true">http://norswap.com/programming-sucks</guid>
    </item>
    <item>
      <title>briefly</title>
      <description>
&lt;p&gt;&lt;img src=&quot;/gurren-lagann-reaction/team-gurren.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;I just watched the anime &lt;a href=&quot;https://myanimelist.net/anime/2001/Tengen_Toppa_Gurren_Lagann&quot;&gt;Tengen Toppa Gurren Lagann&lt;/a&gt;. And: oh. my.&lt;/p&gt;
&lt;p&gt;Admittedly I&amp;#39;m almost exactly 10 years late to the party. But if you are too and
have no prejudice against anime&lt;strong&gt;*&lt;/strong&gt;, do yourself a favour and watch it;
especially if you sometimes struggle with motivation.&lt;/p&gt;
&lt;p&gt;The anime is completely over-the-top, but somehow it all works out beautiful.
It&amp;#39;s an ode to fighting spirit, and the force of will. It&amp;#39;s pure motivation
cranked out to 10. I know it will stay with me a long time.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;*&lt;/strong&gt; Anime is probably one of the most inventive medium currently out there. I
really should write about it sometimes. It was prejudiced against it enough in
my youth that I didn&amp;#39;t explore it. I could say I regret it, but I prefer to
think it&amp;#39;s just more good stuff to feed on now.&lt;/p&gt;
      </description>
      <pubDate>2017-04-10T22:00:00.000Z</pubDate>
      <link>http://norswap.com/gurren-lagann-reaction</link>
      <guid isPermaLink="true">http://norswap.com/gurren-lagann-reaction</guid>
    </item>
    <item>
      <title>briefly</title>
      <description>
&lt;p&gt;&lt;img src=&quot;/reflets-d-acides-fini/rda.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;If you speak French and do not know about it yet, check out &lt;a href=&quot;http://www.refletsdacide.com/presentation/&quot;&gt;Reflets d&amp;#39;Acide&lt;/a&gt;.
It&amp;#39;s an humourous fantasy &amp;quot;mp3 saga&amp;quot; (apparently the proper english term is
&amp;quot;audio drama&amp;quot;). It&amp;#39;s now finally complete (well, the first season) after more
than 10 years in the running.&lt;/p&gt;
&lt;p&gt;It distinguishes itself from other offerings in the same vein by its subtle
humor, layered construction and masterful use of the French language. It even
uses a non-trivial amount of &lt;a href=&quot;https://en.wiktionary.org/wiki/alexandrine#English&quot;&gt;alexandrines&lt;/a&gt; being used. It&amp;#39;s a bombastic love
letter to French, laid out in the least boring way possible: as a delightful
heroic fantasy tale. I still find things in there after listening to it at least
ten times.&lt;/p&gt;
&lt;p&gt;I don&amp;#39;t know about any English-language equivalent. At the very least, they
haven&amp;#39;t had the same kind of impact on geek culture as Reflets d&amp;#39;Acide and other
sagas (&lt;a href=&quot;http://www.penofchaos.com/warham/donjon-resume.htm&quot;&gt;Le Donjon de Naheulbeuk&lt;/a&gt;, &lt;a href=&quot;http://www.knarfworld.net/episodes&quot;&gt;Les Aventuriers du Survivaure&lt;/a&gt;,
&lt;a href=&quot;http://www.adoprixtoxis.com/lite/download/adop_downloads.php&quot;&gt;Adoprixtoxis&lt;/a&gt;) have had in the French-speaking parts.&lt;/p&gt;
&lt;p&gt;The closest thing I can think of is the much more recent &lt;a href=&quot;http://www.pretendwizards.com/&quot;&gt;Pretend Wizards&lt;/a&gt;. Know
any other? Let me know &lt;a href=&quot;/reflets-d-acides-fini/#disqus_thread&quot;&gt;in the comments&lt;/a&gt;.&lt;/p&gt;
      </description>
      <pubDate>2017-04-10T22:00:00.000Z</pubDate>
      <link>http://norswap.com/reflets-d-acides-fini</link>
      <guid isPermaLink="true">http://norswap.com/reflets-d-acides-fini</guid>
    </item>
    <item>
      <title>LaTeX Tooling Guide</title>
      <description>
&lt;p&gt;I&amp;#39;ll let you in on a small secret: I hate LaTeX with a passion. It&amp;#39;s a bloated
mess with crazy syntax. It generates reams of warnings you can never totally get
rid of, and some of the most confusing and/or unhelpeful errors I have ever
seen. It needs to be run N times in a row. It even has a stupid name.&lt;/p&gt;
&lt;p&gt;Don Knuth wrote TeX, and it may have been art. But, to use a fashionable word,
TeX was never meant to scale to LaTeX. Pervasive use of non-hygienic macros and
constant manipulations of global values is a recipe for disaster.&lt;/p&gt;
&lt;p&gt;I wish I could avoid LaTeX completely, unfortuately conferences have templates
and the only other format available is MS Word, which has its own flaws (as I
recall, in how it handles numbering and floating figures).&lt;/p&gt;
&lt;p&gt;Anyhow, the current article is about how I setup my Latex to alleviate some of
these pains. I&amp;#39;ll start with a tour of what I use, then give you &lt;a href=&quot;https://github.com/norswap/template-sigplan/blob/master/makefile&quot;&gt;a makefile&lt;/a&gt;
and an &lt;a href=&quot;https://github.com/norswap/template-sigplan&quot;&gt;example git repository&lt;/a&gt; to bring all these tools together.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;installing-and-updating&quot;&gt;Installing and Updating&lt;/h2&gt;
&lt;p&gt;See &lt;a href=&quot;https://www.sharelatex.com/learn/Choosing_a_LaTeX_Compiler&quot;&gt;this article&lt;/a&gt; about available Latex distributions. I
recommend sticking to the tried-and-true, so that would be MiKTeX for Windows,
MacTeX for OSX and TeX Live for Linux.&lt;/p&gt;
&lt;p&gt;If you already have a Latex distribution installed, but it is not up to date,
this fantastic &lt;a href=&quot;https://tex.stackexchange.com/questions/55437/how-do-i-update-my-tex-distribution&quot;&gt;TeX Stack Exchange answer&lt;/a&gt; will tell you how to
update it.&lt;/p&gt;
&lt;h2 id=&quot;editors&quot;&gt;Editors&lt;/h2&gt;
&lt;p&gt;Most people will use some kind of Latex-mode that comes with their editor of
choice. I edit text in Emacs, and so I use &lt;a href=&quot;https://www.gnu.org/software/auctex/&quot;&gt;Auctex&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Nevertheless, it might be nicer to have something closer to an IDE for Latex. My
option of choice here is &lt;a href=&quot;http://www.texstudio.org/&quot;&gt;TeXstudio&lt;/a&gt;. Even though most of my Latex editing is in
Auctex, I use it from time to time to typeset math or help with diagnostics.&lt;/p&gt;
&lt;p&gt;Finally, but perhaps most importantly, there are a few online Latex editors. The
best of them is &lt;a href=&quot;https://www.sharelatex.com/&quot;&gt;ShareLaTeX&lt;/a&gt;. Its great strength is that it saves you from doing
any kind of setup, and in my own experience is super reliable.&lt;/p&gt;
&lt;p&gt;ShareLatex also filters out unhelpful warning and errors and does its best to
correlated what is left with your source file. Later in this guide we will show
command line tools that do the same thing.&lt;/p&gt;
&lt;p&gt;It&amp;#39;s good enough as an editor, but also allows realtime collaboration on a
document. Best of all, it now has the ability to sync with GitHub, meaning you
can mix online and offline collaboration.&lt;/p&gt;
&lt;h2 id=&quot;building&quot;&gt;Building&lt;/h2&gt;
&lt;p&gt;One of the famous annoyances of Latex is that it needs to be run multiple times
to get references right, interleaved with runs of your bibliography tool
(usually BibTeX or Biber).&lt;/p&gt;
&lt;p&gt;Fortunately this whole process can be automated. Most Latex distribution come
with a tool called &lt;code&gt;latexmk&lt;/code&gt;, which does automates all these invocations for
you.&lt;/p&gt;
&lt;p&gt;Beware that &lt;code&gt;latexmk&lt;/code&gt; requires Perl to run, which is not bundled with Latex.
This tends to be a caveat on Windows. If you are running Windows and want to use
&lt;code&gt;latexmk&lt;/code&gt;, install &lt;a href=&quot;http://strawberryperl.com/&quot;&gt;Strawberry Perl&lt;/a&gt; to fix the problem.&lt;/p&gt;
&lt;p&gt;There is a better tool, though, which is called &lt;a href=&quot;https://github.com/aclements/latexrun&quot;&gt;latexrun&lt;/a&gt;. &lt;code&gt;latexrun&lt;/code&gt; does what
&lt;code&gt;latexmk&lt;/code&gt; does, but also sanitizes Latex&amp;#39;s output to only show helpful errors,
similar to what you would see on ShareLatex.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;latexrun&lt;/code&gt; is a single Python3 script, which is great for portability. You can
even drop it directly in your paper&amp;#39;s git repository.&lt;/p&gt;
&lt;h2 id=&quot;errors&quot;&gt;Errors&lt;/h2&gt;
&lt;p&gt;If you&amp;#39;re using ShareLatex or &lt;code&gt;latexrun&lt;/code&gt;, you&amp;#39;re already pretty well covered
here.&lt;/p&gt;
&lt;p&gt;There is one more tool that bears mentioning: &lt;a href=&quot;https://github.com/dmwit/pulp&quot;&gt;pulp&lt;/a&gt;. &lt;code&gt;pulp&lt;/code&gt; lets you filter out
unwanted warnings and errors, and tries to correlated errors with file
positions.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pulp&lt;/code&gt;&amp;#39;s output is less pretty than that of &lt;code&gt;latexrun&lt;/code&gt;, but its great strength
is that it lets define custom filtering rules, to remove those annoying warnings
that you cannot get rid of, but break nothing. Or, more frequently, comes from
the class file that you are forced to use to submit you paper (I&amp;#39;m looking at
you, ACM).&lt;/p&gt;
&lt;p&gt;Here&amp;#39;s an exemple of filtering spec to get rid of all errors that pop up when
compiling the &lt;a href=&quot;http://www.sigplan.org/Resources/Author/&quot;&gt;acmart&lt;/a&gt; example file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;!(boring | info | message | under | over
| p &amp;quot;hyperref&amp;quot; &amp;amp; &amp;quot;Token not allowed in a PDF string&amp;quot;
| &amp;quot;Class acmart Info&amp;quot;
| &amp;quot;file:line:error style messages enabled&amp;quot;
| &amp;quot;Excluding.*comment&amp;quot;
| &amp;quot;Processing.*comment&amp;quot;
| &amp;quot;Include comment&amp;quot;
| &amp;quot;comment.cut&amp;quot;
| &amp;quot;(msharpe)&amp;quot;
| &amp;quot;]&amp;quot; &amp;amp;&amp;amp; !&amp;quot;..&amp;quot;
)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The first line matches &lt;code&gt;pulp&lt;/code&gt;&amp;#39;s default specification.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pulp&lt;/code&gt; can be integrated with &lt;code&gt;latexmk&lt;/code&gt; fairly easily, by means of a
configuration file.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pulp&lt;/code&gt; is not as friendly to install as the other tools. Here is how to install
on OSX, assuming you already have &lt;a href=&quot;https://brew.sh/&quot;&gt;homebrew&lt;/a&gt; (on other platforms, you just need
to install the Haskell platform in some other way):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;brew cask install haskell-platform
git clone https://github.com/dmwit/pulp.git
cabal update
cabal install
PATH=&amp;quot;$HOME/Library/Haskell/bin:$PATH&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;preview&quot;&gt;Preview&lt;/h2&gt;
&lt;p&gt;Unless you&amp;#39;re working with TeXstudio or ShareLatex, you&amp;#39;ll need to preview the
generated PDF files using a PDF viewer. You want to use one that picks up
changes to the PDF on the disk, and reloads it on the fly, while keeping your
position in the PDF. On OSX, the built-in viewer (confusingly named &lt;em&gt;Preview&lt;/em&gt;)
does this adequately. On Windows, I&amp;#39;m partial to &lt;a href=&quot;https://www.sumatrapdfreader.org/free-pdf-reader.html&quot;&gt;Sumatra PDF&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;latexmk&lt;/code&gt; and &lt;code&gt;latexrun&lt;/code&gt; will automatically open a generated PDF file (using the
OS-determined associated tool).&lt;/p&gt;
&lt;h2 id=&quot;all-together&quot;&gt;All Together&lt;/h2&gt;
&lt;p&gt;I&amp;#39;ve put together &lt;a href=&quot;https://github.com/norswap/template-sigplan&quot;&gt;a repository&lt;/a&gt; that serves as template for papers using
the &lt;a href=&quot;http://www.sigplan.org/Resources/Author/&quot;&gt;ascmart sigplan&lt;/a&gt; style.&lt;/p&gt;
&lt;p&gt;The tooling centers around &lt;a href=&quot;https://github.com/norswap/template-sigplan/blob/master/makefile&quot;&gt;a makefile&lt;/a&gt;. The default configuration is to use
&lt;code&gt;latexmk&lt;/code&gt; with pulp integration. The following commands are available:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;make&lt;/code&gt; / &lt;code&gt;make view&lt;/code&gt;: generates the PDF file and displays it&lt;/li&gt;
&lt;li&gt;&lt;code&gt;make pdf&lt;/code&gt;: generates the PDF file but does not display it; latex is run silently&lt;/li&gt;
&lt;li&gt;&lt;code&gt;make verbose&lt;/code&gt;: like &lt;code&gt;make pdf&lt;/code&gt;, but shows error details&lt;/li&gt;
&lt;li&gt;&lt;code&gt;make rebuild&lt;/code&gt;: forces a rebuild of the pdf, even if no changes are picked up&lt;/li&gt;
&lt;li&gt;&lt;code&gt;make clean&lt;/code&gt;: removes all temporary files (for all tools!)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;make mrproper&lt;/code&gt;: like &lt;code&gt;make clean&lt;/code&gt;, but also removes the generated PDF&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you don&amp;#39;t have &lt;code&gt;pulp&lt;/code&gt;, just delete or rename the &lt;code&gt;.latexmkrc&lt;/code&gt; file from the
repo.&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;latexmk&lt;/code&gt; is not found or doesn&amp;#39;t work (for instance if Perl is not
installed), the makefile will fall back to using plain make rules, and &lt;code&gt;make
pdf&lt;/code&gt; will be verbose by default.&lt;/p&gt;
&lt;p&gt;It is also possible to use &lt;code&gt;latexrun&lt;/code&gt;, which is bundled in the repository, by
running &lt;code&gt;make run&lt;/code&gt; (Python3 required).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pulp&lt;/code&gt; can be run standalone with &lt;code&gt;make pulp&lt;/code&gt; (pulp is not bundled in the
repository), assuming a compilation was attempted earlier and the &lt;code&gt;.log&lt;/code&gt; file is
left uncleaned.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DISCLAIMER&lt;/strong&gt;: I won&amp;#39;t be too assiduous in maintaining this makefile, and it
may even contain a few bugs. It should be taken as an example of how to do
things, rather than as a toolchain to be relied on.&lt;/p&gt;
&lt;p&gt;With all this, you&amp;#39;ll have no Latex excuses for turning your next paper late :)&lt;/p&gt;
      </description>
      <pubDate>2017-03-28T22:00:00.000Z</pubDate>
      <link>http://norswap.com/latex-tooling</link>
      <guid isPermaLink="true">http://norswap.com/latex-tooling</guid>
    </item>
    <item>
      <title>The Most Useful Kotlin Function</title>
      <description>
&lt;p&gt;Two years ago, I wrote a posted called &lt;a href=&quot;/java_caster&quot;&gt;The Most Useful Java Function&lt;/a&gt;.
This was rather tongue-in-cheek, as the function in question lets you cast from
a type to another, inferring the target type and suppressing unchecked cast
exceptions.&lt;/p&gt;
&lt;p&gt;Nevertheless, it is useful remarkably often.&lt;/p&gt;
&lt;p&gt;With Kotlin however, you can step up your game to a whole new level.
Introducing &lt;code&gt;proclaim&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-kotlin&quot;&gt;val list: Collection&amp;lt;Int&amp;gt; = ArrayList(list(1, 2, 3))
proclaim(list as ArrayList&amp;lt;Int&amp;gt;)
val x = list[0] // works
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The trick here is actually not &lt;code&gt;proclaim&lt;/code&gt;. It&amp;#39;s the fact that Kotlin has &amp;quot;smart
casts&amp;quot; which are essentially a form of flow typing.&lt;/p&gt;
&lt;p&gt;The type inferencer reasons out that if the cast &lt;code&gt;list as ArrayList&amp;lt;Int&amp;gt;&lt;/code&gt;
succeeds, then it means that &lt;code&gt;list&lt;/code&gt; is indeed an &lt;code&gt;ArrayList&amp;lt;Int&amp;gt;&lt;/code&gt;. And since
&lt;code&gt;list&lt;/code&gt; is a &lt;code&gt;val&lt;/code&gt;, its value can&amp;#39;t change. So in the rest of the body where the
cast appears, list is &amp;quot;smart-casted&amp;quot; to &lt;code&gt;ArrayList&amp;lt;Int&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here is a possible definition for &lt;code&gt;proclaim&lt;/code&gt; (0 run-time overhead besides the
cast):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-kotlin&quot;&gt;@Suppress(&amp;quot;UNUSED_PARAMETER&amp;quot;, &amp;quot;NOTHING_TO_INLINE&amp;quot;)
inline fun proclaim (cast: Any)
    = Unit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;#39;s get the obvious out of the way: of course this can be misused.&lt;/p&gt;
&lt;p&gt;On the other hand, just like the casting function, it is handy surprisingly
often. Type systems just aren&amp;#39;t powerful enough to be able to figure some things
we know to be true in our code. Especially that of Java and Kotlin.&lt;/p&gt;
&lt;p&gt;I&amp;#39;m not giving any examples: by their nature they would be short and easily
rewritten to accomodate the type system. But if you genuinely want to know, you
can search the net for &amp;quot;(path-)dependent types&amp;quot; use case or examples. Keep in
mind that&amp;#39;s just a subset of what we can&amp;#39;t express in Java/Kotlin though.&lt;/p&gt;
      </description>
      <pubDate>2017-03-19T23:00:00.000Z</pubDate>
      <link>http://norswap.com/kotlin-proclaim</link>
      <guid isPermaLink="true">http://norswap.com/kotlin-proclaim</guid>
    </item>
    <item>
      <title>Thread-Local Properties in Kotlin</title>
      <description>
&lt;p&gt;The &lt;a href=&quot;https://kotlinlang.org/&quot;&gt;Kotlin&lt;/a&gt; language has a feature called &lt;a href=&quot;https://kotlinlang.org/docs/reference/delegated-properties.html&quot;&gt;Delegated Properties&lt;/a&gt;. It basically
lets you delegate a getter (and optionally a setter) to an object that
implements the &lt;code&gt;getValue&lt;/code&gt; (and optionally the &lt;code&gt;setValue&lt;/code&gt;) method.&lt;/p&gt;
&lt;p&gt;I haven&amp;#39;t had much use of the feature, but I just found something very nifty
that could be done with it: create thread-local properties.&lt;/p&gt;
&lt;p&gt;Here&amp;#39;s an example of what you can do:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-kotlin&quot;&gt;import norswap.utils.thread_local.*

class Test
{
    val _i = ThreadLocal.withInitial { 0 }
    val i by _i

    val j by thread_local(0)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This creates two counters, &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;j&lt;/code&gt; that are backed by instances of
&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/ThreadLocal.html&quot;&gt;&lt;code&gt;ThreadLocal&amp;lt;Int&amp;gt;&lt;/code&gt;&lt;/a&gt;. In the first case we specify the instance explicitly,
while in the second case the &lt;code&gt;ThreadLocal&lt;/code&gt; instance is created implicitly, given
a default value (0 here).&lt;/p&gt;
&lt;p&gt;And now for the implementation:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-kotlin&quot;&gt;package norswap.utils.thread_local
import kotlin.properties.ReadWriteProperty
import kotlin.reflect.KProperty

class ThreadLocalDelegate&amp;lt;T&amp;gt; (val local: ThreadLocal&amp;lt;T&amp;gt;)
: ReadWriteProperty&amp;lt;Any, T&amp;gt;
{
    companion object {
        fun &amp;lt;T&amp;gt; late_init ()
            = ThreadLocalDelegate&amp;lt;T&amp;gt;(ThreadLocal())
    }

    constructor (initial: T):
        this(ThreadLocal.withInitial { initial })

    constructor (initial: () -&amp;gt; T):
        this(ThreadLocal.withInitial(initial))

    override fun getValue
            (thisRef: Any, property: KProperty&amp;lt;*&amp;gt;): T
        = local.get()

    override fun setValue
            (thisRef: Any, property: KProperty&amp;lt;*&amp;gt;, value: T)
        = local.set(value)
}

typealias thread_local&amp;lt;T&amp;gt; = ThreadLocalDelegate&amp;lt;T&amp;gt;

operator fun &amp;lt;T&amp;gt; ThreadLocal&amp;lt;T&amp;gt;.provideDelegate
        (self: Any, prop: KProperty&amp;lt;*&amp;gt;)
    = ThreadLocalDelegate(this)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;#39;s do a quick rundown. The &lt;code&gt;ThreadLocalDelegate&lt;/code&gt; class does what it says on
the tin: it delegates all attempts to read or write the property to the
&lt;code&gt;ThreadLocal&lt;/code&gt; instance.&lt;/p&gt;
&lt;p&gt;What is more interesting is the different ways you can instantiate the delegate:
you can pass it a &lt;code&gt;ThreadLocal&lt;/code&gt; instance (primary constructor), an initial
value, or a function that computes the initial value. The companion object also
has a function &lt;code&gt;late_init()&lt;/code&gt; that lets you create a delegate with no initial
value.&lt;/p&gt;
&lt;p&gt;Now we could use &lt;code&gt;ThreadLocalDelegate&lt;/code&gt; like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-kotlin&quot;&gt;val num by ThreadLocalDelegate(0)
val str by ThreadLocalDelegate&amp;lt;String&amp;gt;.late_init()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But that&amp;#39;s quite a mouthful, so there is a typealias &lt;code&gt;thread_local&lt;/code&gt; to make
things look nicer.&lt;/p&gt;
&lt;p&gt;Finally, the &lt;code&gt;provideDelegate&lt;/code&gt; operator function tells Kotlin how to create a
delegate from a &lt;code&gt;ThreadLocal&lt;/code&gt; instance. That&amp;#39;s how we could do &lt;code&gt;val i by _i&lt;/code&gt; at
the top of the post.&lt;/p&gt;
&lt;p&gt;Aaand that&amp;#39;s pretty much it for today :)&lt;/p&gt;
      </description>
      <pubDate>2017-03-18T23:00:00.000Z</pubDate>
      <link>http://norswap.com/kotlin-threadlocal-properties</link>
      <guid isPermaLink="true">http://norswap.com/kotlin-threadlocal-properties</guid>
    </item>
    <item>
      <title>Prolog Served DRY</title>
      <description>
&lt;p&gt;I believe there should be more programming books targetted at experienced
programmers. In particular, it seems like most books about programming
languages go to great lengths to be accessible to beginners.&lt;/p&gt;
&lt;p&gt;But this is actually detrimental to the experience of the experienced
programmer, who either wants to get up and running with the language as fast as
possible, or to understand what makes the language tick.&lt;/p&gt;
&lt;p&gt;Most of the time, I&amp;#39;m firmly in the second category: I want the mental models
and implentation details underlying the language. Those are of paramount
importance to reach proficiency with the language, yet they are rarely taught
explicitly.&lt;/p&gt;
&lt;p&gt;At the start of this year, I actually was in a position to do something about
this, as I needed to design the lab sessions for our Programming Language
Paradigms course. While the (master) students are not exactly &lt;em&gt;experienced&lt;/em&gt; in
the traditional sense, they already have at least 3 languages under their belts
and are quite capable of handling what we throw at them.&lt;/p&gt;
&lt;p&gt;The first language we cover is Prolog. There are three lab sessions on the topic
and I have now made them available &lt;a href=&quot;https://github.com/norswap/prolog-dry&quot;&gt;on Github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you&amp;#39;re interested in Prolog, give them a spin. You might find them
interesting, maybe not all that easy, and – I hope – enlightening.&lt;/p&gt;
      </description>
      <pubDate>2017-03-13T23:00:00.000Z</pubDate>
      <link>http://norswap.com/prolog-served-dry</link>
      <guid isPermaLink="true">http://norswap.com/prolog-served-dry</guid>
    </item>
    <item>
      <title>Patterns of Software: Highlights</title>
      <description>
&lt;p&gt;Last month, I finished reading the book Patterns of Software by Richard Gabriel
(available for free &lt;a href=&quot;https://www.dreamsongs.com/Files/PatternsOfSoftware.pdf&quot;&gt;here [pdf]&lt;/a&gt;). It&amp;#39;s a very interesting read, and I
recommend it to everyone who cares about the craft of writing software.&lt;/p&gt;
&lt;p&gt;I didn&amp;#39;t really know what to expect going into the book. The first part explains
architect Scott Alexanders&amp;#39; vision of patterns and pattern languages, and makes
a parallel with programming. It&amp;#39;s miles away from the &lt;a href=&quot;https://en.wikipedia.org/wiki/Design_Patterns&quot;&gt;gang of four&lt;/a&gt;, which is
just as well. The second part speaks about Gabriel&amp;#39;s own personal experiences. I
didn&amp;#39;t expect that, but it was nevertheless captivating. The book ends with an
expanded version of Gabriel&amp;#39;s &lt;a href=&quot;https://www.dreamsongs.com/RiseOfWorseIsBetter.html&quot;&gt;Worse is Better&lt;/a&gt; thesis.&lt;/p&gt;
&lt;p&gt;Below, I highlight some of my take-aways from the book. Most of the excerpts
come from the first part of the book and from the final chapter.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;reuse-vs-compression&quot;&gt;Reuse vs Compression&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Object-orientation promotes reuse through inheritance, but that is most
properly called compression: the logic is not encapsulated but interspersed.
It&amp;#39;s still there, but now it&amp;#39;s implicit. True reuse would be using library
functions. Compression is easier than true reuse because you don&amp;#39;t have to
think the interface as carefully.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!------&gt;
&lt;blockquote&gt;
&lt;p&gt;Compression is the characteristic of a piece of text that the meaning of any
part of it is “larger” than that particular piece has by itself. This
characteristic is created by a rich context, with each part of the text
drawing on that context—each word draws part of its meaning from its
surroundings.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!------&gt;
&lt;blockquote&gt;
&lt;p&gt;Such webs are examples of compression: The meaning of an expression written in
the context of the web is determined by the contents of the entire web. If you
need to change another part of the web, your compressed expression might
change its meaning, what it does, or even whether it works at all. So when we
build our tight inheritance hierarchy in object-oriented fashion—weblike or
pyramid style — we might be falling into this trap.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h3 id=&quot;habitability-and-piecemeal-growth&quot;&gt;Habitability and Piecemeal Growth&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;It&amp;#39;s more important for code to be habitable than clear or beautiful.
Habitable means it can be extended easily and that new people can get to run
with the code easily. Perfect clarity is intimidating: it&amp;#39;s hard to improve.
If everything is interlocked too tightly, with no overhang on which to hang
extension, the program will be hard to extend, even though it is arguably
perfect. Abstraction is over-valued because a completed program full of the
right abstractions is beautiful. But most programs are by definition never
completed.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!------&gt;
&lt;blockquote&gt;
&lt;p&gt;Habitability is the characteristic of source code that enables programmers,
coders, bug-fixers, and people coming to the code later in its life to
understand its construction and intentions, and to change it comfortably and
confidently.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!------&gt;
&lt;blockquote&gt;
&lt;p&gt;Piecemeal growth is the process of design and implementation in which software
is embellished, modified, reduced, enlarged, and improved through a process of
repair rather than of replacement.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h3 id=&quot;pattern-languages&quot;&gt;Pattern Languages&lt;/h3&gt;
&lt;p&gt;According to Gabriel, pattern languages failed in (brick and mortar)
architecture because in addition to having the right process, you have to be an
artist, to manipulate the language artistically.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;symmetries&quot;&gt;Symmetries&lt;/h3&gt;
&lt;p&gt;The book discusses symmetries in the context of rug-weaving, but it think the
notion can apply to software as well. Code with local symmetry is easier to
read. Repeating patterns are pleasant, and many instantiation of the same
principles can make a codebase more familiar.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;language-design-adoption&quot;&gt;Language Design &amp;amp; Adoption&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Aesthetic principles and design goals don’t excite me, because often they have
nothing to do with how people really program (habitability and piecemeal
growth) but more often reflecting mathematical or abstract considerations and
look-Ma-no-hands single-mechanism trickery. One cannot deny, however, that a
small set of principles and goals applied to designing a small language
usually results in a consistent concise language.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!------&gt;
&lt;blockquote&gt;
&lt;p&gt;Languages are accepted and evolve by a social process, not a technical or technological one.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A language is minimally acceptable if it solves a new problem or make certain
tasks easier.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Early adopters are trying to hit a home run with new technology to make the
career moves or corporate improvements they crave.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h3 id=&quot;productivity-impact&quot;&gt;Productivity &amp;amp; Impact&lt;/h3&gt;
&lt;p&gt;Gabriel recount the story of the Borland Quattro Pro for Windows, who was
tremendously productive.&lt;/p&gt;
&lt;p&gt;One of the most peculiar things this team did was having multi-hours meeting
each day to gvie overview of changes and define the interfaces.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A manager should be like the sweeper in curling: The sweeper runs ahead of the
stone and sweeps away debris from the path of the stone so that the progress
of the stone will be smooth and undisturbed.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!------&gt;
&lt;blockquote&gt;
&lt;p&gt;An isolated good success can be better than a string of mediocre successes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h3 id=&quot;poetry&quot;&gt;Poetry&lt;/h3&gt;
&lt;p&gt;Reading poetry is a good way to appreciate good fiction writing, and to become
better at writing in general.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;First, modern and contemporary poetry is about compression: Say as much in as
few words as possible. Poets avoid adjectives, adverbs, gerunds, and
complicated clausal structure. Their goal is to get the point across as fast
as they can, with the fewest words, and generally with the constraint of
maintaining an easily spoken verbal rhythm.&lt;/p&gt;
&lt;p&gt;Second, poets say old things in new ways. When you read good poetry, you will
be amazed at the insights you get by seeing a compressed expression presenting
a new way of looking at things.&lt;/p&gt;
&lt;p&gt;Third, poets love language and write sentences in ways you could never
imagine. I don’t mean that their sentences are absurd or unusual—rather, the
sentences demonstrate the poet’s keen interest in minimally stating a complex
image or point.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h3 id=&quot;software-development-models&quot;&gt;Software Development Models&lt;/h3&gt;
&lt;p&gt;Richard Gabriel is well known for his famous essay on &lt;a href=&quot;https://www.dreamsongs.com/RiseOfWorseIsBetter.html&quot;&gt;Worse is Better&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;Worse is Better&lt;/em&gt; model is explained in the book, but Gabriel expands on how
the model is highly market-efficient.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It takes less development time, so it is out early and can be adopted as the
de facto standard in a new market area.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!------&gt;
&lt;blockquote&gt;
&lt;p&gt;If it has some value, it will be ported or adopted and will tend to spread
like a virus. If it has value and becomes popular, there will be pressure to
improve it, and over time it will acquire the quality and feature-richness of
systems designed another way, but with the added advantage that the features
will be those the customers or users want, not those that the developers think
they should want.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!------&gt;
&lt;blockquote&gt;
&lt;p&gt;Worse-is-better takes advantage of the natural advantages of incremental
development. Incremental improvement satisfies some human needs. When
something is an incremental change over something else already learned,
learning the new thing is easier and therefore more likely to be adopted than
is something with a lot of changes. To some it might seem that there is value
to users in adding lots of features, but there is, in fact, more value in
adding a simple, small piece of technology with evolvable value.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!------&gt;
&lt;blockquote&gt;
&lt;p&gt;One of the key characteristics of the mainstream customer is conservatism.
Such a customer does not want to take risks; he (let’s say) doesn’t want to
debug your product; he doesn’t want to hit a home run so he can move up the
corporate ladder. Rather, he wants known, predictable improvement over what he
is doing today with his own practices and products. He wants to talk to other
folks like himself and hear a good story. He doesn’t want to hear how someone
bet it all and won; he wants to hear how someone bought the product expecting
10% improvement and got 11%. This customer is not interested in standing out
from the crowd, particularly because of a terrible error in his organization
based on a bad buying decision.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!------&gt;
&lt;blockquote&gt;
&lt;p&gt;The ideal of the free market supports this kind of growth. If you decide to
spend a lot of resources developing a radical innovation product, you may be
throwing away development money. Why bet millions of dollars all at once on
something that could flop when you can spend a fraction, test the ideas,
improve the ideas based on customer feedback, and spend the remainder of money
on the winning evolution of the technology? If you win, you will win more,
and, if you lose, you will lose less. Moreover, you will be out there ahead of
competition which is happily making the right-thing mistake.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!------&gt;
&lt;blockquote&gt;
&lt;p&gt;When you put out small incremental releases, you can do it more frequently
than you can with large releases, and you can charge money for each of those
releases. With careful planning you can charge more for a set of improvements
released incrementally than the market would have borne had you released them
all at once, taking a risk on their acceptance to boot. Moreover, when you
release many small improvements, you have less risk of having a recall, and
managing the release process also is easier and cheaper. With incremental
improvement, the lifetime of an idea can be stretched out, and so you don’t
have to keep coming up with new ideas. Besides, who wants to base one’s
economic success on the ability to come up with new ideas all the time?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Sounds familiar?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The ideal situation is that your proprietary value is small compared with the
total size of your product, which perhaps can be constructed from standard
parts by either you or your customers or partners.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!------&gt;
&lt;blockquote&gt;
&lt;p&gt;Wade’s Maxim: No one ever made money by typing.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!------&gt;
&lt;blockquote&gt;
&lt;p&gt;What this means in our context is that you cannot try to build too large and
complex product by yourself—you need to get parts from other places if your
product is complex, and you must make your value clear and apparent, and it
must be a simple decision for a customer to use your technology.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h3 id=&quot;epilogue&quot;&gt;Epilogue&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;In software engineering—if there really be such a thing—we have worked
thoroughly on Firmness, some during the last 10 years on Commodity, and none
on Delight.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Clearly that has changed some. But have we gone far enough?&lt;/p&gt;
      </description>
      <pubDate>2017-03-12T23:00:00.000Z</pubDate>
      <link>http://norswap.com/patterns-of-software</link>
      <guid isPermaLink="true">http://norswap.com/patterns-of-software</guid>
    </item>
    <item>
      <title>Ruby&#39;s Lookups &amp; Scopes</title>
      <description>
&lt;p&gt;This is the third and last article in the &lt;a href=&quot;/ruby-dark-corners&quot;&gt;Ruby&amp;#39;s Dark Corners&lt;/a&gt; series.&lt;/p&gt;
&lt;h2 id=&quot;lookups-in-ruby&quot;&gt;Lookups in Ruby&lt;/h2&gt;
&lt;p&gt;The great difficulty in Ruby is knowing what names refer
to. &lt;a href=&quot;/ruby-module-linearization&quot;&gt;Linearization&lt;/a&gt; showed us that knowing which method gets
called is non-trivial. Unfortunately it&amp;#39;s only part of the story.&lt;/p&gt;
&lt;p&gt;In Ruby, names can refer to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;methods: &lt;code&gt;x.name&lt;/code&gt; or &lt;code&gt;name&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;local variables: &lt;code&gt;name&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;class variables: &lt;code&gt;@@name&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;global variables: &lt;code&gt;$name&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;constants: &lt;code&gt;NAME&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;modules: &lt;code&gt;Name&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We also would like to know on which module methods are defined. By the way,
since &lt;code&gt;Class &amp;lt; Module&lt;/code&gt;, when we say &lt;em&gt;modules&lt;/em&gt; we mean &lt;em&gt;modules and classes&lt;/em&gt;,
unless otherwise specified.&lt;/p&gt;
&lt;p&gt;There are five big concepts involved with these lookups (and then some fun
sprinkled on top):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;self&lt;/strong&gt;: what does &lt;code&gt;self&lt;/code&gt; refer to?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;definee&lt;/strong&gt;: if a method definition appears, on which class is it defined?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;scoping&lt;/strong&gt;: knowing which constructs create new scope for local variables and
which don&amp;#39;t&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;nesting&lt;/strong&gt;: what are the surrounding modules? (often called &lt;em&gt;cref&lt;/em&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let&amp;#39;s look at how each type of name is resolved.&lt;/p&gt;
&lt;h2 id=&quot;local-global-variables&quot;&gt;Local &amp;amp; Global Variables&lt;/h2&gt;
&lt;p&gt;Global variables are prefixed with &lt;code&gt;$&lt;/code&gt; and they are easy: they are accessible
everywhere.&lt;/p&gt;
&lt;p&gt;Local variables depend on static scopes. New scopes are create when you enter a
new method or module body, or when you enter a method call&amp;#39;s block. Control flow
statements do not create scopes!&lt;/p&gt;
&lt;p&gt;Only scopes created by blocks inherit their parent&amp;#39;s scope. Scope created by
methods and modules are completely isolated from their parent&amp;#39;s scope. It is
sometimes said that &lt;code&gt;module&lt;/code&gt;, &lt;code&gt;class&lt;/code&gt; and &lt;code&gt;def&lt;/code&gt; are &lt;em&gt;scope gates&lt;/em&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-ruby&quot;&gt;x = 1
module Foo
  p x # NameError
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There is however a trick you can use:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-ruby&quot;&gt;x = 1
Foo = Module.new do
  p x # ok
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It is possible to make local variables survive their lexical scope:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-ruby&quot;&gt;def foo
  x = 0
  [lambda { x += 1 }, lambda { p x }]
end
x, y = foo
x.call()
y.call() # 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Something else that is peculiar: a variable is &amp;quot;in scope&amp;quot; in an assignment to it
has appeared before in the current scope.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-ruby&quot;&gt;p x # NameError
x = 1
# but
x = 1 if false
p x # nil
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Reflection can help with local variables too: the &lt;code&gt;binding&lt;/code&gt; method (both
&lt;code&gt;Kernel#binding&lt;/code&gt; and &lt;code&gt;Proc#binding&lt;/code&gt;) returns a &lt;code&gt;Binding&lt;/code&gt; object which describes
the local variables in scope.&lt;/p&gt;
&lt;h2 id=&quot;instance-variables&quot;&gt;Instance Variables&lt;/h2&gt;
&lt;p&gt;Instance variables are prefixed by &lt;code&gt;@&lt;/code&gt;. They are &lt;strong&gt;always&lt;/strong&gt; looked up on &lt;code&gt;self&lt;/code&gt;.
If an instance variable doesn&amp;#39;t exists (it has never been assigned), it
evaluates to &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Note that this means that instance variables are effectively instance-private:
an instance of &lt;code&gt;X&lt;/code&gt; cannot access the instance variables of another instance of
&lt;code&gt;X&lt;/code&gt;. This is more restrictive than &lt;code&gt;private&lt;/code&gt; in Java for instance. However, it&amp;#39;s
easy to use reflection to side-step this with
&lt;code&gt;Object#instance_variable_get/set&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;class-variables&quot;&gt;Class Variables&lt;/h2&gt;
&lt;p&gt;Class variables are prefixed with &lt;code&gt;@@&lt;/code&gt;. They are defined on modules, and can be
accessed both in module bodies and in method bodies. Strangely, they can also be
accessed in the meta-class of a module (and its meta-meta-class, etc).&lt;/p&gt;
&lt;p&gt;If a module inherits multiple version of a class variable, it&amp;#39;s always the first
inherited version that wins (so the first &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;include&lt;/code&gt; or &lt;code&gt;preprend&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;You can list the class variables &amp;quot;owned&amp;quot; by a module with
&lt;code&gt;Module#class_variables(false)&lt;/code&gt; (&lt;code&gt;false&lt;/code&gt; says not to include class inherited
class variables). Interestingly, class variables can &amp;quot;migrate&amp;quot;: if the module is
a class that has a class variable &lt;code&gt;@@a&lt;/code&gt;, and that &lt;code&gt;@@a&lt;/code&gt; becomes defined on one
of its ancestor, the class variable will disappear from the class. This will not
happen for non-class modules however.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-ruby&quot;&gt;class T; @@a = &amp;#39;t&amp;#39;; end
class Object; @@a = &amp;#39;o&amp;#39;; end
class T
  p @@a # o
  p class_variables(false) # []
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If a class variable is accessed before it has been assigned, a &lt;code&gt;NameError&lt;/code&gt;
occurs.&lt;/p&gt;
&lt;p&gt;Final catch, class variables can only be accessed inside the body of a class
that inherits/includes the class defining the variables. This means you can&amp;#39;t
use the &lt;code&gt;@@x&lt;/code&gt; notation with the &lt;code&gt;eval&lt;/code&gt; method that we will see later. However,
you can use reflection: &lt;code&gt;Module#class_variable_get/set&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;constants-and-modules-&quot;&gt;Constants (and Modules)&lt;/h2&gt;
&lt;p&gt;Constants start with an uppercase letter, and modules are actually a kind of
constant.&lt;/p&gt;
&lt;p&gt;Constants depend on the notion of &lt;code&gt;nesting&lt;/code&gt;: you can access a constant if it is
declared inside a module body that is around you, or in one of the ancestors of
the current module (but &lt;strong&gt;not&lt;/strong&gt; in an ancestor of a surrounding module!). You
can also use &lt;code&gt;::&lt;/code&gt; to navigate through modules:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-ruby&quot;&gt;X = 0
module A
  X = 1
  p ::X # 0
  module B; module C; Y = 2; end; end
  module D
    p X # 1
    p B::C::Y
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The following exemple illustrates two gotchas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You don&amp;#39;t have access to constants defined in an ancestor of a surrounding
module.&lt;/li&gt;
&lt;li&gt;Constants in surrounding modules take precedence over constants in ancestors.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;lang-ruby&quot;&gt;module A; X = &amp;#39;a&amp;#39;; end
module B; Y = &amp;#39;b&amp;#39;; end
module C
  include A
  p X # ok
  Y = &amp;#39;c&amp;#39;
  module D
    include B
    p Y # &amp;#39;c&amp;#39;!
    p X # NameError
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The module body really has to be around you:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-ruby&quot;&gt;module A::B::C; p Y; end # ok (Y defined in C)
module A::D; p X; end # NameError (X defined in A)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can access the current nesting with &lt;code&gt;Module::nesting&lt;/code&gt; and clarify the
example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-ruby&quot;&gt;module A
  module D; p Module.nesting; end # [A, A::D]
end
module A::D; p Module.nesting; end # [A::D]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Of course, if you try to access a constant before it has been assigned, a
&lt;code&gt;NameError&lt;/code&gt; ensues. &lt;code&gt;Module::constants&lt;/code&gt; will list the constants defined at the
point of call, while &lt;code&gt;Module#constants&lt;/code&gt; will list the constants defined by the
module (and optionally by its ancestors, depending on the argument).&lt;/p&gt;
&lt;h2 id=&quot;methods&quot;&gt;Methods&lt;/h2&gt;
&lt;p&gt;Methods are looked up on the receiver (the thing before the dot). If there is no
receiver, &lt;code&gt;self&lt;/code&gt; is assumed. Then it&amp;#39;s just a matter to perform the lookup
according to &lt;a href=&quot;/ruby-module-linearization&quot;&gt;linearization&lt;/a&gt;. &lt;code&gt;self&lt;/code&gt; may also have a meta-class which has
priority on all other ancestors.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Refinements&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;However, there is another subtlety, called &lt;em&gt;refinements&lt;/em&gt;. In Ruby, it is common
to use &lt;em&gt;monkey patching&lt;/em&gt; to open a class and add and redefine methods. However,
if every library starts doing this, you can end up with nasty conflicts.
Refinements were introduced as a solution to this problem.&lt;/p&gt;
&lt;p&gt;Refinements can only be defined in non-class modules, and only classes can be refined:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-ruby&quot;&gt;class C
  def foo; &amp;#39;foo&amp;#39;; end
end

module M
  refine C do
    def foo; &amp;#39;bar&amp;#39;; end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Defining a refinement does nothing by itself. You have to use the &lt;code&gt;Module#using&lt;/code&gt;
function to enable some refinements in the current module:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-ruby&quot;&gt;module N
  p C.new.foo # &amp;#39;foo&amp;#39;
  using M
  p C.new.foo # &amp;#39;bar&amp;#39;
end
p C.new.foo # &amp;#39;foo&amp;#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;using&lt;/code&gt; statements are somewhat peculiar, because they are strictly lexical in
scope. Said otherwise, the introduced refinements have the same visibility as
constants, &lt;strong&gt;excepted&lt;/strong&gt; that the &lt;code&gt;using&lt;/code&gt; is not inherited (via sublassing or
include):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-ruby&quot;&gt;class A; using M; end
class B &amp;lt; A
  p C.new.foo # &amp;#39;foo&amp;#39;
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, refinements themselves are inherited:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-ruby&quot;&gt;module O
  include M
end
module P
  using O
  p C.new.foo # &amp;#39;bar&amp;#39;
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;How prioritary are refinements? Refinements always take priority over everything
else. What if multiple refinements conflicts? The latest innermost &lt;code&gt;using&lt;/code&gt; statement
always wins.&lt;/p&gt;
&lt;p&gt;You can get a list of modules whose refinements are visible with
&lt;code&gt;Module::used_modules&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;on-which-module-are-methods-defined-&quot;&gt;On which module are methods defined?&lt;/h2&gt;
&lt;p&gt;Last, but not least, when you use the &lt;code&gt;def&lt;/code&gt; keyword, on which module are the
methods defined? The not-so-helpful answer is that these methods become instance
methods of &lt;em&gt;the definee&lt;/em&gt;. Entering certain declarations and calling certain
functions change the definee, as we&amp;#39;ll see in the next section.&lt;/p&gt;
&lt;h2 id=&quot;how-self-and-the-definee-change&quot;&gt;How &lt;code&gt;self&lt;/code&gt; and the definee change&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;where&lt;/th&gt;
&lt;th&gt;self&lt;/th&gt;
&lt;th&gt;definee&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;top-level (file or REPL)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;main&lt;/code&gt; (an instance of &lt;code&gt;Object&lt;/code&gt;)&lt;/td&gt;
&lt;td&gt;Object&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;in a module&lt;/td&gt;
&lt;td&gt;module&lt;/td&gt;
&lt;td&gt;module&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;in &lt;code&gt;class &amp;lt;&amp;lt; X&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;metaclass of &lt;code&gt;X&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;metaclass of &lt;code&gt;X&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;in a &lt;code&gt;def method&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;receiver&lt;/td&gt;
&lt;td&gt;surrounding module&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;in a &lt;code&gt;def X.method&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;receiver (&lt;code&gt;X&lt;/code&gt;)&lt;/td&gt;
&lt;td&gt;metaclass of &lt;code&gt;X&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;X.instance_eval&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;receiver (&lt;code&gt;X&lt;/code&gt;)&lt;/td&gt;
&lt;td&gt;metaclass of &lt;code&gt;X&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;X.class_eval&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;receiver (&lt;code&gt;X&lt;/code&gt;, a module)&lt;/td&gt;
&lt;td&gt;receiver (&lt;code&gt;X&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Also note that &lt;code&gt;Module#module_eval&lt;/code&gt; is an alias for &lt;code&gt;Module#class_eval&lt;/code&gt;. There
are also variants called &lt;code&gt;class/module/instance_exec&lt;/code&gt;, which do the same thing
as the &lt;code&gt;eval&lt;/code&gt; version but allow passing additional arguments to the block
(useful to make instance variables accessible to the block). This is &lt;strong&gt;the
only&lt;/strong&gt; difference between the &lt;code&gt;exec&lt;/code&gt; and &lt;code&gt;eval&lt;/code&gt; family, despite the
documentation seeming to hint at some bizarre lookup behaviour.&lt;/p&gt;
&lt;p&gt;Note that for the two &lt;code&gt;def&lt;/code&gt; rows, the definee is both the module on which the
method itself is being defined, and the definee for nested method definitions.&lt;/p&gt;
&lt;p&gt;At first, it may seem that &lt;code&gt;class/module_eval&lt;/code&gt; does the same as a &lt;code&gt;module&lt;/code&gt; or
&lt;code&gt;class&lt;/code&gt; block. However, you cannot open a class inside a method, so &lt;code&gt;class_eval&lt;/code&gt;
helps in you need to evaluate something in the context of a class as part of a
method. Note however that it is possible to open metaclasses in a method through
&lt;code&gt;class &amp;lt;&amp;lt; X&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There are also string-based &lt;code&gt;eval&lt;/code&gt; based. But things are complex enough as it
is, if you can avoid to go there, please do.&lt;/p&gt;
&lt;p&gt;Finally, if you experiment, you may find out you cannot define singleton method
on the classes &lt;code&gt;Integer&lt;/code&gt; and &lt;code&gt;Symbol&lt;/code&gt; (e.g. &lt;code&gt;def Integer.foo&lt;/code&gt;). I assume for
performance reasons.&lt;/p&gt;
&lt;h2 id=&quot;doing-better-&quot;&gt;Doing Better?&lt;/h2&gt;
&lt;p&gt;The situation is a bit hairy, to say the least. How could we simplify things?&lt;/p&gt;
&lt;p&gt;Once you wrap your head around them, globals, class and instance variables are
rather simple. One caveat: I would allow accessing class variables whenever
&lt;code&gt;self&lt;/code&gt; is the class, removing an exception with little benefit.&lt;/p&gt;
&lt;p&gt;Regarding local variables, it&amp;#39;s not quite obvious why scope gates are needed.
Maybe because they would encourage people to use class-local variables instead
of class variables? It doesn&amp;#39;t really hurt, but adds yet another thing to
remember to the language.&lt;/p&gt;
&lt;p&gt;Constants lookup is puzzling. My take is that constants should be looked up
first in the ancestors then in the surrounding module and its ancestors, etc.
That would be much less surprising. I don&amp;#39;t see &lt;strong&gt;any&lt;/strong&gt; reason to do things in
the current way (surrounding modules take precedence over the ancestors).&lt;/p&gt;
&lt;p&gt;I think a useful heuristic is to preserve the ability to move code vertically.
Code that is well-defined in a class should have the same meaning in a subclass
or in a superclass, unless some symbols are overridden in the class. Surrounding
modules should not affect such code.&lt;/p&gt;
&lt;p&gt;Refinements blatantly violate the heuristic above. I can appreciate why: the
idea was to to restrict monkey patching to a well-defined blob of code, and
inheriting &lt;code&gt;using&lt;/code&gt; statements goes against that by forcing monkey patching on
sub-classes. On the other hand, I think it goes against the principle of least
surprise by violating my heuristic above.&lt;/p&gt;
&lt;p&gt;Another reason refinements are awkward is that they introduce not one, but two
new forms of lookup: &lt;code&gt;using&lt;/code&gt; statements and refinement definitions (&lt;code&gt;refine&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;I believe it was a mistake to overload modules with another role as &amp;quot;refinement
container&amp;quot;. It would probably have been better to merge &lt;code&gt;using&lt;/code&gt; into &lt;code&gt;refine&lt;/code&gt;:
make all refinements active as soon as defined, and combine them through
inheritance (using the ancestor chain).&lt;/p&gt;
&lt;p&gt;If it was really desirable to refine a method only within a superclass but not
within its subclasses, the &lt;code&gt;private&lt;/code&gt; function could have been reused. This would
have made refinement lookups similar to method lookup, and would have surprised
no-one.&lt;/p&gt;
&lt;p&gt;There is a big problem with this idea: dynamically looking up refinement is
expensive: you now need to walk two ancestor chains instead of one for every
lookup. A simple countermeasure: forbid adding new refinements dynamically,
which is already the case in the current version.&lt;/p&gt;
&lt;p&gt;Finally, I would allow opening classes and modules in methods, and allow any
expression in place of the class name. This would remove the need for
&lt;code&gt;class_eval&lt;/code&gt; method. If needed one can add the restriction that only existing
classes and modules can be opened in methods.&lt;/p&gt;
&lt;p&gt;I would also remove &lt;code&gt;instance_eval&lt;/code&gt;, however it has no immediate analog. I would
retool the &lt;code&gt;class &amp;lt;&amp;lt; X&lt;/code&gt; notation for this purpose. The metaclass can still be
accessed through &lt;code&gt;Object#singleton_class&lt;/code&gt;. This field can be used in conjunction
with &lt;code&gt;class&lt;/code&gt; so that &lt;code&gt;class X.singleton_class&lt;/code&gt; achieves the previous effect of
&lt;code&gt;class &amp;lt;&amp;lt; X&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So in summary:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Allow class variables to be used anywhere where &lt;code&gt;self&lt;/code&gt; is the class.&lt;/li&gt;
&lt;li&gt;Abolish scope gates?&lt;/li&gt;
&lt;li&gt;Lookup constants first in the ancestors, then in the surround class and their
ancestors.&lt;/li&gt;
&lt;li&gt;Merge &lt;code&gt;using&lt;/code&gt; into &lt;code&gt;refine&lt;/code&gt;, and make this new kind of refinement inheritable,
except when qualified with &lt;code&gt;private&lt;/code&gt;. Forbid dynamically adding refinements to
avoid dynamic refinement lookup.&lt;/li&gt;
&lt;li&gt;Remove the &lt;code&gt;instance_eval&lt;/code&gt; and &lt;code&gt;class_eval&lt;/code&gt; methods; allow opening classes in
methods; and make &lt;code&gt;class &amp;lt;&amp;lt; X&lt;/code&gt; take the meaning of &lt;code&gt;X.instance_eval&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Add a &lt;code&gt;metaclass&lt;/code&gt; field to class &lt;code&gt;Object&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Of course, it&amp;#39;s too late for Ruby. But for a language inspired by Ruby, these
points are worth considering.&lt;/p&gt;
      </description>
      <pubDate>2017-03-05T23:00:00.000Z</pubDate>
      <link>http://norswap.com/ruby-lookups-scopes</link>
      <guid isPermaLink="true">http://norswap.com/ruby-lookups-scopes</guid>
    </item>
    <item>
      <title>Morning Winds</title>
      <description>
&lt;p&gt;And now, for something &lt;strong&gt;completely&lt;/strong&gt; different.&lt;/p&gt;
&lt;p&gt;I&amp;#39;ve started taking part in a forum-based role-play game based on the universe
of Game of Thrones. If you&amp;#39;re interested, it happens &lt;a href=&quot;http://s4.zetaboards.com/A_Game_of_Thrones&quot;&gt;over here&lt;/a&gt; (warning: 90s
web design).&lt;/p&gt;
&lt;p&gt;As part of that, I made an RP post to introduce the character I&amp;#39;ll be playing,
the somber Lord Nyron Gaunt. Some very biased people told me it was good. I&amp;#39;m
not under any such illusion, yet here it is for the records:&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Like every morning, Lord Nyron Gaunt stood atop his battlements to take in the
fresh morning air. A faint drizzle was falling, making his face and the surface
of his clothes slightly wet.&lt;/p&gt;
&lt;p&gt;Nyron liked the weather. Most men despised it, he had noticed. They complained
about it much more than they would about a heavy downpour. Like if the gods had
decided to take a piss on what would otherwise be a perfectly good day.&lt;/p&gt;
&lt;p&gt;It was sixteen years ago on this day that he became lord of Honorton. A bitter
memory, that. His father, murdered; and the culprit known almost beyond doubts.
And yet, justice had been sorely lacking on that day. Instead, Nyron had
brokered an uneasy truce. It had been necessary, he knew.&lt;/p&gt;
&lt;p&gt;Lucan had been howling for blood, of course. That was the worse of it, to hear
his heart echo in the words and wails of his younger brother; but, in the end,
to do nothing.&lt;/p&gt;
&lt;p&gt;It had been the right decision. He knew it back then, and knew it even now. It
still left a bad taste in his mouth.&lt;/p&gt;
&lt;p&gt;Sixteen years of strife. It had been hard. He hadn&amp;#39;t expected to trade his
leisurely hunts and the comforts of a good book for the burden of command so
soon. He always had had his head on his shoulder however, so he made do.&lt;/p&gt;
&lt;p&gt;Fortunately he had his wife, and their children. They were the sun rays in the
unending drizzle of his existence. Them, and his people, whom he had worked so
hard to protect. A good people.&lt;/p&gt;
&lt;p&gt;Nyron Gaunt was no fool. He knew there was nothing magical in the seed of the
men living in the plains around Honorton. Nothing inborn that made them better
than other men. But he thought — hoped — that he and his predecessors had put
something in their minds. Inspired them, somehow, by their example. A bit like
when you took good care of a plant or a flower, it grew and bloomed.&lt;/p&gt;
&lt;p&gt;His people were plants. That made Nyron Gaunt chuckle.&lt;/p&gt;
&lt;p&gt;Sixteen years of strife. And not much to show for it, truth be told. At least,
there was peace now. He would not have his sons waste their youth like he had,
warring and angling and currying favors.&lt;/p&gt;
&lt;p&gt;There was peace now, and there would continue to be peace. He would make sure of
it. He was not about to let his hard work undone by some fools.&lt;/p&gt;
&lt;p&gt;Nyron sighed heavily. Then he turned around, and got back to work.&lt;/p&gt;
      </description>
      <pubDate>2017-02-27T23:00:00.000Z</pubDate>
      <link>http://norswap.com/morning-winds</link>
      <guid isPermaLink="true">http://norswap.com/morning-winds</guid>
    </item>
  </channel>
</rss>
