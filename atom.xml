<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>norswap</title>
    <description></description>      
    <link>http://norswap.com/</link>
    <atom:link href="http://norswap.com/atom.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Charlie Munger&#39;s Big Lesson: Prepare for Opportunity</title>
      <description>
&lt;p&gt;This is the first post in &lt;a href=&quot;/munger&quot;&gt;a serie about Charlie Munger&amp;#39;s wisdom&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;When proper circumstances present themselves, act with decisiveness and
conviction.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;You can get very remarkable investment results if you think more like a
winning pari-mutuel player. Just think of it as a heavy odds against game full
of craziness with an occasional mispriced something or other. And you&amp;#39;re
probably not going to be smart enough to find thousands in a lifetime. And
when you get a few, you really load up. It&amp;#39;s just that simple.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;When Warren lectures at business schools, he says, &amp;quot;I could improve your
ultimate financial welfare by giving you a ticket with only 20 slots in it so
that you had 20 punches — representing all the investments that you got to
make in a lifetime. And once you&amp;#39;d punched through the card, you couldn&amp;#39;t make
any more investments at all.&amp;quot;&lt;/p&gt;
&lt;p&gt;He says, &amp;quot;Under those rules, you&amp;#39;d really think carefully about what you did
and you&amp;#39;d be forced to load up on what you&amp;#39;d really thought about. So you&amp;#39;d do
so much better.&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;Experience tends to confirm a long-held notion that being prepared, on a few
occasions in a lifetime, to act promptly in scale, in doing some simple and
logical thing, will often dramatically improve the financial results of that
lifetime. A few major opportunities, clearly recognizable as such, will
usually come to one who continuously searches and waits, with a curious mind
that loves diagnosis involving multiple variables. And then all that is
required is a willingness to bet heavily when the odds are extremely
favorable, using resources available as a result of prudence and patience in
the past.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;Our game is to recognize a big idea when it comes along, when one doesn’t come
along very often. Opportunity comes to the prepared mind.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;You’re looking for a mispriced gamble. That’s what investing is. And you have
to know enough to know whether the gamble is mispriced. That&amp;#39;s value
investing. [...] You should remember that good ideas are rare — when the odds
are greatly in your favor, bet heavily.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;What is the most important personal quality an investor can have?&lt;/p&gt;
&lt;p&gt;Patience... followed by pretty aggressive conduct. It is given to human beings
who work hard at it—who look and sift the world for a mispriced bet — that
they can occasionally find one. And the wise ones bet heavily when the world
offers them that opportunity. They bet big when they have the odds. And the
rest of the time, they don’t. It’s just that simple.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;It takes character to sit there with all that cash and do nothing. I didn’t
get to where I am by going after mediocre opportunities.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;Ted Williams is the only baseball player who had a .400 single-season hitting
record in the last seven decades. He divided the strike zone into
seventy-seven cells, each representing the size of a baseball. He would insist
on swinging only at balls in his &amp;#39;best&amp;#39; cells, even at the risk of striking
out, because reaching for the &amp;#39;worst&amp;#39; spots would seriously reduce his chances
of success.&lt;/p&gt;
&lt;p&gt;As a securities investor, you can watch all sorts of business propositions in
the form of security prices thrown at you all the time. For the most part, you
dont have to do a thing other than be amused. Once in a while, you will find a
fat pitch that is slow, straight, and right in the middle of your sweet spot.
Then you swing hard. This way, no matter what natural ability you start with,
you will substantially increase your hitting average.&lt;/p&gt;
&lt;p&gt;One common problem for investors is that they tend to swing too often.
However, the opposite problem is equally harmful to long-term results: you
discover a &amp;#39;fat pitch&amp;#39; but are unable to swing with the full weight of your
capital.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;We just look for no-brainer decisions. As Buffett and I say over and over
again, we don&amp;#39;t leap seven-foot fences. Instead, we look for one-foot fences
with big rewards on the other side. So we&amp;#39;ve succeeded by making the world
easy for ourselves, not by solving hard problems.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;You have to be aversive to the standard stupidities... you don’t have to be
smart. We look for easy decisions, but we find it very hard to find &amp;quot;easy
decisions&amp;quot;. Really, I’m just out there trying to be non-idiotic.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;Our job is to find a few intelligent things to do, not to keep up with every
damn thing in the world.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;When proper circumstances present themselves, act with decisiveness and
conviction.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Be fearful when others are greedy, and greedy when others are fearful&lt;/li&gt;
&lt;li&gt;Opportunity doesn&amp;#39;t come often, so seize it when it does&lt;/li&gt;
&lt;li&gt;Opportunity meeting the prepared mind: that&amp;#39;s the game&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Summary&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;upon proper circumstances, act with decisiveness and conviction&lt;/li&gt;
&lt;li&gt;search/wait for mispriced gambles, where the odds are in your favor&lt;/li&gt;
&lt;li&gt;when one turns out, bet heavily&lt;/li&gt;
&lt;li&gt;or: patience, followed by an agressive conduct&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Addendum&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The above seems to imply big make-or-break decisions. In reality, while the bets
should be few and far between, there should be enough of them to balance the
potential losses.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You don&amp;#39;t win by predicting the future; you win by getting the odds right. You
can be right about the future and still not make any money. At the racetrack,
for example, the favorite horse may be the one most likely to win, but since
everyone wants to bet on the favorite, how likely is it that betting on the
favorite will make you money? The horse to bet on is the one more likely to
win than most people expect. That&amp;#39;s the one that gives you the best odds.
That&amp;#39;s the bet that pays off over time.&lt;/p&gt;
&lt;/blockquote&gt;
      </description>
      <pubDate>2017-10-09T22:00:00.000Z</pubDate>
      <link>http://norswap.com/munger-opportunity</link>
      <guid isPermaLink="true">http://norswap.com/munger-opportunity</guid>
    </item>
    <item>
      <title>The Wisdom of Charlie Munger</title>
      <description>
&lt;p&gt;Over the past two months, I&amp;#39;ve read through the
book &lt;a href=&quot;https://www.goodreads.com/book/show/944652.Poor_Charlie_s_Almanack&quot;&gt;Poor Charlie&amp;#39;s Almanack&lt;/a&gt; and a few related source, which
expound the wisdom of &lt;a href=&quot;https://en.wikipedia.org/wiki/Charlie_Munger&quot;&gt;Charlie Munger&lt;/a&gt; — better known as Warren Buffett&amp;#39;s
business partner.&lt;/p&gt;
&lt;p&gt;The books serves a hearty dose of down-to-earth wisdom. It&amp;#39;s a far cry from the
tone of many business books. On the other hand, most of it — while most sensible
— isn&amp;#39;t particularly earth-shattering. But that&amp;#39;s sort of the point. Charlie
prides himself of trying to be non-idiotic rather than smart.&lt;/p&gt;
&lt;p&gt;Nevertheless, Charlies does have unconvential ideas. Try to be non-idiotic
rather than smart; be prepared for big opportunities through voracious learning
— meaning that most of your time should be spent waiting and learning instead of
pursuing some goal. Other ideas find echo elsewhere but are given an excellent
succint treatment, notably improving your thinking by using models from
different disciplines, and in particular knowledge of psychological biases.&lt;/p&gt;
&lt;p&gt;I&amp;#39;ll share my notes over the course of four blog posts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/munger-opportunity&quot;&gt;Prepare for Opportunity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;On Learning (soon)&lt;/li&gt;
&lt;li&gt;How to Think and Make Decisions (soon)&lt;/li&gt;
&lt;li&gt;Psychological Tendencies List (soon)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I hope you enjoy these summaries as much as I enjoyed the book!&lt;/p&gt;
      </description>
      <pubDate>2017-10-09T22:00:00.000Z</pubDate>
      <link>http://norswap.com/munger</link>
      <guid isPermaLink="true">http://norswap.com/munger</guid>
    </item>
    <item>
      <title>Muse - Black Holes &amp; Butterflies (Fan Album)</title>
      <description>
&lt;p&gt;And now, for something completely different.&lt;/p&gt;
&lt;p&gt;I have an ongoing project of going through my considerable music library to
isolate, rank and categorize its best tracks.&lt;/p&gt;
&lt;p&gt;When the band Muse came under the microscope, I was very tempted to make a
compilation of my favourite tracks; and so I did just that.&lt;/p&gt;
&lt;p&gt;Muse occupies a special place in my musical pantheon. I realized a few years ago
that I liked pretty much everything that they put out, which for me happens very
rarely. I&amp;#39;m more inclined to listen to a hodge podge of individual tracks rather
than to complete albums.&lt;/p&gt;
&lt;p&gt;I wanted this compilation to feel like a real album. Therefore it had to have
some kind of thematical consistency, some sense of continuity, and a pleasant
pacing. Oh, and it had to fit on a 80 minutes CD! I&amp;#39;m pleased with the result,
and I hope you can enjoy it too.&lt;/p&gt;
&lt;p&gt;Without further ado, &lt;a href=&quot;https://www.youtube.com/playlist?list=PLiZkNl164CsD_jMZcBIMLrAh1V0Oakq6L&quot;&gt;the album&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/posts/muse-black-holes-butterflies/cover2.jpg&quot; alt=&quot;Muse - Black Holes &amp;amp; Butterflies Album Cover&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;hr&gt;&lt;/p&gt;
&lt;h3 id=&quot;-listen-on-youtube-listen-&quot;&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PLiZkNl164CsD_jMZcBIMLrAh1V0Oakq6L&quot;&gt;Listen on YouTube&lt;/a&gt;&lt;/h3&gt;
&lt;hr&gt;

&lt;pre&gt;&lt;code&gt;01. New Born
02. Starlight
03. MK Ultra
04. Unnatural Selection
05. Supremacy
06. Hysteria
07. Plug In Baby
08. Supermassive Black Hole
09. Map Of The Problematique
10. Butterflies &amp;amp; Hurricanes
11. Knights Of Cydonia
12. Thoughts Of A Dying Atheist
13. Time Is Running Out
14. Feeling Good
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;

&lt;p&gt;Now for some trivia about the making of the pie...&lt;/p&gt;
&lt;h3 id=&quot;title&quot;&gt;Title&lt;/h3&gt;
&lt;p&gt;I gave the album the title &lt;em&gt;Black Holes &amp;amp; Butterflies&lt;/em&gt;, a mash up of the
track title &lt;em&gt;Butterflies &amp;amp; Hurricanes&lt;/em&gt; and the album title &lt;em&gt;Black Holes &amp;amp;
Revelations&lt;/em&gt; (a line from the song &lt;em&gt;Starlight&lt;/em&gt;). The title can be interpreted in
many different ways, but doesn&amp;#39;t really have any fixed meaning.&lt;/p&gt;
&lt;p&gt;At some point, I hesitated to call the album &lt;em&gt;Uprising&lt;/em&gt;, as the story told by
the songs can be interpreted as a journey of dissension. However, Muse already
has track called &lt;em&gt;Uprising&lt;/em&gt;, which doesn&amp;#39;t feature on this album. And in the
end, the poetry of &lt;em&gt;Black Holes &amp;amp; Butterflies&lt;/em&gt; quite rightfully won out.&lt;/p&gt;
&lt;h3 id=&quot;track-origin&quot;&gt;Track Origin&lt;/h3&gt;
&lt;p&gt;Let&amp;#39;s look at the tracks&amp;#39; original albums:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Black Holes &amp;amp; Revelations   x4 (02, 08, 09, 11)
Absolution                  x4 (06, 10, 12, 13)
Origin of Symmetry          x3 (01, 07, 14)
The Resistance              x2 (03, 04)
The 2nd Law                 x1 (05)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If I had to make a ranking of my favourite Muse albums:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Black Holes and Revelations (2006)&lt;/li&gt;
&lt;li&gt;Absolution (2003)&lt;/li&gt;
&lt;li&gt;Origin of Symmetry (2001)&lt;/li&gt;
&lt;li&gt;The Resistance (2009)&lt;/li&gt;
&lt;li&gt;Showbiz (1999)&lt;/li&gt;
&lt;li&gt;The 2nd Law (2012)&lt;/li&gt;
&lt;li&gt;Drones (2015)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This is more or less consistent with the songs&amp;#39; origin, with &lt;em&gt;Drones&lt;/em&gt; not
featuring at all. Muse&amp;#39;s debut album &lt;em&gt;Showbiz&lt;/em&gt; doesn&amp;#39;t feature either.
Thematically and musically, I feel it is rather distinct to the other albums:
it&amp;#39;s a bit as if it happened before Muse found it&amp;#39;s own grandiose
conspiracy-fueled self.&lt;/p&gt;
&lt;h3 id=&quot;discarded-tracks&quot;&gt;Discarded Tracks&lt;/h3&gt;
&lt;p&gt;Now for some tracks I really like but that didn&amp;#39;t make the cut:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bliss (Origin of Symmetry)&lt;/li&gt;
&lt;li&gt;Sing for Absolution (Absolution)&lt;/li&gt;
&lt;li&gt;Apocalypse Please (Absolution)&lt;/li&gt;
&lt;li&gt;Stockholm Syndrome (Absolution)&lt;/li&gt;
&lt;li&gt;Ruled By Secrecy (Absolution)&lt;/li&gt;
&lt;li&gt;United States of Eurasia (The Resistance)&lt;/li&gt;
&lt;li&gt;Follow Me (The 2nd Law)&lt;/li&gt;
&lt;li&gt;Panic Station (The 2nd Law)&lt;/li&gt;
&lt;li&gt;Dead Inside (Drones)&lt;/li&gt;
&lt;li&gt;Mercy (Drones)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For most of them, the reason is pretty simple: they didn&amp;#39;t fit musically,
thematically, or both.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Sing for Absolution&lt;/em&gt; is probably the track I would have liked to include most.
While it&amp;#39;s super powerful, the album isn&amp;#39;t really about regrets, but more about
strife. It always looks forward, not backward.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Apocalypse Please&lt;/em&gt; could have been included, but it&amp;#39;s an ending track, and the
ending is already strong, between &lt;em&gt;Thoughts of a Dying Atheist&lt;/em&gt; and &lt;em&gt;Time is
Running Out&lt;/em&gt;. I was also keen to have &lt;em&gt;Feeling Good&lt;/em&gt; as final track, to end on
an ethereal fresh note. Nevertheless, this would definitely have been included
if not for the time restriction.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Ruled by Secrecy&lt;/em&gt; would have been a strong contender if I needed a lull
somewhere in the album (which would have made a lot of sense if it had been
longer). Finally, &lt;em&gt;Stockholm Syndrome&lt;/em&gt; would have blended in just fine, but it
was just a weaker candidate all around.&lt;/p&gt;
&lt;h3 id=&quot;cover-art&quot;&gt;Cover Art&lt;/h3&gt;
&lt;p&gt;I actually made two versions of the cover art: the one you can see on the
youtube videos and just below, and the one towards the top of the article.&lt;/p&gt;
&lt;p&gt;The one below I found by searching for pictures of black holes. I used it to
upload the videos. But then I found the second picture, which depicts the
&lt;a href=&quot;https://en.wikipedia.org/wiki/NGC_6302&quot;&gt;butterfly nebula&lt;/a&gt;. I couldn&amp;#39;t resist the fact that it linked both compoments of
the album title, and it looks pretty neat too.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/posts/muse-black-holes-butterflies/cover1.jpg&quot; alt=&quot;Muse - Black Holes &amp;amp; Butterflies Alt Album Cover&quot;&gt;&lt;/p&gt;
      </description>
      <pubDate>2017-09-20T22:00:00.000Z</pubDate>
      <link>http://norswap.com/muse-black-holes-butterflies</link>
      <guid isPermaLink="true">http://norswap.com/muse-black-holes-butterflies</guid>
    </item>
    <item>
      <title>Java Reflection, 1000x Faster</title>
      <description>
&lt;p&gt;A few weeks ago I got to make some of my code 1000 times faster, without
changing the underlying complexity! As the title implies, this involved making
Java reflection calls faster.&lt;/p&gt;
&lt;p&gt;Let me explain my use case as well, because it&amp;#39;s relatively general, and a good
example of why one would use reflection in the first place.&lt;/p&gt;
&lt;p&gt;I had an interface (representing a tree node) and a slew of classes (100+)
implementing this interface. The trick is that the tree is heterogeneous, each
node kind can have different numbers of children, or store them differently.&lt;/p&gt;
&lt;p&gt;I needed some code te be able to walk over such a composite tree. The simple
approach is to simply add a &lt;code&gt;children()&lt;/code&gt; method to the interface and implement
it in every kind of node. Very tedious, and boilerplaty as hell.&lt;/p&gt;
&lt;p&gt;Instead, I noted that all children were either direct fields, or aggregated in
fields holding a collection of nodes. I could write a small piece of code that,
with reflection, would work for every node kind!&lt;/p&gt;
&lt;p&gt;I&amp;#39;ve put up &lt;a href=&quot;https://gist.github.com/norswap/09846a75092f49a7f1cbf1f00f85e9b6&quot;&gt;a much simplified version of the code on Github&lt;/a&gt;. I will link
the relevant parts as we go.&lt;/p&gt;
&lt;h3 id=&quot;initial-code&quot;&gt;Initial Code&lt;/h3&gt;
&lt;p&gt;Here is the version I came up with: &lt;a href=&quot;https://gist.github.com/norswap/09846a75092f49a7f1cbf1f00f85e9b6#file-walkerdemoslowest-java&quot;&gt;&lt;code&gt;WalkerDemoSlowest.java&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It&amp;#39;s fairly straightforward: get the methods of the node&amp;#39;s class, filter out
those that are not getters, then consider only that return either a node or a
collection of node. For those, invoke the method, and recursively invoke &lt;code&gt;walk&lt;/code&gt;
on the children.&lt;/p&gt;
&lt;p&gt;Will anyone be surprised if I tell them it&amp;#39;s very slow?&lt;/p&gt;
&lt;h3 id=&quot;caching&quot;&gt;Caching&lt;/h3&gt;
&lt;p&gt;There is a simple tweak we can apply that makes it much faster however: we can
cache the methods lookup.&lt;/p&gt;
&lt;p&gt;Here is the caching version: &lt;a href=&quot;https://gist.github.com/norswap/09846a75092f49a7f1cbf1f00f85e9b6#file-walkerdemoslow-java&quot;&gt;&lt;code&gt;WalkerDemoSlow.java&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It&amp;#39;s really the same except that for each class implementing &lt;code&gt;Node&lt;/code&gt;, we create a
&lt;code&gt;ClassData&lt;/code&gt; object that caches all the relevant getters, so we only have to look
them up once. This produces a satisfying ~10x speedup.&lt;/p&gt;
&lt;h3 id=&quot;lambdametafactory-magic&quot;&gt;LambdaMetafactory Magic&lt;/h3&gt;
&lt;p&gt;Unfortunately, this was still way too slow. So I took to Google, which turned
out this &lt;a href=&quot;https://stackoverflow.com/questions/19557829/faster-alternatives-to-javas-reflection&quot;&gt;helpful StackOverflow question&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The accepted answers proposes the use of &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/invoke/LambdaMetafactory.html&quot;&gt;&lt;code&gt;LambdaMetafactory&lt;/code&gt;&lt;/a&gt;, a standard
library class that supports lambda invocations in the language.&lt;/p&gt;
&lt;p&gt;The details are somewhat hazy to me, but it seems that by using these facilities
we can &amp;quot;summon the compiler&amp;quot; on our code and optimize the reflective access into
a native invocation. That&amp;#39;s the working hypothesis anyhow.&lt;/p&gt;
&lt;p&gt;Here is the code: &lt;a href=&quot;https://gist.github.com/norswap/09846a75092f49a7f1cbf1f00f85e9b6#file-walkerdemofast-java&quot;&gt;&lt;code&gt;WalkerDemoFast.java&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now, in my code, this worked wonders, unlocking another 100x speedup. While
writing this article however, I wanted to demonstrate the effect with some code
snippet, but didn&amp;#39;t manage to. I tried to give the interface three sub-classes,
and to give them bogus methods to be filtered out, to no avail. The second and
third version of the code would run at about the same speed.&lt;/p&gt;
&lt;p&gt;I re-checked the original code -- all seemed good. In my original code, the
trees are Abstract Syntax Trees (AST) derived by parsing some source files.
After fooling around some more, I noticed different results if I limited the
input to the first 14 source files.&lt;/p&gt;
&lt;p&gt;These files are relatively short (few 10s of lines) and syntactically simple.
With only those, the second and third version would run at about the same speed.
But add in the 15th file (a few 100s of lines) and the second version would take
a whopping 36 seconds while the third version would still complete in 0.2
seconds, a ~700x difference.&lt;/p&gt;
&lt;p&gt;My (somewhat shaky) hypothesis is that if the scenario is simple enough, the
optimizer notices what you are doing and optmizes away. In more complex cases,
it exhausts its optimization budget and falls back on the unoptimized version
and its abysmal performance. But the optimizer is devious enough that crafting a
toy example that would defeat it seems to be quite the feat.&lt;/p&gt;
&lt;h3 id=&quot;lambdametafactory-possibilities&quot;&gt;LambdaMetafactory Possibilities&lt;/h3&gt;
&lt;p&gt;I&amp;#39;m somewhat intrigued about what is possible with &lt;code&gt;LambdaMetafactory&lt;/code&gt;. In my
use case, it works wonders because reflection calls are much more expensive than
a simple cache lookup. But could it be used to optmize regular code in
pathological cases as well? It seems unlikely to help with &lt;a href=&quot;http://insightfullogic.com/2014/May/12/fast-and-megamorphic-what-influences-method-invoca/&quot;&gt;megamorphic call
sites&lt;/a&gt;, because the compiled method handle has to be retrieved somehow, and the
cost of that lookup would dwarf the gains.&lt;/p&gt;
&lt;p&gt;But what about piecing together code at run time, and optimizing it? In
particular, one could supply a data structure and an interpreter for that data
structure, and &amp;quot;compile&amp;quot; them together using &lt;code&gt;LambdaMetafactory&lt;/code&gt;. Would it be
smart enough to partially evaluate the code given the data structure, and so
turn your interpreter into the equivalent &amp;quot;plain&amp;quot; code?&lt;/p&gt;
&lt;p&gt;Incidentally, that is exactly the approach taken by the &lt;a href=&quot;https://github.com/graalvm/graal&quot;&gt;Truffle framework&lt;/a&gt;,
which runs on top of the Graal VM, so there is definitely something to the idea.
Maybe something precludes it with the current JVM, hence requiring the GraalVM
modification?&lt;/p&gt;
&lt;p&gt;In any case, there is something to be said in favor of making these capabilities
available as a library, which could be used in &amp;quot;regular programs&amp;quot; (i.e. not
compilers). Writing a simple interpreter is often the easiest approach to some
problems.&lt;/p&gt;
      </description>
      <pubDate>2017-09-12T22:00:00.000Z</pubDate>
      <link>http://norswap.com/fast-java-reflection</link>
      <guid isPermaLink="true">http://norswap.com/fast-java-reflection</guid>
    </item>
    <item>
      <title>New Publication</title>
      <description>
&lt;p&gt;New publication: &lt;strong&gt;Red Shift: Procedural Shift-Reduce Parsing&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To appear at &lt;a href=&quot;http://conf.researchr.org/track/sle-2017/sle-2017-papers&quot;&gt;SLE 2017&lt;/a&gt;.&lt;br&gt;&lt;a href=&quot;/pubs/sle2017.pdf&quot;&gt;Pre-print here&lt;/a&gt;.&lt;/p&gt;
      </description>
      <pubDate>2017-09-10T22:00:00.000Z</pubDate>
      <link>http://norswap.com/pub-red-shift</link>
      <guid isPermaLink="true">http://norswap.com/pub-red-shift</guid>
    </item>
    <item>
      <title>Ruby&#39;s `super` Keyword Weirdness</title>
      <description>
&lt;p&gt;The other day, my colleague Benoît was faced with a strange problem in his Ruby
code. Here is a greatly simplified version of the code that caused the problem:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-Ruby&quot;&gt;class A
    def foo
        p :A
    end
end

class B &amp;lt; A
end

module F
    def foo
        super
        p :F
    end
end

method = F.instance_method(:foo)
B.send(:define_method, :foo, lambda { |*args|
    method.bind(self).call(*args)
})

B.new.foo
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What do you think the last line does?&lt;/p&gt;
&lt;p&gt;It seems like it should print &lt;code&gt;:F&lt;/code&gt;, then &lt;code&gt;:A&lt;/code&gt;. &lt;code&gt;B#foo&lt;/code&gt; becomes bounds to a
lambda, inside which we call &lt;code&gt;F#foo&lt;/code&gt; with &lt;code&gt;self&lt;/code&gt; bound to &lt;code&gt;self&lt;/code&gt; from the
lambda.&lt;/p&gt;
&lt;p&gt;Since the lambda is then bound to &lt;code&gt;B#foo&lt;/code&gt;, it would stand to reason to think
that the &lt;code&gt;super&lt;/code&gt; from &lt;code&gt;F#foo&lt;/code&gt; would invoke &lt;code&gt;A#foo&lt;/code&gt;. But here&amp;#39;s the rub: it
invokes &lt;code&gt;B#foo&lt;/code&gt; recursively.&lt;/p&gt;
&lt;p&gt;And so it turns out that the last line fails with &lt;code&gt;SystemStackError: stack level
too deep&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Of course, the code is actually needlessly complicated. You could do this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-ruby&quot;&gt;method = F.instance_method(:foo)
B.send(:define_method, :foo, method)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And — plot twist — this actually works fine.&lt;/p&gt;
&lt;p&gt;This also works:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-ruby&quot;&gt;B.send(:define_method, :foo, lambda { |*args| super(*args); p :F })
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That&amp;#39;s interesting and wasn&amp;#39;t covered in
the &lt;a href=&quot;/ruby-dark-corners&quot;&gt;Ruby&amp;#39;s Dark Corners&lt;/a&gt; series can explain it. And of
course, &lt;a href=&quot;/ruby-specification-problem&quot;&gt;Ruby doesn&amp;#39;t have a specification&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I have an hypothesis: when a &amp;quot;callable&amp;quot; (unbound method, lambda, ...) is
directly bound to a method, then any &lt;code&gt;super&lt;/code&gt; reference in the callable are
correctly bound to that method. However, if &lt;code&gt;super&lt;/code&gt; is called through at least
one level of indirection (in our example above, we have a lambda that calls a
method), then &lt;code&gt;super&lt;/code&gt; simply calls the regular method (that is the &amp;quot;lowest&amp;quot; one
in the class hierarchy), no matter what method it was reached from.&lt;/p&gt;
&lt;p&gt;(This was tested with Ruby 2.3 on Windows and Ruby 2.4 on Mac OS)&lt;/p&gt;
      </description>
      <pubDate>2017-09-03T22:00:00.000Z</pubDate>
      <link>http://norswap.com/ruby-super-keyword</link>
      <guid isPermaLink="true">http://norswap.com/ruby-super-keyword</guid>
    </item>
    <item>
      <title>Random Generation Testing</title>
      <description>
&lt;p&gt;At its core, testing is the process of building redundancy in order to ward off
errors. When you write usual unit tests, you&amp;#39;re comparing the output of your
code with the output of your brain, given the same inputs.&lt;/p&gt;
&lt;p&gt;I always found testing profoundly unpleasant. It&amp;#39;s hard to select the proper
inputs to root out all possible issues. One way to look at it is that good
testing should exercise all possible paths through the program. That is of
course impossible — but we could narrow it down to a representative sample,
e.g. where loop repetitions of n &amp;gt; 2 are considered identical. You still get
combinatorial explosion. This is in fact the major limitation in &lt;a href=&quot;https://en.wikipedia.org/wiki/Symbolic_execution&quot;&gt;symbolic
execution&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Test coverage is an even further approximation. Instead of considering paths
through the program, we &lt;em&gt;just&lt;/em&gt; want to ensure that tests run every piece of code
at least once. That doesn&amp;#39;t give you a whole lot of guarantees. And yet,
reaching a high percentage of test coverage in tests already seems like a really
hard challenge for most software teams.&lt;/p&gt;
&lt;p&gt;Besides a few obvious edge cases, selecting inputs is hard, because the most
interesting inputs are those we probably wouldn&amp;#39;t pick, reflecting blind spots
in our implementation. I&amp;#39;m a perfectionnist, and just good enough at programming
to realize how bad I really am. The realization that I&amp;#39;m leaving a whole lot
untested always eats at me when I write traditional unit tests.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;But fear not, for I have the cure.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The fundamental weakness of testing is that we even have to select the inputs.
We have to select inputs because we&amp;#39;re comparing the program against our brains,
which we of course cannot &amp;quot;run&amp;quot; during a test suite. Instead, results for
pre-selected inputs have to be hardcoded in the test suite. What if we compared
our program to another program instead? If you are re-implementing an existing
system or protocol, then you&amp;#39;re all set! Otherwise, you need to write the second
implementation yourself.&lt;/p&gt;
&lt;p&gt;Multiple objections could be raised. The first one: if your test fails, how do
you know which program is at fault? Good one: you don&amp;#39;t. You have the same
problem with brain-computed results though. When you run your test for the first
time, how do you know whether the program or the expected results are wrong?
Usualy, you double check. But it is true this is more of a problem when
comparing two program, because these kinds of test tend to go much much further.&lt;/p&gt;
&lt;p&gt;Another objection: you&amp;#39;re doing the work twice! In theory, yes. In practice, you
can cast by the wayside a whole lot of non-essential requirements in the second
implementation: performance, deployment, durability (writing to a DB),
resiliency (logging, transactions) and probably more, in order to focus on
&amp;quot;business logic&amp;quot;. In fact the second implementation should be as naive and
simple as possible, to minimize the chance you made a mistake there (but do see
the caveat in the next objection). As a side benefit, you might gain some
understanding by writing the second implementation. Finally, consider the time
it would take to write regular tests. For some teams, it&amp;#39;s not rare that it
approaches or exceeds 50% of the total development time.&lt;/p&gt;
&lt;p&gt;Third objection: aren&amp;#39;t you likely to reproduce the same mistakes in both
implementations. That is a danger, yes. Multiple steps can be taken to avoid
this. One is to make the second implementation as simple as possible. Another is
to have two separate people write both implementations (also great to make
hidden assumptions come to light). Yet another is to write the two
implementations in radically different styles: purely functional, logical, using
another architecture (but while keeping it as simple as possible within that
style).&lt;/p&gt;
&lt;p&gt;Once you have logic redundancy, you are free from the tyranny of input
selection. You can input anything, the the same result should come out of the
end of both programs. Hence, the next logical step is to randomly generate
this input.&lt;/p&gt;
&lt;p&gt;This is perhaps the trickiest part of the process: you have to ensure that the
random generation process is able to generate most interesting inputs (our
&lt;em&gt;representative sample&lt;/em&gt; from earlier), and that the combination of probabilities
does not make some of these inputs as likely as the second coming of the
dinosaurs. Of course, the more complex your input, the harder this is. However,
I&amp;#39;m currently applying this method to genreate whole &lt;acronym title=&quot;Abstract
Syntax Trees&quot;&gt;ASTs&lt;/acronym&gt;, so it&amp;#39;s unlikely to ever be &lt;em&gt;too&lt;/em&gt; hard.&lt;/p&gt;
&lt;p&gt;If you get this right, you can run the tests — which generates inputs forever,
runs both programs and compares their outputs — and get confidence in your
implementation(s) proportional to the running time. Even if you don&amp;#39;t get it
entirely right, you&amp;#39;re unlikely to do worse than hand-selected scenarios, you&amp;#39;ll
just eschew some interesting types of inputs.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Invert, always invert.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let&amp;#39;s now look at an interesting variation on that theme. This applies when
there is a one-to-one (or almost one-to-one) mapping between your input and your
output. So you can go from input to output, and then back from output to input.&lt;/p&gt;
&lt;p&gt;The idea is that instead of building a second implementation, you build the
inverse of the implementation (taking outputs to inputs). Then, instead of
generating inputs, you generate outputs, take them back to inputs with the
inverse program, and back again with the actual program, and check that the
final outputs match the generated outputs. It&amp;#39;s also possible to go inputs →
outputs → inputs instead, depending on what makes the most sense. As an added
benefit, the inverse is often useful in its own right, or downright necessary.&lt;/p&gt;
&lt;p&gt;I applied this approach to test &lt;a href=&quot;/reusable-lexer&quot;&gt;the lexer I wrote about recently&lt;/a&gt;, here are
&lt;a href=&quot;https://github.com/norswap/core-lexer/tree/master/test/norswap/core/lexer&quot;&gt;the tests&lt;/a&gt;.&lt;/p&gt;
      </description>
      <pubDate>2017-07-03T22:00:00.000Z</pubDate>
      <link>http://norswap.com/gen-testing</link>
      <guid isPermaLink="true">http://norswap.com/gen-testing</guid>
    </item>
    <item>
      <title>A Reusable Lexer</title>
      <description>
&lt;p&gt;I&amp;#39;m writing a small programming language — codename &lt;a href=&quot;https://github.com/norswap/core0&quot;&gt;Core 0&lt;/a&gt; — in order to try
out multiple ideas I have in language design and compiler implementation (which
is fortunate, as that happens to be my research topic).&lt;/p&gt;
&lt;p&gt;The first step in that journey was to write a lexer. A lexer (aka tokenizer) is
a system that turns a textual input into a stream of tokens. Typical tokens:
numbers, identifiers, keywords, operators, ...&lt;/p&gt;
&lt;p&gt;While parsing can handle characters directly, going through a lexer has multiple
advantages (which, it should be said, I failed to appreciate in the past).
First, it helps performance by avoiding to match the same token again and again.
Second, it helps error reporting, but supplying a less granular unit of content.&lt;/p&gt;
&lt;p&gt;I wanted to design the lexer to be reusable, by which I mean that it shouldn&amp;#39;t
be tied to any specific language. In particular, I wanted to avoid hardwiring a
particular choice of keywords and operators in the lexer. This is not to say the
lexer can handle all languages, far from it. Reuse by copy and modification is
fine for me. In fact, I think much harm has been done by insisting on components
that can be reused in any situation without modifications.&lt;/p&gt;
&lt;p&gt;It&amp;#39;s frequent for lexers to be specified as a set of regular expressions (one
regex per token type) and to assume that the lexer always takes the longest
match at the current position. The implementation is typically not done like
that for performance reasons, but rather it&amp;#39;s structured as a big ole
character-level switch loop.&lt;/p&gt;
&lt;p&gt;I could have followed the regex approach but I didn&amp;#39;t really see the point, so I
wrote an English &lt;a href=&quot;https://github.com/norswap/core0/blob/master/src/core/lexer/_README.md&quot;&gt;specification&lt;/a&gt; for the lexer, making each token type mutually
exclusive (so that there is never an ambiguity). That was a useful exercise to
crystallize my thoughts. I also included a series of restrictions on valid token
streams that follow naturally from the tokens definitions. For instance, an
identifer cannot directly follow another identifier, otherwise the lexer would
have generated a single, longer identifier instead.&lt;/p&gt;
&lt;p&gt;An interesting decision I made is that the lexer always generates a stream of
tokens, for every input. To do so, there is a &lt;em&gt;garbage&lt;/em&gt; token type that
encapsulates spans of characters that cannot be attached to a token. Typically,
these are non-ascii characters that are not part of a comment or litteral.&lt;/p&gt;
&lt;p&gt;You can check out &lt;a href=&quot;https://github.com/norswap/core-lexer&quot;&gt;the code here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Stay tuned for a description of the testing methodology I use to test the lexer,
and further infos on Core 0&amp;#39;s implementation.&lt;/p&gt;
      </description>
      <pubDate>2017-07-02T22:00:00.000Z</pubDate>
      <link>http://norswap.com/reusable-lexer</link>
      <guid isPermaLink="true">http://norswap.com/reusable-lexer</guid>
    </item>
    <item>
      <title>The Bed of Procrustes: Chosen Tidbits</title>
      <description>
&lt;p&gt;&amp;quot;The Bed of Procrustes&amp;quot; is a book of &lt;a href=&quot;https://en.wikipedia.org/wiki/Aphorism&quot;&gt;aphorisms&lt;/a&gt; by Nassim Taleb, who
also wrote &lt;a href=&quot;https://en.wikipedia.org/wiki/Fooled_by_Randomness&quot;&gt;Fooled by Randomness&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Antifragile&quot;&gt;Antifragile&lt;/a&gt;. I haven&amp;#39;t read those yet,
but I plan to give them a try.&lt;/p&gt;
&lt;p&gt;Taleb&amp;#39;s style is witty and biting. This makes his writings entertaining, at the
very least. But whether I agree with him or not, Taleb never fails to make me
think. He truly is an original thinker.&lt;/p&gt;
&lt;p&gt;Here&amp;#39;s what caught my eye in &amp;quot;The Bed of Procrustes&amp;quot;. See for yourself!&lt;/p&gt;
&lt;!-------------------------------------------------------------------------&gt;&lt;hr&gt;

The test of originality for an idea is not the absence of one single predecessor
but the presence of multiple but incompatible ones.

&lt;!-------------------------------------------------------------------------&gt;&lt;hr&gt;

Your reputation is harmed most by what you say to defend it.

&lt;!-------------------------------------------------------------------------&gt;&lt;hr&gt;

They will envy you for your success, for your wealth, for your intelligence, for
your looks, for your status — but rarely for your wisdom.

&lt;!-------------------------------------------------------------------------&gt;&lt;hr&gt;

Most of what they call humility is successfully disguised arrogance.

&lt;!-------------------------------------------------------------------------&gt;&lt;hr&gt;

The characteristic feature of the loser is to bemoan, in general terms,
mankind&amp;#39;s flaws, biases, contradictions, and irrationality — without exploiting
them for fun and profit.

&lt;!-------------------------------------------------------------------------&gt;&lt;hr&gt;

Success is becoming in middle adulthood what you dreamed to be in late
childhood. The rest comes from loss of control.

&lt;!-------------------------------------------------------------------------&gt;&lt;hr&gt;

It is the appearance of inconsistency, and not its absence, that makes people
attractive.

&lt;!-------------------------------------------------------------------------&gt;&lt;hr&gt;

Wisdom in the young is as unattractive as frivolity in the elderly.

&lt;!-------------------------------------------------------------------------&gt;&lt;hr&gt;

You exist if and only if you are free to do things without a visible objective,
with no justification and, above all, outside the dictatorship of someone else&amp;#39;s
narrative.

&lt;!-------------------------------------------------------------------------&gt;&lt;hr&gt;

Most feed their obsessions by trying to get rid of them.

&lt;!-------------------------------------------------------------------------&gt;&lt;hr&gt;

Charm is the ability to insult people without offending them; nerdiness the
reverse.

&lt;!-------------------------------------------------------------------------&gt;&lt;hr&gt;

There are two types of people: those who try to win and those who try to win
arguments. They are never the same.

&lt;!-------------------------------------------------------------------------&gt;&lt;hr&gt;

People are so prone to overcausation that you can make the reticent turn
loquacious by dropping an occasional &amp;quot;why?&amp;quot; in the conversation.

&lt;!-------------------------------------------------------------------------&gt;&lt;hr&gt;

We are satisfied with old objects like vistas or classical paintings but
insatiabde with technologies, amplifying small improvements in versions,
obsessed about 2.0, caught in a mental treadmill.

&lt;!-------------------------------------------------------------------------&gt;&lt;hr&gt;

My only measure of success is how much time you have to kill.

&lt;!-------------------------------------------------------------------------&gt;&lt;hr&gt;

You have a real life if and only if you do not compete with anyone in any of
your pursuits.

&lt;!-------------------------------------------------------------------------&gt;&lt;hr&gt;

Only in recent history was &amp;quot;working hard&amp;quot; signaled pride rather than shame for
lack of talent, finesse and mostly, spezzatura.

&lt;!-------------------------------------------------------------------------&gt;&lt;hr&gt;

What they call &amp;quot;play&amp;quot; (gym, travel, sports) looks like work; the harder they
try, the more captive they are.

&lt;!-------------------------------------------------------------------------&gt;&lt;hr&gt;

We are hunters; we are only truly alive in those moments when we improvise; no
schedule, just small surprises and stimuli from the environment.

&lt;!-------------------------------------------------------------------------&gt;&lt;hr&gt;

For everything, use boredom in place of a clock, as a biological wrist-watch,
though under constraints of politeness.

&lt;!-------------------------------------------------------------------------&gt;&lt;hr&gt;

You exist in full if and only if your conversation (or writings) cannot be
easily reconstructed with clips from other conversations.

&lt;!-------------------------------------------------------------------------&gt;&lt;hr&gt;

Technology is at its best when it is invisible.

&lt;!-------------------------------------------------------------------------&gt;&lt;hr&gt;

When I look at people on treadmills I wonder how alpha lions, the strongest,
expend the least amount of energy, sleeping twenty hours a day; others hunt for
them.

&lt;!-------------------------------------------------------------------------&gt;&lt;hr&gt;

You need to keep reminding yourself of the obvious: charm lies in the unsaid,
the unwritten, and the undisplayed. It takes mastery to control silence. Caesar
pontem fecit.

&lt;!-------------------------------------------------------------------------&gt;&lt;hr&gt;

Double a man&amp;#39;s erudition; you will halve his citations.

&lt;!-------------------------------------------------------------------------&gt;&lt;hr&gt;

Never rid anyone of an illusion unless you can replace it in his mind with
another illusion. (But don&amp;#39;t work too hard on it; the replacement illusion does
not even have to be more convincing than the initial one.)

&lt;!-------------------------------------------------------------------------&gt;&lt;hr&gt;

The fool views himself as more unique and others more generic; tho wise views
himself as more generic and others more unique.

&lt;!-------------------------------------------------------------------------&gt;&lt;hr&gt;

Finer men tolerate others&amp;#39; small inconsistencies though not the large ones; the
weak tolerats others&amp;#39; large inconsistencies though not small ones.

&lt;!-------------------------------------------------------------------------&gt;&lt;hr&gt;

Mental clarity is the child of courage, not the othe way around. [...] knowledge
is reached (mostly) by removing junk from people&amp;#39;s head.

&lt;!-------------------------------------------------------------------------&gt;&lt;hr&gt;

The biggest error since Socrates has been to believe that lack of clarity is the
source of all our ills, not the result of them.

&lt;!-------------------------------------------------------------------------&gt;&lt;hr&gt;

Beauty is enhanced by unashamed irregularities; magnificence by a facade of
blunder.

&lt;!-------------------------------------------------------------------------&gt;&lt;hr&gt;

True humility is when you can surprise yourself more than others; the rest is
either shyness or good marketing.

&lt;!-------------------------------------------------------------------------&gt;&lt;hr&gt;

You can only convince people who think they can benefit from being convinced.

&lt;!-------------------------------------------------------------------------&gt;&lt;hr&gt;

Greatness starts with the replacement of hatred with polite disdain.

&lt;!-------------------------------------------------------------------------&gt;&lt;hr&gt;

Religions and ethics have evolved from promising heaven if you do good, to
promising heaven while you do good, to making you promise to do good.

&lt;!-------------------------------------------------------------------------&gt;&lt;hr&gt;

Just as dyed hair makes older men less attractive, it is what you do to hide
your weaknesses that makes them repugnant.

&lt;!-------------------------------------------------------------------------&gt;&lt;hr&gt;

You are only secure if you can lose your fortune without the additional worse
insult of having to become humble.

&lt;!-------------------------------------------------------------------------&gt;&lt;hr&gt;

Robustness is progress without impatience.

&lt;!-------------------------------------------------------------------------&gt;&lt;hr&gt;

For the robust, an error is information; for the fragile, an error is an error.

&lt;!-------------------------------------------------------------------------&gt;&lt;hr&gt;

The imagination of the genius vastly surpasses his intellect; the intellect of
the academic vastly surpasses his imagination.

&lt;!-------------------------------------------------------------------------&gt;&lt;hr&gt;

The four most influential moderns: Darwin, Marx, Freud and (the productive)
Einstein were scholars but not academics. It has always been hard to do genuine
-- and nonperishable -- work within institutions.

&lt;!-------------------------------------------------------------------------&gt;
      </description>
      <pubDate>2017-06-08T22:00:00.000Z</pubDate>
      <link>http://norswap.com/procrustes</link>
      <guid isPermaLink="true">http://norswap.com/procrustes</guid>
    </item>
    <item>
      <title>The Tragedy of the Commons</title>
      <description>
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Tragedy_of_the_commons&quot;&gt;&amp;quot;The Tragedy of the Commons&amp;quot;&lt;/a&gt; is a well-known economic parable that describes a
scenario where the action that is optimal for each actor leads to global ruin:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This was the situation of cattle herders sharing a common parcel of land on
which they are each entitled to let their cows graze, as was the custom in
English villages. He (William Forster Lloyd) postulated that if a herder put
more than his allotted number of cattle on the common, overgrazing could
result. For each additional animal, a herder could receive additional
benefits, but the whole group shared damage to the commons. If all herders
made this individually rational economic decision, the common could be
depleted or even destroyed, to the detriment of all.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This may remind you of &lt;a href=&quot;https://en.wikipedia.org/wiki/Prisoner%27s_dilemma&quot;&gt;&amp;quot;the prisoners&amp;#39; dilemna&amp;quot;&lt;/a&gt;, which is related:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Two partners in crime are arrested. The criminals cannot communicate with each
other. The prosecutor offers both criminals a deal: testify and you will be
set free while your accomplice serves a three years term. If both testify,
however, both criminals will spend two years in prison. If none testify, they
will both spend one year in prison. It is assumed that the decision will have
no repercurssions beyond the time spent in prison.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Under this scenario, the &lt;em&gt;dominant&lt;/em&gt; strategy is to betray one&amp;#39;s partner.
Whatever the partner ends up doing, you&amp;#39;ll end up better if you betray him than
if you don&amp;#39;t.&lt;/p&gt;
&lt;p&gt;In both the tragedy of the commons and the prisoner&amp;#39;s dilemna, there is a
rational and superior decision for all participants. And yet if everyone picks
this solution, the outcome is worse than what could be achieved through
collaboration.&lt;/p&gt;
&lt;p&gt;Of course human beings do not work with mechanistic rationality. The prisoners&amp;#39;
dilemna in particular is very unlikely to play out this way, because of the
stigma incurred by snitching. Beyond that, basic moral principles would probably
factor in.&lt;/p&gt;
&lt;p&gt;Commons-type situations, however, are much more common. On its face, the parable
is about a shared ressource (the titular &amp;quot;commons&amp;quot; — shared pastures). You
probably know fairly well that some people are much less careful with shared
goods than with their own private property. Even more abstract ressources, such
as a buffet or public toilets tend to be abused.&lt;/p&gt;
&lt;p&gt;At the core of the abuse is this reflection: I won&amp;#39;t pay the consequences, so
why bother? Of course, if everyone thinks like that, there will be consequences,
for everyone.&lt;/p&gt;
&lt;p&gt;At a more global level too, the tragedy of the commons is present. Pollution is
a prime example: if a little bit of pollution will turn a bigger profit, why
abstain?&lt;/p&gt;
&lt;p&gt;There is usually a fairly big moral stigma associated with taking the rationally
selfish decision in a commons-style situation. This is a natural defense again
situations we realize would be ruinous.&lt;/p&gt;
&lt;p&gt;Yet being selfish can be so tempting... Not least because it is perfectly
logical. If others are doing it, why should &lt;em&gt;I&lt;/em&gt; abstain? If no one else is doing
it, where is the harm? Note the similarity to the reasoning in the prisoners&amp;#39;
dilemna: you have cause to be selfish no matter what the others do.&lt;/p&gt;
&lt;p&gt;There are other reasons why it is easy being selfish. First, our actions might
seem individually insignificant. Second, unlike the prisoners&amp;#39; dilemna, the
other parties are a vast anonymous mass, to which you owe little or no loyalty.
Being selfish in the prisoners&amp;#39; dilemna is betraying a comrade. Polluting the
environment is, at first approximation, a victimless crime.&lt;/p&gt;
&lt;p&gt;It&amp;#39;s so easy in fact that we are very quick to make the selfish decision, when
no-one is looking or can find out, or when the profit outweighs the loss of
moral status.&lt;/p&gt;
&lt;p&gt;And that&amp;#39;s why — plot twist — we have regulations and need the government. In
its pure and ideal form, the government is a way to make globally optimal
decisions and ensure that all actors play by the rules. The government proclaims
the rules, sets and enforces punishments in case of violations, and actively
seeks to find out violators.&lt;/p&gt;
&lt;p&gt;I&amp;#39;m not sure that the role of the government as a shield against &amp;quot;tragedies of
the commons&amp;quot; is well understood, yet it is absolutely primordial. I&amp;#39;m not sure
even politicians understand it, beyond protecting citizens from violence and
abusive business practices — which to be sure are two important commons-style
situation, but also happen to be those that they can pander with fearmongering.&lt;/p&gt;
&lt;p&gt;Even at a smaller scale, the spirit of the solution is remarkably similar. Make
a binding agreement that includes all concerned parties. Plan for some negative
consequences should the agreement be broken (shame, shunning and exclusion are
good basic tactics), and finally don&amp;#39;t forget to look for violators.&lt;/p&gt;
&lt;p&gt;To conclude, I am &lt;strong&gt;not&lt;/strong&gt; going to encourage you to act selflessly. You have
nothing to gain, as this article makes clear. But I hope you can now recognize
commons-type situations, and understand the kind of solutions that can be
deployed against them.&lt;/p&gt;
      </description>
      <pubDate>2017-06-07T22:00:00.000Z</pubDate>
      <link>http://norswap.com/commons</link>
      <guid isPermaLink="true">http://norswap.com/commons</guid>
    </item>
  </channel>
</rss>
