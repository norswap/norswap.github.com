<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>norswap</title>
    <description></description>      
    <link>http://norswap.com/</link>
    <atom:link href="http://norswap.com/atom.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Weight Training 7: All The Lifts, All The Time</title>
      <description>
&lt;p&gt;Previously: &lt;a href=&quot;/weight-training&quot;&gt;One&lt;/a&gt; / &lt;a href=&quot;/weight-training-2&quot;&gt;Two&lt;/a&gt; / &lt;a href=&quot;/weight-training-3&quot;&gt;Three&lt;/a&gt; / &lt;a href=&quot;/weight-training-4&quot;&gt;Four&lt;/a&gt; / &lt;a href=&quot;/weight-training-5&quot;&gt;Five&lt;/a&gt; / &lt;a href=&quot;/weight-training-6&quot;&gt;Six&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;#39;s switch things up and talk about my training before it actually takes
place.&lt;/p&gt;
&lt;p&gt;I want to rethink my long-term training strategy, but that will require a fair
amount of reading and planning.&lt;/p&gt;
&lt;p&gt;In the meantime, and with the gym reopening, I want to get back into
powerlifting training. The approach I want to try this time is practicing every
lift (bench, squat, deadlift) every workout, thrice a week.&lt;/p&gt;
&lt;p&gt;There&amp;#39;s a twist, I would work in different rep ranges during each workout:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Squat 3x, Bench Press 6x, Deadlift 12x&lt;/li&gt;
&lt;li&gt;Deadlift 3x, Squat 6x, Bench Press 12x&lt;/li&gt;
&lt;li&gt;Bench Press 3x, Deadlift 6x, Squat 12x&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I&amp;#39;ve actually been told after this was written but not yet published that this
is an existing training programmation concept: &lt;a href=&quot;https://www.strongerbyscience.com/daily-undulating-periodization/&quot;&gt;Daily Undulating Periodization
(DUP)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There are a number of reasons I want to try this approach:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I haven&amp;#39;t worked with heavy weights in a while due to quarantine (and even
before, I wasn&amp;#39;t working very heavy). I miss it, and I think I could use the
stimulus.&lt;/li&gt;
&lt;li&gt;The high volume will help me recover my previous level of performance faster.&lt;/li&gt;
&lt;li&gt;Hopefully, it could also help me go beyond my previous peak. Powerlifters
programs typically train the lifts more than what I&amp;#39;ve ever been doing. That
was under &lt;a href=&quot;/weight-training&quot;&gt;Stronglifts&lt;/a&gt;, and was per 2-week periods: 6x squat, 3x
deadlift, 3x bench. (1) I haven&amp;#39;t trained liked that in more than a year
however.&lt;/li&gt;
&lt;li&gt;That&amp;#39;s also how I see most competent powerlifters around me train. (2)&lt;/li&gt;
&lt;li&gt;Alternating rep ranges should help relieve the stress of repeating the same
movement pattern over and over, and help develop different &amp;quot;strength
qualities&amp;quot;. (3)&lt;/li&gt;
&lt;li&gt;Practicing the same lift often means there&amp;#39;s less pressure to perform great or
improve the lift during each given workout. It also gives three vectors on
which to improve (one for each rep ranges) for the same lift.&lt;/li&gt;
&lt;li&gt;It&amp;#39;s a similar approach to the proven &lt;a href=&quot;https://www.t-nation.com/workouts/531-how-to-build-pure-strength&quot;&gt;5/3/1&lt;/a&gt; program
(&lt;a href=&quot;https://www.powerliftingtowin.com/beyond-531/&quot;&gt;reviewed&lt;/a&gt;), but which dips in bodybuilding rep ranges (6+)
instead or staying within purely strength-focused rep ranges (1-6).&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;(1) That&amp;#39;s not enough deadlift and bench, and in a sense too much squat,
because all these trainings were in the same rep range — at the end of that
period, that was one heavy set of 3 followed by two lighter sets of 3.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;(2) The guy with the biggest bench press I met (not sure about the exact
number, but he casually benched 160kg for a couple reps) told me he got there by
benching every workout. Clearly it works for some people.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;(3) It&amp;#39;s difficult to explain, but anyone that has lifted seriously knows that
squat your max for 3 reps feels very different than squatting your max for 12
reps. The difficulty and challenges are not the in same place. The hope is that
the aspect that are most stimulated when working in that rep range will improve
and carry over to the other rep ranges.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That being said, the approach also comes with risks, most notably the risk of
increased fatigue because of the increased volume. To tackle this, I&amp;#39;ve made
multiple resolutions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Be very mindful of fatigue, and don&amp;#39;t try to macho it up. Since every lift is
practiced every workout, there is not less incentive to do this.&lt;/li&gt;
&lt;li&gt;Stay shy of failure, which takes a big toll on your body. This is standard
training advice, but I&amp;#39;ve never practiced it, as &lt;a href=&quot;/weight-training&quot;&gt;Stronglifts&lt;/a&gt; is a
beginner program. (4)&lt;/li&gt;
&lt;li&gt;Instead, try to stay within the feasible range. Occasionally trying to go
heavier and failing is okay. Or use &lt;a href=&quot;https://www.niashanks.com/double-progression-method/&quot;&gt;double progression&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;One question that is not entirely settled: per-workout volume. It&amp;#39;s planned to
adapt this depending on fatigue, but I might dabble in some formal scheme,
drawing inspiration from &lt;a href=&quot;/weight-training-5/#reactive-training-systems-rts&quot;&gt;Reactive Training
Systems (RTS)&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Another RTS idea: Use pivot blocks (essentially extended deloads with
complementary work) whenever progress stop.&lt;/li&gt;
&lt;li&gt;And in fact, try to predict when progress will stop by tracking your Time To
Peak (TTP: the number of weeks you can train before progress stops). Curious
to see how that one works out.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;(4) Some will argue that beginners should also stay shy of failure, which is
fair enough I suppose. I actually have no idea if there is a definitive word
on this.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;... all the while cutting.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This might not be optimal in order to make strength gains, but should be fine as
long as I don&amp;#39;t overtrain.&lt;/p&gt;
&lt;p&gt;The rationale is that the strength stuff is fun, and interesting to investigate,
but I don&amp;#39;t attach much value to reaching particular strength milestone. On the
other hand, I do attach some value to getting to a leaner body composition.&lt;/p&gt;
&lt;p&gt;I have some more meditations on this, but I will have to wait for another post!&lt;/p&gt;
      </description>
      <pubDate>2020-07-26T22:00:00.000Z</pubDate>
      <link>http://norswap.com/weight-training-7</link>
      <guid isPermaLink="true">http://norswap.com/weight-training-7</guid>
    </item>
    <item>
      <title>Weight Training 6: Training at Home During Quarantine</title>
      <description>
&lt;p&gt;Previously: &lt;a href=&quot;/weight-training&quot;&gt;One&lt;/a&gt; / &lt;a href=&quot;/weight-training-2&quot;&gt;Two&lt;/a&gt; / &lt;a href=&quot;/weight-training-3&quot;&gt;Three&lt;/a&gt; / &lt;a href=&quot;/weight-training-4&quot;&gt;Four&lt;/a&gt; / &lt;a href=&quot;/weight-training-5&quot;&gt;Five&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here&amp;#39;s a long overdue post on how I trained at home during quarantine. In fact,
as I write this, I&amp;#39;ve just begun going back to the gym since one week.&lt;/p&gt;
&lt;h2 id=&quot;training-home&quot;&gt;Training @Home&lt;/h2&gt;
&lt;p&gt;I saw the quarantine as an opportunity to experiment with at-home training,
something that had been in the back of my mind for a while.&lt;/p&gt;
&lt;p&gt;With no clear best candidate to adopt for at-home training, I decided to adapt
&lt;a href=&quot;/weight-training-5&quot;&gt;my previous training regimen&lt;/a&gt; (based on Jeremy Ethier&amp;#39;s &lt;a href=&quot;https://my.builtwithscience.com/courses&quot;&gt;Intermediate
Build&lt;/a&gt; program) for home work.&lt;/p&gt;
&lt;p&gt;(In fact, Jeremy ended up releasing an adapted version of his program for home,
which includes barbell, bodyweight and resistance band versions of all workouts.
But that wasn&amp;#39;t available when I started quarantining.)&lt;/p&gt;
&lt;p&gt;The experiment was pretty successful. I was able to put on some weight, and get
past a sticking point I had between 89 and 90 kgs.&lt;/p&gt;
&lt;p&gt;In fact it was a bit too successful. The program calls for 5 workouts a week,
but I ended up burning out after a couple weeks, and scaling back to 3 workouts
a week while keeping the 5-workouts rotation. Probably not the most optimal
thing to do, but eh — choosing exercises is hard.&lt;/p&gt;
&lt;p&gt;Home training can mean widely different things. I already owned a &lt;a href=&quot;https://www.amazon.fr/dp/B019H12VG8&quot;&gt;pullup bar&lt;/a&gt;
and a couple &lt;a href=&quot;https://www.amazon.fr/gp/product/B074MTMMWH&quot;&gt;resistance bands&lt;/a&gt; and &lt;a href=&quot;https://www.amazon.fr/gp/product/B07D35TXXX&quot;&gt;tubular bands&lt;/a&gt;. Additionally, I decided to
invest in a pair of &lt;a href=&quot;https://www.amazon.fr/gp/product/B0828DJYQR&quot;&gt;adaptable dumbbells&lt;/a&gt;. Those are pretty pricey: the &amp;quot;cheap&amp;quot;
(as in both price and potentially, make) version I bought ran me 100€ for each,
while the &lt;a href=&quot;https://www.amazon.fr/dp/B078HDGG7H&quot;&gt;original brand product&lt;/a&gt; is 250€. Ultimately, it proved to be a good
investment: they held up until now and proved really invaluable and enabling me
to perform more exercises.&lt;/p&gt;
&lt;p&gt;Towards the end of quarantine I also bought a &lt;a href=&quot;https://www.amazon.fr/gp/product/B078KCM53F/&quot;&gt;suspension band&lt;/a&gt; (also known as
&amp;quot;TRX band&amp;quot;, after the most popular brand). This is super handy for back
workouts, which are othewise a bit awkwards excepted for pullups. Really
recommended if you&amp;#39;re going to work your back at home.&lt;/p&gt;
&lt;p&gt;The program went through multiple slight iterations — I&amp;#39;m just going to
reproduce the final version below, with links to demonstrations for all the
exercises. A few comments on its evolution will follow.&lt;/p&gt;
&lt;h2 id=&quot;the-program&quot;&gt;The Program&lt;/h2&gt;
&lt;p&gt;Note: No rep counts are included. Since I have only limited ability to overload
the movement with weights at home, most of these should simply be &amp;quot;as many as
possible&amp;quot;.&lt;/p&gt;
&lt;h3 id=&quot;upper-body&quot;&gt;Upper Body&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2x &lt;a href=&quot;https://youtu.be/-MRNjTr6xrE?t=1091&quot;&gt;Flat Triceps Dumbbell Extension&lt;/a&gt;&lt;br&gt;(disregard the comment about not locking out)&lt;/li&gt;
&lt;li&gt;2x &lt;a href=&quot;https://www.youtube.com/watch?v=xphvjGDZeYE&quot;&gt;Flat Dumbbell Press&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2x &lt;a href=&quot;https://www.youtube.com/watch?v=2srBm6QYGMM&quot;&gt;Single Arm Banded Lat Pulldowns&lt;/a&gt;
(&lt;a href=&quot;https://www.youtube.com/watch?v=aHgtwja2Xlc&quot;&gt;alt&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;OR: 2x &lt;a href=&quot;https://youtu.be/mjnseqLiVXM?t=90&quot;&gt;Ground Pullovers&lt;/a&gt;
(&lt;a href=&quot;https://youtu.be/vc1E5CfRfos?t=510&quot;&gt;alt&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;3x &lt;a href=&quot;https://youtu.be/8B_uf-lR8cI?t=37&quot;&gt;Cobra Pus-Ups 21 Style&lt;/a&gt;&lt;br&gt;(forgot it was supposed to be cobra-style (arms along the body) pretty fast)&lt;/li&gt;
&lt;li&gt;2x &lt;a href=&quot;https://youtu.be/8B_uf-lR8cI?t=62&quot;&gt;Triceps Bodyweight Extensions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;lower-body-1&quot;&gt;Lower Body 1&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2x Bodyweight Squat&lt;/li&gt;
&lt;li&gt;4x &lt;a href=&quot;https://www.youtube.com/watch?v=YwDTthfbGrA&quot;&gt;Band Crab Walk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;(2x Bodyweight Squat)&lt;/li&gt;
&lt;li&gt;4x &lt;a href=&quot;https://youtu.be/SKr58wX-E_k?t=145&quot;&gt;Standing Band Pulls&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2x &lt;a href=&quot;https://youtu.be/-AWLDxutS08?t=202&quot;&gt;Bulgarian Split Squat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2x &lt;a href=&quot;https://youtu.be/5JmWguyvu7Y?t=320&quot;&gt;Lying Leg Curls&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2x &lt;a href=&quot;https://www.youtube.com/watch?v=nZACuG67cdg&quot;&gt;Seated Weight Calf Raise&lt;/a&gt;&lt;br&gt;(you can also use a plate or some raised platform to step on)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;push&quot;&gt;Push&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2x &lt;a href=&quot;https://youtu.be/-MRNjTr6xrE?t=1095&quot;&gt;Standing Triceps Extension&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2x &lt;a href=&quot;https://www.youtube.com/watch?v=xphvjGDZeYE&quot;&gt;Flat Dumbbell Press&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2x &lt;a href=&quot;https://www.youtube.com/watch?v=2srBm6QYGMM&quot;&gt;Single Arm Banded Lat Pulldowns&lt;/a&gt;
(&lt;a href=&quot;https://www.youtube.com/watch?v=aHgtwja2Xlc&quot;&gt;alt&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;OR: 2x &lt;a href=&quot;https://youtu.be/mjnseqLiVXM?t=90&quot;&gt;Ground Pullovers&lt;/a&gt;
(&lt;a href=&quot;https://youtu.be/vc1E5CfRfos?t=510&quot;&gt;alt&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;1x &lt;a href=&quot;https://www.youtube.com/watch?v=R5wFUdRWh9o&quot;&gt;Decline Wall Push-Up
Negatives&lt;/a&gt;&lt;br&gt;(the video is not what I did, but what I did was bullshit)&lt;/li&gt;
&lt;li&gt;3x &lt;a href=&quot;https://www.youtube.com/watch?v=oqO9T5rSOEQ&quot;&gt;Decline Pushups&lt;/a&gt;&lt;br&gt;(like the video, but with the knees on a higher support)&lt;/li&gt;
&lt;li&gt;(Low to High Cable Flies)&lt;/li&gt;
&lt;li&gt;2x &lt;a href=&quot;https://youtu.be/MWcJuLKB7RY?t=333&quot;&gt;Dumbell Lateral Raise&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;pull&quot;&gt;Pull&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2x &lt;a href=&quot;https://www.youtube.com/watch?v=sIvJTfGxdFo&quot;&gt;Pull-Ups&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2x &lt;a href=&quot;https://www.youtube.com/watch?v=d3mEoo5b0mw&quot;&gt;TRX Row&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2x &lt;a href=&quot;https://www.youtube.com/watch?v=UHU0rxi-8wM&quot;&gt;Straight Arm TRX Pulldown&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;2x &lt;a href=&quot;https://www.youtube.com/watch?v=4gLRdMisOeA&quot;&gt;TRX Reverse Flies&lt;/a&gt;
(do not neglect the eccentric part — true for other TRX exercises too)&lt;/li&gt;
&lt;li&gt;2x &lt;a href=&quot;https://youtu.be/20ibpB635Rw?t=183&quot;&gt;Incline Dumbbell Curls&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;(&lt;a href=&quot;https://www.youtube.com/watch?v=xG57S0fgXAk&quot;&gt;TRX Biceps Curls&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;3x &lt;a href=&quot;https://www.youtube.com/watch?v=rntSjJPz3Z4&quot;&gt;TRX Face Pulls&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;lower-body-2&quot;&gt;Lower Body 2&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2x &lt;a href=&quot;https://youtu.be/vc1E5CfRfos?t=410&quot;&gt;Alternating Sprinter Lunge&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2x &lt;a href=&quot;https://youtu.be/vc1E5CfRfos?t=696&quot;&gt;High Hip Buck&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2x &lt;a href=&quot;https://youtu.be/-MRNjTr6xrE?t=613&quot;&gt;Pistol Squat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2x &lt;a href=&quot;https://youtu.be/5JmWguyvu7Y?t=320&quot;&gt;Lying Leg Curls&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2x &lt;a href=&quot;https://www.youtube.com/watch?v=Jy0aMkLNsKo&quot;&gt;Weighted Calf Raise&lt;/a&gt;&lt;br&gt;(you can also do them without a raised  surface)&lt;/li&gt;
&lt;li&gt;2x &lt;a href=&quot;https://www.youtube.com/watch?v=ViVhUZGk6i4&quot;&gt;Single Leg Romanian Deadlift&lt;/a&gt;&lt;br&gt;(I did those with a single weight on the side of the support leg)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;evolution&quot;&gt;Evolution&lt;/h2&gt;
&lt;p&gt;The most notable evolution the program went through is that most most exercises
that have two sets used to have three, but I reduced when deloading after
burning out on the early version. Subsequently I simply increase the volume on
those two sets instead of adding a third one. I&amp;#39;m not sure this is the best
thing to do (3 sets is often seen as somewhat of a standard), but the main
benefit was helping get the length of the workouts under control.&lt;/p&gt;
&lt;p&gt;As already mentionned, I bought the suspension band only partway through, and
that means that other exercises had to be selected for the back before that.&lt;/p&gt;
&lt;p&gt;Here are a few of the exercises I tried: &lt;a href=&quot;https://youtu.be/fYS-rSmedCE?t=346&quot;&gt;towel row&lt;/a&gt;, &lt;a href=&quot;https://youtu.be/mjnseqLiVXM?t=167&quot;&gt;superman&lt;/a&gt;, &lt;a href=&quot;https://youtu.be/mjnseqLiVXM?t=40&quot;&gt;back widow&lt;/a&gt;,
&lt;a href=&quot;https://www.youtube.com/watch?v=wVQjyeQQDIs&quot;&gt;resistance band seated row&lt;/a&gt;, &lt;a href=&quot;https://www.youtube.com/watch?v=cszJcRz5UB0&quot;&gt;reverse pushups&lt;/a&gt;, &lt;a href=&quot;https://www.youtube.com/watch?v=lmi9NXKw1fU&quot;&gt;overhand/underhand table
rows&lt;/a&gt;, tubular band face pulls, band-assisted pullups, scapular pullups.&lt;/p&gt;
&lt;p&gt;There was also some variation on the other workouts, though less. Most notably I
did some &lt;a href=&quot;https://www.youtube.com/watch?v=y4mCllu5Qps&quot;&gt;kitchen counter dips&lt;/a&gt;, and some of the exerecises outlined in this
&lt;a href=&quot;https://www.youtube.com/watch?v=GKdR83QGIcg&quot;&gt;chest workout&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;As I&amp;#39;ve said a couple times, this probably isn&amp;#39;t the most optimized home
workout. 5 workouts over 11 days is probably too long of a rotation. There are
too many exercises, and it would be better to have a bit more sets per exercise.&lt;/p&gt;
&lt;p&gt;On the other hand, I got positive results out of it, and it was pretty good
given the circumstances. If anything, my biggest success here was to be able to
back down when I felt the onset of fatigue and overtraining — which has been
hard for me in the past.&lt;/p&gt;
&lt;p&gt;As for what&amp;#39;s next, I&amp;#39;ve started to do all the big lifts (bench, squat &amp;amp;
deadlift) again, three times per week, all the while cutting on a moderate
deficit. This might be a terrible idea, but I&amp;#39;m giving it a try. More on that
soon (hopefully).&lt;/p&gt;
      </description>
      <pubDate>2020-07-21T22:00:00.000Z</pubDate>
      <link>http://norswap.com/weight-training-6</link>
      <guid isPermaLink="true">http://norswap.com/weight-training-6</guid>
    </item>
    <item>
      <title>Truffle Tutorial: Adding 1 and 1 Together</title>
      <description>
&lt;p&gt;I&amp;#39;ve now been working on &lt;a href=&quot;https://github.com/oracle/truffleruby&quot;&gt;TruffleRuby&lt;/a&gt; for about 7 months. TruffleRuby is a Ruby
implementation built on top of &lt;a href=&quot;https://www.graalvm.org/docs/&quot;&gt;GraalVM&lt;/a&gt; and its &lt;a href=&quot;https://www.graalvm.org/docs/Truffle-Framework/user/README&quot;&gt;Truffle API&lt;/a&gt;. Truffle allows
languages to be implemented on top of Graal as &lt;a href=&quot;https://en.wikipedia.org/wiki/Interpreter_(computing)#Abstract_syntax_tree_interpreters&quot;&gt;AST interpreters&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I wanted to share a little bit of what I learned of Graal and Truffle, so I
decided to write this tutorial, which demonstrates the basics of Truffle through
simplistic examples.&lt;/p&gt;
&lt;p&gt;We are setting our ambition very low for this post. We are going to implement
the almost-simplest possible language. It will only be able to add numbers and
strings together. Doing this will teach us about some core principles of
Truffle. Then, we will use the &lt;a href=&quot;https://docs.oracle.com/en/graalvm/enterprise/20/guide/reference/ideal-graph-visualizer.html&quot;&gt;Ideal Graph Visualizer (IGV)&lt;/a&gt; tool to
inspect the result of compilation.&lt;/p&gt;
&lt;h2 id=&quot;what-graal-and-truffle-do&quot;&gt;What Graal and Truffle Do&lt;/h2&gt;
&lt;p&gt;Before entering into the minute details, I want to give you an overview of what
Graal and Truffle actually do, and why it&amp;#39;s interesting to use them at all.&lt;/p&gt;
&lt;p&gt;Why build your language on Graal/Truffle? The one line answer is that you can
make it go fast, easily. The more dynamic / abstract your language, the more it
will benefit from the optimizations offered by Truffle: writing your own
advanced JIT compiler is not a light undertaking.&lt;/p&gt;
&lt;p&gt;You will also get other goodness, such as debugging support for free. There are
two good articles that should sell you on the technology: &lt;a href=&quot;https://blog.plan99.net/graal-truffle-134d8f28fb69&quot;&gt;&amp;quot;Graal &amp;amp; Truffle&amp;quot; by
Mike Hearn&lt;/a&gt; (hype check: not every promise is entirely realized, but it&amp;#39;s
in the works) and &lt;a href=&quot;https://medium.com/graalvm/graalvm-ten-things-12d9111f307d&quot;&gt;&amp;quot;Top 10 Things To Do With GraalVM&amp;quot; by Chris Seaton&lt;/a&gt;
(hype check: this is all real).&lt;/p&gt;
&lt;p&gt;As for how the technology actually works, the best explanation for Graal is
probably Chris Seaton&amp;#39;s talk &lt;a href=&quot;https://chrisseaton.com/truffleruby/jokerconf17/&quot;&gt;Understanding How GraalVM Works&lt;/a&gt; (a
full transcript with inline slides is available!). This is deep technical
content, clearly explained. It doesn&amp;#39;t cover Truffle, however.&lt;/p&gt;
&lt;p&gt;Here is my own broad overview of how Graal/Truffle makes your code fast:&lt;/p&gt;
&lt;p&gt;When using the Truffle API, Graal (which includes a &lt;a href=&quot;https://en.wikipedia.org/wiki/Just-in-time_compilation&quot;&gt;just in time (JIT)
compiler&lt;/a&gt;) will compile &lt;a href=&quot;https://en.wikipedia.org/wiki/Hot_spot_(computer_programming)&quot;&gt;hot parts of the AST&lt;/a&gt; to efficient
machine code. In particular, the hot parts of the AST will be &lt;a href=&quot;https://en.wikipedia.org/wiki/Partial_evaluation&quot;&gt;partially
evaluated&lt;/a&gt;. While this has multiple performance implications, it will most
notably avoid a lot of the &lt;a href=&quot;https://dzone.com/articles/too-fast-too-megamorphic-what&quot;&gt;megamorphic call overhead&lt;/a&gt; that an AST
interpreter would normally suffer from.&lt;/p&gt;
&lt;p&gt;The Truffle API also offers other ways to improve performance. Most notably is
its reliance on &lt;a href=&quot;https://en.wikipedia.org/wiki/Inline_caching#Polymorphic_inline_caching&quot;&gt;(polymorphic) inline caching&lt;/a&gt;. In a program, there are
regularities that are hard or impossible to detect statically. For instance,
maybe a function works on different kinds of values, but in practice only ever
receives a single kind. Truffle lets you specify &lt;em&gt;specializations&lt;/em&gt; which handle
a subset of all cases that are allowed to occur. Then, at runtime, Truffle will
generate optimized code only for the specializations that were actually
encountered in practice, and insert a check to verify that we do not encounter
other cases (in which case we need to throw away the compiled code and start the
process again). This is called &lt;em&gt;inline caching&lt;/em&gt; because we cache the encountered
specializations in the AST. We&amp;#39;ll cover the specialization mechanism in detail
in this article.&lt;/p&gt;
&lt;p&gt;The typical use case for inline caching is method lookup: virtual method calls
have a tendency to always be done on an instance of the same class. Using inline
caching, we can store this class, and specialize the code for it, which avoids
repeating the costly method lookup. However, Truffle&amp;#39;s caches are very flexible,
and it&amp;#39;s possible to specialize on arbitrary conditions — depending on what the
language implementer specifies. See &lt;a href=&quot;https://www.graalvm.org/truffle/javadoc/com/oracle/truffle/api/dsl/Specialization.html&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;https://www.graalvm.org/truffle/javadoc/com/oracle/truffle/api/dsl/Cached.html&quot;&gt;there&lt;/a&gt;
for more details.&lt;/p&gt;
&lt;p&gt;The Truffle API also offers more advanced utilities to optimize your language,
such as &lt;a href=&quot;https://www.graalvm.org/truffle/javadoc/com/oracle/truffle/api/CompilerDirectives.CompilationFinal.html&quot;&gt;compilation final values&lt;/a&gt; and &lt;a href=&quot;https://www.graalvm.org/truffle/javadoc/com/oracle/truffle/api/Assumption.html&quot;&gt;assumptions&lt;/a&gt; (in particular, those two
help improve the result of partial evaluation). We won&amp;#39;t talk about these here,
but maybe some other time.&lt;/p&gt;
&lt;h2 id=&quot;setup&quot;&gt;Setup&lt;/h2&gt;
&lt;p&gt;To follow along with the examples, you&amp;#39;ll need to install GraalVM. In
particular, I used the 20.1.0 version with OpenJDK 11. You can &lt;a href=&quot;https://www.graalvm.org/downloads/&quot;&gt;download it
here&lt;/a&gt;. Then follow the &lt;a href=&quot;https://www.graalvm.org/getting-started/&quot;&gt;installation instructions&lt;/a&gt;. You can also add
it as a SDK to your IDE, usually you&amp;#39;ll need to point it to the Java home
directory (the thing you&amp;#39;re told to put in &lt;code&gt;JAVA_HOME&lt;/code&gt; in the installation
instructions).&lt;/p&gt;
&lt;p&gt;Note that if you&amp;#39;re on macOS and you&amp;#39;re hit with an error that reads
&lt;code&gt;“graalvm-ce-java11-20.1.0” cannot be opened because the developer cannot be verified.&lt;/code&gt; or &lt;code&gt;macOS cannot verify that this app is free from malware.&lt;/code&gt; when
trying one of GraalVM&amp;#39;s binaries (&lt;code&gt;java&lt;/code&gt;, &lt;code&gt;javac&lt;/code&gt;, ...), you can fix the
situation by running:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;sudo xattr -dr com.apple.quarantine graalvm-ce-java11-20.1.0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(Replace &lt;code&gt;graalvm-ce-java11-20.1.0&lt;/code&gt; by the path to the root directory of your
GraalVM installation.)&lt;/p&gt;
&lt;p&gt;You&amp;#39;ll also need the Ideal Graph Visualizer (IGV), (again, I used version 20.1.0
for Java 11). IGV is normally part of the (paid/licensed) Entreprise Edition of
GraalVM, but you can evaluate it for free. Be aware that, in principle, the code
you evaluate IGV on cannot be used commercially (&lt;a href=&quot;https://en.wikipedia.org/wiki/IANAL&quot;&gt;IANAL etc&lt;/a&gt;). You can &lt;a href=&quot;https://www.oracle.com/downloads/graalvm-downloads.html&quot;&gt;download
it here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Same as before, if you get an error on macOS, you might need to run the
following (where &lt;code&gt;idealgraphvisualizer&lt;/code&gt; is the directory where you extracted
IGV):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;sudo xattr -dr com.apple.quarantine idealgraphvisualizer&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I&amp;#39;m going to walk through my whole language example, showing you the code as I
go. However, the entire source is avaiable &lt;a href=&quot;https://github.com/norswap/truffle-tutorial&quot;&gt;on this Github repository&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let&amp;#39;s get started. We&amp;#39;ll use Maven to build the project and pull in the
dependencies. To install it, just use your package manager of choice, or follow
the &lt;a href=&quot;http://maven.apache.org/install.html&quot;&gt;install instruction&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here is the Maven config file for the project (&lt;a href=&quot;https://github.com/norswap/truffle-tutorial/blob/master/pom.xml&quot;&gt;&lt;code&gt;pom.xml&lt;/code&gt; 🔗&lt;/a&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;project xmlns=&amp;quot;http://maven.apache.org/POM/4.0.0&amp;quot; xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xsi:schemaLocation=&amp;quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&amp;quot;&amp;gt;
    &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;
    &amp;lt;groupId&amp;gt;com.norswap&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;exni&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.0.0-SNAPSHOT&amp;lt;/version&amp;gt;
    &amp;lt;build&amp;gt;
        &amp;lt;sourceDirectory&amp;gt;src&amp;lt;/sourceDirectory&amp;gt;
        &amp;lt;plugins&amp;gt;
            &amp;lt;plugin&amp;gt;
                &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
                &amp;lt;artifactId&amp;gt;maven-compiler-plugin&amp;lt;/artifactId&amp;gt;
                &amp;lt;version&amp;gt;3.8.1&amp;lt;/version&amp;gt;
                &amp;lt;configuration&amp;gt;
                    &amp;lt;source&amp;gt;11&amp;lt;/source&amp;gt;
                    &amp;lt;target&amp;gt;11&amp;lt;/target&amp;gt;
                &amp;lt;/configuration&amp;gt;
            &amp;lt;/plugin&amp;gt;
        &amp;lt;/plugins&amp;gt;
    &amp;lt;/build&amp;gt;
    &amp;lt;properties&amp;gt;
        &amp;lt;project.build.sourceEncoding&amp;gt;UTF-8&amp;lt;/project.build.sourceEncoding&amp;gt;
        &amp;lt;graalvm.version&amp;gt;20.1.0&amp;lt;/graalvm.version&amp;gt;
    &amp;lt;/properties&amp;gt;
    &amp;lt;dependencies&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.graalvm.truffle&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;truffle-api&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${graalvm.version}&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.graalvm.truffle&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;truffle-dsl-processor&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${graalvm.version}&amp;lt;/version&amp;gt;
            &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt;
        &amp;lt;/dependency&amp;gt;
    &amp;lt;/dependencies&amp;gt;
&amp;lt;/project&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There&amp;#39;s nothing incredibly tricky going on here. Sources go to &lt;code&gt;src&lt;/code&gt;
(&lt;a href=&quot;https://maven.apache.org/guides/introduction/introduction-to-the-standard-directory-layout.html&quot;&gt;&lt;code&gt;src/main/java&lt;/code&gt;&lt;/a&gt; can burn in hell), we&amp;#39;re using Java version 11, and pulling down
the Truffle API and Truffle annotation processor version 20.1.0.&lt;/p&gt;
&lt;p&gt;I&amp;#39;m calling this project &lt;code&gt;exni&lt;/code&gt; for &amp;quot;ex nihilo&amp;quot;. I&amp;#39;m cute like that.&lt;/p&gt;
&lt;h2 id=&quot;building-the-ast&quot;&gt;Building the AST&lt;/h2&gt;
&lt;p&gt;The first thing we need to do is to build a simple AST to be evaluated.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/norswap/truffle-tutorial/blob/master/src/exni/nodes/ExniNode.java&quot;&gt;&lt;code&gt;ExniNode.java&lt;/code&gt; 🔗&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;package exni.nodes;

import com.oracle.truffle.api.frame.VirtualFrame;
import com.oracle.truffle.api.nodes.Node;

public abstract class ExniNode extends Node
{
    /** main execute method */
    public abstract Object execute (VirtualFrame frame);
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We&amp;#39;ll use this as the parent class for all our AST nodes. It inherits from the
Truffle &lt;a href=&quot;https://www.graalvm.org/truffle/javadoc/com/oracle/truffle/api/nodes/Node.html&quot;&gt;&lt;code&gt;Node&lt;/code&gt;&lt;/a&gt; class itself. The &lt;code&gt;execute&lt;/code&gt; method evaluates the node and returns
a result of type &lt;code&gt;Object&lt;/code&gt;. It takes a &lt;a href=&quot;https://www.graalvm.org/truffle/javadoc/com/oracle/truffle/api/frame/VirtualFrame.html&quot;&gt;&lt;code&gt;VirtualFrame&lt;/code&gt;&lt;/a&gt;, which represents a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Call_stack&quot;&gt;stack frame&lt;/a&gt;: that of the &amp;quot;function&amp;quot; (or equivalent concept) to which the node belongs.&lt;/p&gt;
&lt;p&gt;The name &lt;code&gt;execute&lt;/code&gt; is special in Truffle. Truffle is aware of node methods whose
name start with &lt;code&gt;execute&lt;/code&gt; and will call the appropriate one when it needs to
evaluate the children of another AST node. Which &lt;code&gt;execute&lt;/code&gt; method is appropriate
depends on the requested value type (&lt;code&gt;Object&lt;/code&gt; being the most general, and
therefore always applicable) as well as available parameters.&lt;/p&gt;
&lt;p&gt;Let&amp;#39;s move to the simplest node implementation possible:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/norswap/truffle-tutorial/blob/master/src/exni/nodes/IntLiteralNode.java&quot;&gt;&lt;code&gt;IntLiteralNode.java&lt;/code&gt; 🔗&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;package exni.nodes;

import com.oracle.truffle.api.frame.VirtualFrame;

public final class IntLiteralNode extends ExniNode
{
    public final long value;

    public IntLiteralNode (long value) {
        this.value = value;
    }

    @Override public Object execute (VirtualFrame frame) {
        return value;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This node represents an integer literal that appears in source code. We
implement the &lt;code&gt;execute&lt;/code&gt; method to simply return that number.&lt;/p&gt;
&lt;p&gt;Now, a node for the &lt;code&gt;+&lt;/code&gt; operator:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/norswap/truffle-tutorial/blob/master/src/exni/nodes/AddNode.java&quot;&gt;&lt;code&gt;AddNode.java&lt;/code&gt; 🔗&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;package exni.nodes;

import com.oracle.truffle.api.dsl.Fallback;
import com.oracle.truffle.api.dsl.NodeChild;
import com.oracle.truffle.api.dsl.Specialization;
import exni.ExniException;

@NodeChild(&amp;quot;left&amp;quot;)
@NodeChild(&amp;quot;right&amp;quot;)
public abstract class AddNode extends ExniNode
{
    public static AddNode create (ExniNode left, ExniNode right) {
        return AddNodeGen.create(left, right);
    }

    @Specialization protected long addLongs (long left, long right) {
        return left + right;
    }

    @Specialization String addStrings (String left, String right) {
        return left + right;
    }

    @Fallback protected void typeError (Object left, Object right) {
        throw new ExniException(&amp;quot;type error: args must be two longs, or two strings&amp;quot;, this);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The two &lt;code&gt;NodeChild&lt;/code&gt; annotations define children nodes of this AST node. By
default, these have the type of the superclass (&lt;code&gt;ExniNode&lt;/code&gt; in this case), but
it&amp;#39;s also possible to specify the type explicitly with the &lt;code&gt;type&lt;/code&gt; annotation
element.&lt;/p&gt;
&lt;p&gt;This class is abstract, but Truffle will generate a concrete implementation for
us, named &lt;code&gt;AddNodeGen&lt;/code&gt;. If you load &lt;a href=&quot;exni-github&quot;&gt;the project&lt;/a&gt; in your IDE, you
can navigate there easily (import the Maven project and build first). We will
examine this class shortly.&lt;/p&gt;
&lt;p&gt;The logic of the class is implemented using the &lt;em&gt;specialization system&lt;/em&gt;. Instead
of overriding the &lt;code&gt;execute&lt;/code&gt; method(s), we mark a series of method with the
&lt;a href=&quot;https://www.graalvm.org/truffle/javadoc/com/oracle/truffle/api/dsl/Specialization.html&quot;&gt;&lt;code&gt;Specialization&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://www.graalvm.org/truffle/javadoc/com/oracle/truffle/api/dsl/Fallback.html&quot;&gt;&lt;code&gt;Fallback&lt;/code&gt;&lt;/a&gt; annotations.&lt;/p&gt;
&lt;p&gt;The idea is that when the node is executed, Truffle will pick the first matching
specialization and run it. There are two criteria used when matching
specializations: the type of its parameters and additionals conditions specified
by the &lt;a href=&quot;https://www.graalvm.org/truffle/javadoc/com/oracle/truffle/api/dsl/Specialization.html#guards--&quot;&gt;&lt;code&gt;guards&lt;/code&gt;&lt;/a&gt; annotation element.&lt;/p&gt;
&lt;p&gt;This is a very simple node, so it only has two specializations and a fallback,
one for when both values are &lt;code&gt;long&lt;/code&gt; (Truffle will automatically perform unboxing
whenever required), and one for when both values are strings. Additionally,
there is a fallback specialization. A fallback specialization is a
specialization that will always match when (and only when) no other
specialization does. In this case, we just throw an type error.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The implementation of &lt;code&gt;ExniException&lt;/code&gt; is irrelevant, excepted that all
exceptions thrown during guest language execution must implement
&lt;a href=&quot;https://www.graalvm.org/truffle/javadoc/com/oracle/truffle/api/TruffleException.html&quot;&gt;&lt;code&gt;TruffleException&lt;/code&gt;&lt;/a&gt; — excepted those exceptions that represent errors in the
implementation itself.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Note that the names of the specialization methods are irrelevant, they could
have been anything, including the same name (as long as it generates distinct
method overloads, of course).&lt;/p&gt;
&lt;h2 id=&quot;specializations-under-the-hood&quot;&gt;Specializations: Under The Hood&lt;/h2&gt;
&lt;p&gt;Let&amp;#39;s look at the class generated by Truffle to implement our abstract
&lt;code&gt;AddNode&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://gist.github.com/norswap/a235123a4aa3a236fbdeb653ea389362#file-addnodegen-java&quot;&gt;&lt;code&gt;AddNodeGen 🔗&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;package exni.nodes;
// ...

@GeneratedBy(AddNode.class)
public final class AddNodeGen extends AddNode {

    @Child private ExniNode left_;
    @Child private ExniNode right_;
    @CompilationFinal private int state_;

    private AddNodeGen(ExniNode left, ExniNode right) {
        this.left_ = left;
        this.right_ = right;
    }

    @Override
    public Object execute(VirtualFrame frameValue) {
        int state = state_;
        Object leftValue_ = this.left_.execute(frameValue);
        Object rightValue_ = this.right_.execute(frameValue);
        if ((state &amp;amp; 0b1) != 0 /* is-active addLongs(long, long) */ &amp;amp;&amp;amp; leftValue_ instanceof Long) {
            long leftValue__ = (long) leftValue_;
            if (rightValue_ instanceof Long) {
                long rightValue__ = (long) rightValue_;
                return addLongs(leftValue__, rightValue__);
            }
        }
        if ((state &amp;amp; 0b10) != 0 /* is-active addStrings(String, String) */ &amp;amp;&amp;amp; leftValue_ instanceof String) {
            String leftValue__ = (String) leftValue_;
            if (rightValue_ instanceof String) {
                String rightValue__ = (String) rightValue_;
                return addStrings(leftValue__, rightValue__);
            }
        }
        CompilerDirectives.transferToInterpreterAndInvalidate();
        return executeAndSpecialize(leftValue_, rightValue_);
    }

    private Object executeAndSpecialize(Object leftValue, Object rightValue) {
        int state = state_;
        if (leftValue instanceof Long) {
            long leftValue_ = (long) leftValue;
            if (rightValue instanceof Long) {
                long rightValue_ = (long) rightValue;
                this.state_ = state = state | 0b1 /* add-active addLongs(long, long) */;
                return addLongs(leftValue_, rightValue_);
            }
        }
        if (leftValue instanceof String) {
            String leftValue_ = (String) leftValue;
            if (rightValue instanceof String) {
                String rightValue_ = (String) rightValue;
                this.state_ = state = state | 0b10 /* add-active addStrings(String, String) */;
                return addStrings(leftValue_, rightValue_);
            }
        }
        this.state_ = state = state | 0b100 /* add-active typeError(Object, Object) */;
        typeError(leftValue, rightValue);
        return null;
    }

    @Override
    public NodeCost getCost() { /* ... */ }

    private static boolean fallbackGuard_(int state, Object leftValue, Object rightValue) {
        if (((state &amp;amp; 0b1)) == 0 /* is-not-active addLongs(long, long) */ &amp;amp;&amp;amp; leftValue instanceof Long &amp;amp;&amp;amp; rightValue instanceof Long) {
            return false;
        }
        if (((state &amp;amp; 0b10)) == 0 /* is-not-active addStrings(String, String) */ &amp;amp;&amp;amp; leftValue instanceof String &amp;amp;&amp;amp; rightValue instanceof String) {
            return false;
        }
        return true;
    }

    public static AddNode create(ExniNode left, ExniNode right) {
        return new AddNodeGen(left, right);
    }

}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It has three fields. The first two were generated by the &lt;a href=&quot;https://www.graalvm.org/truffle/javadoc/com/oracle/truffle/api/dsl/NodeChild.html&quot;&gt;&lt;code&gt;NodeChild&lt;/code&gt;&lt;/a&gt;
annotations. There is also a &lt;code&gt;create&lt;/code&gt; method at the bottom, which can be used to
get create an instance of &lt;code&gt;AddNode&lt;/code&gt; if given its two children. The third field
(&lt;code&gt;state_&lt;/code&gt;) keeps track of what specializations are active for the node.&lt;/p&gt;
&lt;p&gt;Active specializations? What does that even mean? Well, whenever a
specialization is first used, it becomes active. One node can have multiple
specializations active at the same time. A new node starts with no active
specializations.&lt;/p&gt;
&lt;p&gt;For instance, let&amp;#39;s imagine a small syntax and a dummy program for our language:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def add(x, y)
    return x + y; // AddNode 1

add(1, 2)
add(&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;)
1 + 2 // AddNode 2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I have used comments to mark the two locations where an &lt;code&gt;AddNode&lt;/code&gt; is generated.
&lt;code&gt;AddNode 1&lt;/code&gt; will see both integer and string values, and so both specializations
will become active. &lt;code&gt;AddNode 2&lt;/code&gt;, on the other hand, will only ever see integers.&lt;/p&gt;
&lt;p&gt;But why do we need to distinguish between active and inactive specializations?
Doing so helps Graal&amp;#39;s JIT compiler generate better compiled code. Whenever the
node has to be JIT-compiled, Graal will only emit machine code for the
specializations that have been activated. Having less possibilities has multiple
benefits. First there are less cases to check. Second, the reduced set of
possibilities may enable further optimizations (especially when there is only a
single active specialization). Finally, all else being equal, shorter code is
generally faster (more efficient cache utilisation).&lt;/p&gt;
&lt;p&gt;This raises one more question: what happens if, after generating compiled code,
we encounter a case covered by a specialization that hasn&amp;#39;t been activated yet?
In that case, the compiled code is invalidated, and the new specialization is
activated. New compiled code may subsequently be generated.&lt;/p&gt;
&lt;p&gt;Let&amp;#39;s go back to the code. Truffle has automatically generated the &lt;code&gt;execute&lt;/code&gt;
method that was left abstract (in &lt;code&gt;ExniNode&lt;/code&gt;, &lt;code&gt;AddNode&lt;/code&gt;&amp;#39;s superclass). It has
also generated an &lt;code&gt;executeAndSpecialize&lt;/code&gt; method that &lt;code&gt;execute&lt;/code&gt; calls. Relating
to our previous discussion, &lt;code&gt;execute&lt;/code&gt; should be understood as running the active
specializations, while &lt;code&gt;executeAndSpecialize&lt;/code&gt; is responsible to activate new
specializations.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;execute&lt;/code&gt; starts by executing the two children nodes. Then, if our &lt;code&gt;addLongs&lt;/code&gt;
specialization is active, and if both resulting values can be cast to &lt;code&gt;long&lt;/code&gt;, it
calls &lt;code&gt;AddNode#addLongs&lt;/code&gt;. Otherwise, if our &lt;code&gt;addStrings&lt;/code&gt; specialization is
active and if the values can be cast to &lt;code&gt;String&lt;/code&gt;, it calls &lt;code&gt;AddNode#addStrings&lt;/code&gt;.
If that&amp;#39;s not possible either, it calls
&lt;code&gt;CompilerDirectives.transferToInterpreterAndInvalidate()&lt;/code&gt; and then
&lt;code&gt;executeAndSpecialize&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;executeAndSpecialize&lt;/code&gt; does almost the same thing, but does not check for
activated specializations, only for the specific conditions in which a
specialization may apply. Additionally, it activates any specialization it
calls. Finally, if none of the two specialization matches, it calls our fallback
specialization &lt;code&gt;AddNode#typeError&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now you might think from this that fallback specializations may never be
activated. This is not so. The only reason that &lt;code&gt;typeError&lt;/code&gt; does not appear in
&lt;code&gt;execute&lt;/code&gt; is that its return type (&lt;code&gt;void&lt;/code&gt;) is incompatible with that of
&lt;code&gt;execute&lt;/code&gt; (&lt;code&gt;Object&lt;/code&gt;). If we wanted the specialization to be activable, we could
change its return type to &lt;code&gt;Object&lt;/code&gt;. Since it is an extraordinary error
condition, I chose not do that here. I encourage you to try it and check that
the generated code changed accordingly.&lt;/p&gt;
&lt;p&gt;Note you can observe similar effects when multiple &lt;code&gt;execute&lt;/code&gt; methods have
different type parameters. The &lt;code&gt;execute&lt;/code&gt; methods will be JIT-compiled
separately, which can lead to more efficient code for the method whose signature
is more restrictive (as it doesn&amp;#39;t have to include the activated specializations
that don&amp;#39;t match the signature).&lt;/p&gt;
&lt;h3 id=&quot;how-the-magic-happens&quot;&gt;How the Magic Happens&lt;/h3&gt;
&lt;p&gt;Why is the logic split between &lt;code&gt;execute&lt;/code&gt; and &lt;code&gt;executeAndSpecialize&lt;/code&gt;? It&amp;#39;s
because &lt;code&gt;execute&lt;/code&gt; is what will become JIT-compiled. All its calls to
specializations are guarded by conditions on &lt;code&gt;_state&lt;/code&gt;. &lt;code&gt;_state&lt;/code&gt; is marked with
&lt;code&gt;CompilationFinal&lt;/code&gt; annotation. This annotation tells Truffle to consider that
the field is effectively final for partial evaluation and compilation purposes.
In practice, this means that calls to inactive specializations will be pruned
from the compiled code, hence only retaining the active specializations. It&amp;#39;s
exactly what we want to get the benefits I outlined a bit before.&lt;/p&gt;
&lt;p&gt;This also explains why specialization activation is relegated to
&lt;code&gt;executeAndSpecialize&lt;/code&gt;. That method will never be compiled, because it is only
called from the &lt;code&gt;execute&lt;/code&gt; methods, and always preceded by a call to
&lt;a href=&quot;https://www.graalvm.org/truffle/javadoc/com/oracle/truffle/api/CompilerDirectives.html#transferToInterpreterAndInvalidate--&quot;&gt;&lt;code&gt;CompilerDirectives.transferToInterpreterAndInvalidate&lt;/code&gt;&lt;/a&gt; which tells Truffle to
invalidate the current compiled code for the method! Truffle is aware of this,
and so will never inline &lt;code&gt;executeAndSpecialized&lt;/code&gt; into &lt;code&gt;execute&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;That &lt;a href=&quot;https://www.graalvm.org/truffle/javadoc/com/oracle/truffle/api/CompilerDirectives.html#transferToInterpreterAndInvalidate--&quot;&gt;&lt;code&gt;CompilerDirectives.transferToInterpreterAndInvalidate&lt;/code&gt;&lt;/a&gt; call is also
what ensures that we discard the current compiled code when a new specialization
becomes active.&lt;/p&gt;
&lt;p&gt;You can learn more about the specialization system in &lt;a href=&quot;https://www.researchgate.net/publication/333510523_Truffle_DSL_A_DSL_for_Building_Self-Optimizing_AST_Interpreters&quot;&gt;Christian Hummer&amp;#39;s master
thesis&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;running&quot;&gt;Running&lt;/h2&gt;
&lt;p&gt;Okay, so we have our grand addition/concatenation node. Let&amp;#39;s actually use it.
Here is our main class:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/norswap/truffle-tutorial/blob/master/src/exni/ExniMain.java&quot;&gt;&lt;code&gt;ExniMain&lt;/code&gt; 🔗&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;package exni;

import com.oracle.truffle.api.Truffle;
import exni.nodes.AddNode;
import exni.nodes.IntLiteralNode;
import exni.nodes.ExniRootNode;

public abstract class ExniMain
{
    public static void main (String[] args)
    {
        var add = AddNode.create(new IntLiteralNode(1), new IntLiteralNode(2));
        var root = new ExniRootNode(add);
        var target = Truffle.getRuntime().createCallTarget(root);

        // Uncomment this in order to use a CountNode instead of an AddNode.
        // target = Truffle.getRuntime().createCallTarget(new MainNode(new CountNode()));

        System.out.println(target.call());

        // Uncomment this in order to force the compilation of the node.
        // while (true) target.call();
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Don&amp;#39;t worry about the &amp;quot;uncomment&amp;quot; bit. We&amp;#39;ll get to those later.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We construct our &lt;code&gt;AddNode&lt;/code&gt; as expected, but then we wrap it into a
&lt;code&gt;ExniRootNode&lt;/code&gt;. This is an implementation of the Truffle &lt;a href=&quot;https://www.graalvm.org/truffle/javadoc/com/oracle/truffle/api/nodes/RootNode.html&quot;&gt;&lt;code&gt;RootNode&lt;/code&gt;&lt;/a&gt; class. In
Truffle, runnable nodes belong to a tree with &lt;a href=&quot;https://www.graalvm.org/truffle/javadoc/com/oracle/truffle/api/nodes/RootNode.html&quot;&gt;&lt;code&gt;RootNode&lt;/code&gt;&lt;/a&gt; at the root. For
instance, there is typically one &lt;a href=&quot;https://www.graalvm.org/truffle/javadoc/com/oracle/truffle/api/nodes/RootNode.html&quot;&gt;&lt;code&gt;RootNode&lt;/code&gt;&lt;/a&gt; per function definition.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.graalvm.org/truffle/javadoc/com/oracle/truffle/api/nodes/RootNode.html&quot;&gt;&lt;code&gt;RootNode&lt;/code&gt;&lt;/a&gt; also holds a reference to a &lt;a href=&quot;https://www.graalvm.org/truffle/javadoc/com/oracle/truffle/api/frame/FrameDescriptor.html&quot;&gt;&lt;code&gt;FrameDescriptor&lt;/code&gt;&lt;/a&gt; that describes the
parameters expected by the node (in the case of a function definition: the
function&amp;#39;s parameters). We do not need to specify this here, since our addition
expression does not take parameters.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ExniRootNode&lt;/code&gt; doesn&amp;#39;t do anything fancy by itself: it just wraps an &lt;code&gt;ExniNode&lt;/code&gt;,
and extends &lt;a href=&quot;https://www.graalvm.org/truffle/javadoc/com/oracle/truffle/api/nodes/RootNode.html&quot;&gt;&lt;code&gt;RootNode&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/norswap/truffle-tutorial/blob/master/src/exni/ExniRootNode.java&quot;&gt;&lt;code&gt;ExniRootNode&lt;/code&gt; 🔗&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;package exni.nodes;

import com.oracle.truffle.api.frame.VirtualFrame;
import com.oracle.truffle.api.nodes.RootNode;

public final class ExniRootNode extends RootNode
{
    @SuppressWarnings(&amp;quot;FieldMayBeFinal&amp;quot;)
    private @Child ExniNode root;

    public ExniRootNode(ExniNode root) {
        super(null);
        this.root = root;
    }

    @Override public Object execute (VirtualFrame frame) {
        return root.execute(frame);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The next step is to call
&lt;a href=&quot;https://www.graalvm.org/truffle/javadoc/com/oracle/truffle/api/TruffleRuntime.html#createCallTarget-com.oracle.truffle.api.nodes.RootNode-&quot;&gt;&lt;code&gt;Truffle.getRuntime().createCallTarget(root)&lt;/code&gt;&lt;/a&gt; to create a
&lt;a href=&quot;https://www.graalvm.org/truffle/javadoc/com/oracle/truffle/api/CallTarget.html&quot;&gt;&lt;code&gt;CallTarget&lt;/code&gt;&lt;/a&gt;. The call target represents something you can call (in this case,
it&amp;#39;s our add expression).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note that in general, expressions don&amp;#39;t have an associated &lt;a href=&quot;https://www.graalvm.org/truffle/javadoc/com/oracle/truffle/api/CallTarget.html&quot;&gt;&lt;code&gt;CallTarget&lt;/code&gt;&lt;/a&gt;. It&amp;#39;s
typically reserved for callable things like functions and methods. But our
language does not have those, and we need a &lt;a href=&quot;https://www.graalvm.org/truffle/javadoc/com/oracle/truffle/api/CallTarget.html&quot;&gt;&lt;code&gt;CallTarget&lt;/code&gt;&lt;/a&gt; to run the code.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We use a &lt;a href=&quot;https://www.graalvm.org/truffle/javadoc/com/oracle/truffle/api/CallTarget.html&quot;&gt;&lt;code&gt;CallTarget&lt;/code&gt;&lt;/a&gt; instead of call the node&amp;#39;s &lt;code&gt;execute&lt;/code&gt; method directly so
that Truffle may perform some bookkeeping on the call. In particular, the
&lt;a href=&quot;https://www.graalvm.org/truffle/javadoc/com/oracle/truffle/api/CallTarget.html&quot;&gt;&lt;code&gt;CallTarget&lt;/code&gt;&lt;/a&gt; records how often our node is called, so that Truffle may decide
when to JIT-compile it. It can also be used for &lt;a href=&quot;https://en.wikipedia.org/wiki/Instrumentation_(computer_programming)&quot;&gt;instrumentation&lt;/a&gt;. Finally, it
wires up the &lt;a href=&quot;https://www.graalvm.org/truffle/javadoc/com/oracle/truffle/api/CallTarget.html&quot;&gt;&lt;code&gt;CallTarget&lt;/code&gt;&lt;/a&gt; so that it will automatically create an object
representing a &lt;a href=&quot;https://en.wikipedia.org/wiki/Call_stack&quot;&gt;stack frame&lt;/a&gt; (i.e. the &lt;a href=&quot;https://www.graalvm.org/truffle/javadoc/com/oracle/truffle/api/frame/VirtualFrame.html&quot;&gt;&lt;code&gt;VirtualFrame&lt;/code&gt;&lt;/a&gt; argument taken by our
various &lt;code&gt;execute&lt;/code&gt; methods) when called.&lt;/p&gt;
&lt;p&gt;All that is left to do is to invoke &lt;a href=&quot;https://www.graalvm.org/truffle/javadoc/com/oracle/truffle/api/CallTarget.html&quot;&gt;&lt;code&gt;CallTarget#call&lt;/code&gt;&lt;/a&gt; and print
the result.&lt;/p&gt;
&lt;p&gt;To run this after building with Maven, you can use the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;M2=$HOME/.m2/repository
java \
    -Dtruffle.class.path.append=target/classes \
    --add-exports org.graalvm.truffle/com.oracle.truffle.api.nodes=ALL-UNNAMED  \
    --add-exports org.graalvm.truffle/com.oracle.truffle.api=ALL-UNNAMED \
    -classpath target/classes:$M2/org/graalvm/truffle/truffle-api/20.1.0/truffle-api-20.1.0.jar:$M2/org/graalvm/sdk/graal-sdk/20.1.0/graal-sdk-20.1.0.jar \
    exni.ExniMain&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A couple practical points:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;you need to be at the repository&amp;#39;s root&lt;/li&gt;
&lt;li&gt;&lt;code&gt;java&lt;/code&gt; must point to the GraalVM version&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$M2&lt;/code&gt; should point to your m2 repository (by default it&amp;#39;s &lt;code&gt;$HOME/.m2/repository&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;You can configure your IDE to run this instead, you&amp;#39;ll just need to specify
the main class and all the other non-classpath arguments.&lt;/li&gt;
&lt;li&gt;Don&amp;#39;t forget to run this with GraalVM&amp;#39;s &lt;code&gt;java&lt;/code&gt;! It will run with other &lt;code&gt;java&lt;/code&gt;
but Truffle nodes won&amp;#39;t be compiled specially.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Lo and behold, your console should print the glorious number 3!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Extra technical note: The &lt;code&gt;add-exports&lt;/code&gt; arguments are needed because classes
in &lt;code&gt;com.oracle.truffle.api&lt;/code&gt; need to be loaded via Truffle&amp;#39;s own class loader.
The &lt;code&gt;add-exports&lt;/code&gt; arguments ensure that the class loader associated with the
module is used. Similarly, defining &lt;code&gt;truffle.class.path.append&lt;/code&gt; enables that
classloader to find our own node classes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;igv&quot;&gt;IGV&lt;/h2&gt;
&lt;p&gt;To run IGV, simply run the &lt;code&gt;bin/idealgraphvisualizer&lt;/code&gt; in your IGV install
directory (just wherever you unzipped the downloaded archive). This will tie up
the console in which IGV is run — if you it to run in the background, I
recommend using &lt;a href=&quot;https://www.man7.org/linux/man-pages/man1/screen.1.html&quot;&gt;&lt;code&gt;screen&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;screen -dm -S igv bin/idealgraphvisualizer
screen -r igv # to attach to the screen&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next you&amp;#39;ll need to configure your java run command in order for it to generate
compilation graphs and send them to IGV. You can achieve this by adding the
following flags to your Java command: &lt;code&gt;-Dgraal.Dump=Truffle -Dgraal.PrintGraph=Network&lt;/code&gt;. Full command:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;M2=$HOME/.m2/repository
java \
    -Dtruffle.class.path.append=target/classes \
    --add-exports org.graalvm.truffle/com.oracle.truffle.api.nodes=ALL-UNNAMED  \
    --add-exports org.graalvm.truffle/com.oracle.truffle.api=ALL-UNNAMED \
    -classpath target/classes:$M2/org/graalvm/truffle/truffle-api/20.1.0/truffle-api-20.1.0.jar:$M2/org/graalvm/sdk/graal-sdk/20.1.0/graal-sdk-20.1.0.jar \
    -Dgraal.Dump=Truffle \
    -Dgraal.PrintGraph=Network \
    exni.ExniMain&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;Dump=Truffle&lt;/code&gt; option means to only dump graphs relevant to analysing
Truffle&amp;#39;s performance (for instance it won&amp;#39;t include graphs for compiled Java
code that is not related to Truffle).&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;PrintGraph=Network&lt;/code&gt; option means to send the graphs directly to a running
IGV over the network. If you omit this, it will default to dumping the graphs as
files in &lt;code&gt;graal_dumps/&lt;/code&gt; in the working directory, and you can open those later
from IGV.&lt;/p&gt;
&lt;p&gt;These flags are documented on Graal&amp;#39;s git repository &lt;a href=&quot;https://github.com/oracle/graal/tree/master/compiler/src/org.graalvm.compiler.debug/src/org/graalvm/compiler/debug/doc-files&quot;&gt;here
(master)&lt;/a&gt; (&lt;a href=&quot;https://github.com/oracle/graal/tree/32cd3db91fe4a141ee3016ac18b0f4cc9f51e447/compiler/src/org.graalvm.compiler.debug/src/org/graalvm/compiler/debug/doc-files&quot;&gt;future-proof(er), commit-specific
link&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;IGV lets you inspect the result of JIT compilation. Our code so far is very
simple, and does not trigger JIT compilation. However, we can trigger
compilation simply by calling our &lt;a href=&quot;https://www.graalvm.org/truffle/javadoc/com/oracle/truffle/api/CallTarget.html&quot;&gt;&lt;code&gt;CallTarget&lt;/code&gt;&lt;/a&gt; withing an infinite loop
(&lt;code&gt;while (true) target.call();&lt;/code&gt;).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Remember that we said that &lt;a href=&quot;https://www.graalvm.org/truffle/javadoc/com/oracle/truffle/api/CallTarget.html&quot;&gt;&lt;code&gt;CallTarget&lt;/code&gt;&lt;/a&gt; counts calls in order to decide what
to optimize? You will now see it&amp;#39;s true: calling inside a loop causes the
counter to cross the threshold for compilation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Run it, you should now see something like this in IGV:&lt;/p&gt;
&lt;img class=&quot;centered&quot; src=&quot;left_sidebar.png&quot; width=&quot;400rem&quot; /&gt;

&lt;p&gt;If you select the AST graph, you&amp;#39;ll see this, which is exactly the node hiearchy
we build in our main class:&lt;/p&gt;
&lt;img class=&quot;centered&quot; src=&quot;ast_sum.png&quot; width=&quot;300rem&quot; /&gt;

&lt;p&gt;The &amp;quot;call tree&amp;quot; graph is not interesting because our nodes do not contain a
guest language function call (our language doesn&amp;#39;t even have those).&lt;/p&gt;
&lt;p&gt;The &amp;quot;Graal Graphs&amp;quot; section contains graphs at various stages of the compilation
process. We&amp;#39;ll be particularly interested in &amp;quot;Before phase Lowering&amp;quot; which
contains the graphs obtained after all of Truffle&amp;#39;s optimizations have been run
(GraalMV still run generic optimizations after this however). In this case,
you&amp;#39;ll see this:&lt;/p&gt;
&lt;img class=&quot;centered&quot; src=&quot;graph_sum_truffle.png&quot; width=&quot;500rem&quot; /&gt;

&lt;p&gt;Which is to say, almost nothing! The compiler was smart and the addition of two
constants was completely optimized away. Do you see that small &lt;code&gt;62&lt;/code&gt; node? &lt;code&gt;C(3)&lt;/code&gt;
means &amp;quot;constant with value 3&amp;quot; and that&amp;#39;s the result of our addition. At this
stage, it still needs to &lt;a href=&quot;https://docs.oracle.com/javase/tutorial/java/data/autoboxing.html&quot;&gt;box&lt;/a&gt; that value though. But if you look to any further
graph, you&amp;#39;ll see:&lt;/p&gt;
&lt;img class=&quot;centered&quot; src=&quot;graph_sum_further.png&quot; width=&quot;400rem&quot; /&gt;

&lt;p&gt;The result of the boxing operation is a constant instance of &lt;code&gt;Long&lt;/code&gt;, so we can
eliminate the boxing operation.&lt;/p&gt;
&lt;p&gt;You may wonder why this does not get optimized even further. After all, the
return value is never used. The answer is that the logic that calls the call
target (&lt;code&gt;target.call()&lt;/code&gt;) is quite complex and therefore cannot be optimized
away. You can actually get to see the graph for that by replacing the
&lt;code&gt;-Dgraal.Dump=Truffle&lt;/code&gt; flag by &lt;code&gt;-Dgraal.Dump=:1&lt;/code&gt; and looking for the code of the
main method (&lt;code&gt;exni.ExniMain.main&lt;/code&gt;). You can also move the loop to another method
if you want to get rid of the part of the graph that corresponds to the
construction of the AST. It looks &lt;a href=&quot;graph_main.png&quot;&gt;something like this&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So we can note that calling the call target within a loop is not a great idea.
We could probably see that our &lt;code&gt;AddNode&lt;/code&gt; gets optimized away completely if we
implemented a loop in the guest language itself.&lt;/p&gt;
&lt;h2 id=&quot;a-slightly-harder-graph-and-what-does-it-mean-anyway&quot;&gt;A slightly harder graph, and what does it mean, anyway?&lt;/h2&gt;
&lt;p&gt;Okay, so let&amp;#39;s see some actual graphs. We&amp;#39;ll create a new node that doesn&amp;#39;t
optimize away. This node will be a counter that updates a public field:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/norswap/truffle-tutorial/blob/master/src/exni/nodes/CountNode.java&quot;&gt;&lt;code&gt;CountNode&lt;/code&gt; 🔗&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;package exni.nodes;

import com.oracle.truffle.api.frame.VirtualFrame;

public final class CountNode extends ExniNode {

    public long counter;

    @Override public Object execute (VirtualFrame frame) {
        return counter++;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Even though we&amp;#39;ll never read the counter, the field is public and the compiler
cannot prove that it won&amp;#39;t be read, so it has to be dutifully incremented.&lt;/p&gt;
&lt;p&gt;If you modify the main method to run this node instead, and go to the graphs
(still &amp;quot;Before phase Lowering&amp;quot;) — click for full size version:&lt;/p&gt;
&lt;a href=&quot;graph_counter_full.png&quot;&gt;
&lt;img class=&quot;centered&quot; src=&quot;graph_counter_full.png&quot; /&gt;
&lt;/a&gt;

&lt;p&gt;First off, all the green stuff is &amp;quot;state&amp;quot;. I&amp;#39;ll be honest: I&amp;#39;m not too sure what
&amp;quot;state&amp;quot; is supposed to be in general, but in this case (and in conjunction with
grey boxes), it shows you a couple of the methods invoked to start the node&amp;#39;s
execution, as well as relevant parameter to these methods. In particular, node
21 shows an instance of Truffle&amp;#39;s internal &lt;a href=&quot;https://github.com/oracle/graal/blob/7980245f92d00f4b6c38688d46f0a586ec397fde/compiler/src/org.graalvm.compiler.truffle.runtime/src/org/graalvm/compiler/truffle/runtime/FrameWithoutBoxing.java&quot;&gt;&lt;code&gt;FrameWithoutBoxing&lt;/code&gt;&lt;/a&gt; class, and all
the &lt;code&gt;VirtualArray&lt;/code&gt; nodes to the right of that are its fields.&lt;/p&gt;
&lt;p&gt;Anyway, you can hide the state in the &amp;quot;Filters&amp;quot; panel on the right in IGV. You
could also hit &amp;quot;Remove floating&amp;quot; to get rid of the grey boxes, but I want to
keep node 44 (+). Instead I&amp;#39;ve hidden the other grey boxes manually, and we&amp;#39;re
left with this:&lt;/p&gt;
&lt;img class=&quot;centered&quot; src=&quot;graph_counter_simple.png&quot; width=&quot;550rem&quot; /&gt;

&lt;p&gt;This is fairly simple to understand: our node loads the &lt;code&gt;counter&lt;/code&gt; field in node
41, and adds 1 to it in node 44. Notice how one operand comes from the blue
line, while the other is given by the small box 43 on top: &lt;code&gt;C(1) i64&lt;/code&gt; means that
the operand is the constant 1, which is a 64-bits integer. We store the result
of this operation back into the field in node 42. Notice how node 41 has a line
going to node 44 and one line going to node 72 (Box), which is the return value?
That&amp;#39;s because we used &lt;code&gt;return counter++&lt;/code&gt; (and not &lt;code&gt;return ++counter&lt;/code&gt;): the node
evaluates to the pre-incremented value!&lt;/p&gt;
&lt;p&gt;From this explanation, you can see that blue lines represent data flow: a blue
line going down means the data coming out of the higher node is being used by
the lower node. There is also a thick red line: that represents control flow,
i.e. it determines what operations happen before which others.&lt;/p&gt;
&lt;p&gt;We&amp;#39;ve barely scratched the surface of Graal graphs here (we haven&amp;#39;t even talked
about conditionals and loops). If you want to know more, I highly recommend
these two writeups by Chris Seaton (the first one is essentially a much shorter
teaser version of the second one, which you really ought to read in full if
you&amp;#39;re going to work with IGV):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://engineering.shopify.com/blogs/engineering/understanding-programs-using-graphs&quot;&gt;Understanding Programs Using Graphs @ Shopify Engineering&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://chrisseaton.com/truffleruby/basic-graal-graphs/&quot;&gt;Understanding Basic Graal Graphs @ chrisseaton.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;going-further&quot;&gt;Going Further&lt;/h2&gt;
&lt;p&gt;That&amp;#39;s it for today! I have some extra material that was cut from this article
that I might rework and post in a couple weeks. Namely, it covers how to set up
the boilerplate to create a &amp;quot;real&amp;quot; &lt;a href=&quot;https://www.graalvm.org/truffle/javadoc/com/oracle/truffle/api/TruffleLanguage.html&quot;&gt;Truffle guest language&lt;/a&gt; and how to implement
loops inside the guest language.&lt;/p&gt;
&lt;p&gt;If you want to learn more about Graal &amp;amp; Truffle, here a few pointers on where to
find information &amp;amp; documentation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://www.researchgate.net/publication/333510523_Truffle_DSL_A_DSL_for_Building_Self-Optimizing_AST_Interpreters&quot;&gt;Christian Hummer&amp;#39;s master thesis&lt;/a&gt; document the Truffle DSL,
i.e. how to actually use Truffle. It&amp;#39;s very clearly written and if you&amp;#39;re
going to jump on the Truffle bandwagon, you really ought to read chapters 2
and 3. This will give you a good understanding of the principles behind the
Truffle DSL.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://www.graalvm.org/truffle/javadoc/&quot;&gt;The Truffle Javadoc&lt;/a&gt; is very decent, but it will rarely tell you the &lt;em&gt;why&lt;/em&gt; of
things.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;a href=&quot;https://github.com/graalvm/simplelanguage&quot;&gt;SimpleLanguage example&lt;/a&gt; is a full language implemented with a lot of
comments as an example of how things should generally be done in Truffle. It&amp;#39;s
the main ressource on how to actually do the advanced stuff.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I also encourage you to experiment with Truffle directly (showing you how was
the whole point of this article)!&lt;/p&gt;
&lt;p&gt;In closing, I want to thank my amazing and talented colleagues at Oracle, who
patiently answer my many questions, and in particular Benoit Daloze — for
teaching me most of what I know about Truffle, Christian Humer — for always
helping wherever Truffle is concerned, and Boris Spasojevic for supplying very
helpful feedback on the present article.&lt;/p&gt;
&lt;link href=&#39;https://cdnjs.cloudflare.com/ajax/libs/prism/1.19.0/themes/prism-tomorrow.min.css&#39; rel=&#39;stylesheet&#39; /&gt;
&lt;script
src=&#39;https://cdnjs.cloudflare.com/ajax/libs/prism/1.19.0/components/prism-core.min.js&#39;&gt;&lt;/script&gt;
&lt;script
src=&#39;https://cdnjs.cloudflare.com/ajax/libs/prism/1.19.0/plugins/autoloader/prism-autoloader.min.js&#39;&gt;&lt;/script&gt;
      </description>
      <pubDate>2020-07-17T22:00:00.000Z</pubDate>
      <link>http://norswap.com/truffle-tutorial</link>
      <guid isPermaLink="true">http://norswap.com/truffle-tutorial</guid>
    </item>
    <item>
      <title>Animes, Shows &amp; Movies Reviews 6</title>
      <description>
&lt;p&gt;Previously: &lt;a href=&quot;/every-anime/&quot;&gt;One&lt;/a&gt; / &lt;a href=&quot;/more-anime/&quot;&gt;Two&lt;/a&gt; / &lt;a href=&quot;/even-more-anime/&quot;&gt;Three&lt;/a&gt; / &lt;a href=&quot;/reviews-4&quot;&gt;Four&lt;/a&gt; / &lt;a href=&quot;/reviews-5&quot;&gt;Five&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;violet-evergarden&quot;&gt;Violet Evergarden&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;violet-evergarden.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;I knew this one by name, though I didn&amp;#39;t know what it was about. We
binged-watched in two sittings with a few friends.&lt;/p&gt;
&lt;p&gt;I think the word I dimly recall being associated with Violet Evergarden is
&amp;quot;poetry&amp;quot;. And I can understand it. It looks georgeous, and it&amp;#39;s also sentimental
without being overly hokey.&lt;/p&gt;
&lt;p&gt;I think the show&amp;#39;s perspective is uniquely interesting: we following a character
(Violet) that starts of as completely emotionally imature (in the sense of
wholly unaware what emotions are, and how they affect her and others) in a
journey of emotional discovery.&lt;/p&gt;
&lt;p&gt;Very recommended.&lt;/p&gt;
&lt;h2 id=&quot;my-hero-academia-season-4&quot;&gt;My Hero Academia Season 4&lt;/h2&gt;
&lt;p&gt;Previously: &lt;a href=&quot;/even-more-anime/#my-hero-academia-season-3&quot;&gt;Season 3&lt;/a&gt;, &lt;a href=&quot;/more-anime/#my-hero-academia&quot;&gt;Season 1 &amp;amp; 2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;My Hero Academia has been one of my favorite anime, and it&amp;#39;s still great.&lt;/p&gt;
&lt;p&gt;That being said, this season is perhaps the weakest so far (but still strong in
absolute terms).&lt;/p&gt;
&lt;p&gt;My criticism here is that the arcs are too drawn out, some episodes almost
bordering on being fillers. Not reeeeally, but what I mean is this: One of Hero
Academia&amp;#39;s strength is being relatively earnest, and clear with its message.
It&amp;#39;s going to tell you what it wants to say. In this season, they did that, but
also — or so it felt to me — occasionally beat you over the head with it. I&amp;#39;m
notably thinking of a whole episode where the whole point is to affirm how much
certain characters care about saving another character, in a way that isn&amp;#39;t very
interesting. And generally, things could have been condensed more.&lt;/p&gt;
&lt;p&gt;Interestingly, this criticism holds both for the first longer, &amp;quot;heavier&amp;quot; arc,
and for the second shorter more light-hearted arc.&lt;/p&gt;
&lt;h2 id=&quot;idinvaded&quot;&gt;ID:Invaded&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;id-invaded.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;ID: Invaded was a really good surprise of a show. It&amp;#39;s part murder-mystery, part
Matrix/Inception-style techno-thriller, part revenge flick.&lt;/p&gt;
&lt;p&gt;What I appreciated most about the show is how it dealt out information
sparingly, keeping you guessing at the nature of things, without ever being
confusing, nor relying on information dumps. The pacing is also pretty good.&lt;/p&gt;
&lt;p&gt;It&amp;#39;s even (at least on one occasion) really touching. And with only 13 episodes,
it&amp;#39;s damn short. A perfect binge-watching candidate.&lt;/p&gt;
&lt;h2 id=&quot;stranger-things-season-3&quot;&gt;Stranger Things, Season 3&lt;/h2&gt;
&lt;p&gt;I had watched season 1 and season 2 (but not reviewed them on here, I only did
anime back then), and enjoyed them a lot.&lt;/p&gt;
&lt;p&gt;Season 3 is, mostly, more of the same. The narrative structure is very similar.
I maybe felt that it took a bit too long to set things up, to get to the point
where our heroes are actually active rather than clueless. But maybe it was like
that for previous seasons too and I forgot.&lt;/p&gt;
&lt;p&gt;The ending redeems whatever slack the start may have. And what a sucker punch of
an ending that is! I&amp;#39;m glad season 4 has been confirmed and some things are
hinted at, otherwise I&amp;#39;d have been outraged that the series end on that note.&lt;/p&gt;
&lt;p&gt;I was also mildly annoyed at a lot of conflict between character without much
stakes or interestingness going on — that&amp;#39;s not the wholesomeness I look for in
Stranger Things!&lt;/p&gt;
&lt;p&gt;Also: good humanization of a certain character towards the end.&lt;/p&gt;
&lt;p&gt;Big like on Maya Hawke&amp;#39;s new character, Robin. Steve Harrington remains my
favorite character. The parts with them, Dustin and Erica are the best of the
season in my opinion.&lt;/p&gt;
&lt;h2 id=&quot;infinite-dendrogram&quot;&gt;Infinite Dendrogram&lt;/h2&gt;
&lt;p&gt;Here&amp;#39;s another watch-to-pass-time isekai. Honestly, it ended up better than I
expected, without never really approaching greatness.&lt;/p&gt;
&lt;p&gt;There&amp;#39;s something off about the thing. An artificiality that makes you think
that this is the thing that someones setting out to write an isekai could come
up with. I wish I was articulate enough to point out why the anime doesn&amp;#39;t quite
work and is hard to take completely at face value. It feels like the trappings
of the genre get in the way of telling a good story.&lt;/p&gt;
&lt;p&gt;That being said, it&amp;#39;s not bad. I finished it and enjoyed the ride for what it
was. From the initial reaction I&amp;#39;ve seen online, I thing this anime will largely
be overlooked and under-rated.&lt;/p&gt;
&lt;p&gt;For me, this is certainly not worse than &lt;a href=&quot;/even-more-anime/#that-time-i-got-reincarnated-as-a-slime&quot;&gt;Slime&lt;/a&gt;, and in many ways, better.&lt;/p&gt;
&lt;p&gt;I&amp;#39;ll have more to say about this in the review for &lt;a href=&quot;#samurai-champloo&quot;&gt;Samurai Champloo&lt;/a&gt;, but if
there&amp;#39;s at least something good you can say about Infinite Dendrogram is that it
takes itself earnestly.&lt;/p&gt;
&lt;h2 id=&quot;castlevania-all-3-seasons&quot;&gt;Castlevania (all 3 seasons)&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;castlevania.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Castlevania, the Netflix-produced American anime, was on the edge of my
consciousness for a long time, though I didn&amp;#39;t what it was in substance.&lt;/p&gt;
&lt;p&gt;With the hype of season 3, I finally gave it a go.&lt;/p&gt;
&lt;p&gt;First shock: it&amp;#39;s much shorter than one would expect. Season 1 is almost a
pilot, only 4 episodes. Season 2 has 8 and season 3 has 10.&lt;/p&gt;
&lt;p&gt;Content-wise, I must concede it&amp;#39;s pretty good, though I think it fell short of
what it could have been.&lt;/p&gt;
&lt;p&gt;Without spoiling, there are events in season 2 happening much too soon in my
opinion. The shows does play fast and loose with its premise, and I think that&amp;#39;s
a shame.&lt;/p&gt;
&lt;p&gt;In season 3, I thought one of the narrative arcs of the season (following a
certain vampire) was completely useless and ex machina. I liked the entailed
character development, but there were better, subtler, more believable ways to
get there. Fortunately it&amp;#39;s also very short in screen time (which is perhaps
also one of the reason it fails to work).&lt;/p&gt;
&lt;p&gt;All in all, we are presented with a compelling universe, interesting characters,
some mysteries to unravel. I wouldn&amp;#39;t add it to the hallowed list of the
must-watch, but it&amp;#39;s a solid recommendation from me.&lt;/p&gt;
&lt;p&gt;As a side note, this is an American production, but I watched it with the
Japanese dub. I found the English dub rather awkward. I noticed the fact it&amp;#39;s a
dub (and the lipsync is thus off) a lot, whereas I don&amp;#39;t in Japanese (simply due
to being unfamiliar with the language).&lt;/p&gt;
&lt;h2 id=&quot;samurai-champloo&quot;&gt;Samurai Champloo&lt;/h2&gt;
&lt;p&gt;This is something I started binge watched with friends. I think we saw 7 or 8
episodes. After that I decided not to continue watching it, I had other things
that needed doing and I wasn&amp;#39;t hyped.&lt;/p&gt;
&lt;p&gt;This anime is directed by Shinichiro Watanabe (*), as his next anime after &lt;a href=&quot;/every-anime/#cowboy-bebop&quot;&gt;Cowboy
Bebop&lt;/a&gt;. Excerpting my own &lt;a href=&quot;/every-anime/#cowboy-bebop&quot;&gt;review&lt;/a&gt; of it:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;My impression of Cowboy Bebop is that it&amp;#39;s an impressive anime — one with
mature themes and a real reflection — which happens to be buried in a heap of
goofy filler.
[...]
Still, if you manage to power through the initial filler (I almost didn&amp;#39;t), I
don&amp;#39;t think you&amp;#39;ll regret watching Cowboy Bebop.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;(*) Interestingly, Watanabe is also the director of &lt;a href=&quot;/reviews-4/#carole--tuesday&quot;&gt;Carole &amp;amp; Tuesday&lt;/a&gt;, another
thing I dropped though I found it to be quite good.&lt;/p&gt;
&lt;p&gt;Having only watched 7 episodes of Samurai Champloo, it&amp;#39;s hard to say whether it
would be the same or not. The &lt;em&gt;goofy&lt;/em&gt; filler is there all right, and in spades.
Would the story take a turn for the serious towards the end? I must imagine it
would. But I&amp;#39;m not incredibly motivated to continue right now.&lt;/p&gt;
&lt;p&gt;One issue with my non-motivation, besides the uncertainty that it gets better,
is the characters. They&amp;#39;re not bad, but Mugen and Jin lack the aesthetic, almost
mystical, charism of Spike Spiegel. &amp;quot;Brave girl&amp;quot; Fuu is less interseting than
emotionally-stunted vixen Faye Valentine (though I do expect the rest of the
series has character development for her in relation with this sunflower
samurai).&lt;/p&gt;
&lt;p&gt;I think I&amp;#39;ll be back to Samurais Champloo, if only by curiosity. It does feel
like I&amp;#39;ve got better things to watch right now however.&lt;/p&gt;
&lt;p&gt;Samurai Champloo is an interesting data point on my own taste. Clearly, I&amp;#39;m not
into &amp;quot;goofy&amp;quot; story. In both Cowboy Bebop and this, the characters are somewhat
loveable, and somewhat dumb, and can&amp;#39;t help but to keep losing. The problem is,
I don&amp;#39;t find that very funny, and it makes for a poor story. It always circles
back to the same spot, nothing is learned, so character development is absent.
The stakes never move. Cowboy Bebop has a poignant story (and ending), but it
gets condensed in maybe four or five episodes worth of content, in a 26-episodes
series (some of those other episodes are genuinely good too though).&lt;/p&gt;
&lt;p&gt;But additionally, I think what bothers me greatly is that it makes me feel like
the story does not take itself seriously. It&amp;#39;s not earnest. It&amp;#39;s an unfunny
comedy, when what I want out of it is a thriller, an epic or a drama.&lt;/p&gt;
&lt;p&gt;I guess I&amp;#39;m a sucker for earnestness on the other hand. It&amp;#39;s why I watched the
whole of &lt;a href=&quot;#infinite-dendrogram&quot;&gt;Infinite Dendrogram&lt;/a&gt;. Objectively, it&amp;#39;s of lesser quality than Samurai
Champloo. But story never fails to take itself seriously (something that I think
many people will count as a mark &lt;em&gt;against&lt;/em&gt; it). But in all honesty, if Samurai
Champloo was airing weekly, I probably would have watched it all too.&lt;/p&gt;
&lt;h2 id=&quot;mo-dao-zu-shi&quot;&gt;Mo Dao Zu Shi&lt;/h2&gt;
&lt;p&gt;This is a popular Chinese anime (a &lt;em&gt;donghua&lt;/em&gt;) — honestly, the only dongua I&amp;#39;ve
ever heard about. Plot:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;As the grandmaster who founded the Demonic Sect, Wei Wuxian roamed the world
in his wanton ways, hated by millions for the crimes he was accused. In the
end, he was stabbed in the back by his sworn brother Jiang Cheng and killed by
the vicious ghosts he controlled when the cultivation clans attacked his
stronghold to kill him. After 13 years, he is summoned into the body of a
lunatic called Mo Xuanyu, who was rejected by his clan and bullied by his
family, therefore sacrificing his own body to Wei Wuxian so he could avenge
him. He&amp;#39;ll soon meet a famous cultivator from his past, Lan Wangji.&lt;/p&gt;
&lt;p&gt;They will soon face a series of events that will take them to discover the
truth behind the tragic events that led to the death of many people and Wei
Wuxian himself.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I dropped it after 2 episodes.&lt;/p&gt;
&lt;p&gt;From the &lt;a href=&quot;https://www.youtube.com/watch?v=imUXzLeU__Y&quot;&gt;trailer&lt;/a&gt; it looked a stylish &lt;a href=&quot;/reviews-4/#demon-slayer&quot;&gt;Demon Slayer&lt;/a&gt; but more
earnest and noir. In reality, the first two episodes are mostly comprised of
characters bickering. It&amp;#39;s 30 minutes for an episode, so that&amp;#39;s 1 hours of
mostly bickering and some cool combat mixed in... and absolutely no reason to
care about the story whatsoever.&lt;/p&gt;
&lt;p&gt;Really though. In one hour of play time, the main character gets reincarnated
(that takes all of two minutes) then we are not given a single reason to really
care about him, or Lan Wangji which is the only other character of consequence
introduced. No real mystery is implanted either other than what is delivered as
backstory exposition: Wei Wuxian was this warlock master, who apparently did
some horrible things. What? Why?&lt;/p&gt;
&lt;p&gt;My second huge gripe is this: If Wei Wuxian was this badass warlock king, then
why as he is reincarnated in the body of a boy, does he take a definitely
un-badass, and in fact boyish personality? I guess that&amp;#39;s the only harp on the
mystery we get: how did someone with an apparently lame and kind disposition (he
does take some pain to save people) do such horrible things?&lt;/p&gt;
&lt;p&gt;But yeah. It wasn&amp;#39;t enjoyable viewing, and I was given no reason to keep
watching, so I dropped it.&lt;/p&gt;
&lt;p&gt;I guess the real mystery is why it has a 8.5 rating &lt;a href=&quot;https://myanimelist.net/anime/37208/Mo_Dao_Zu_Shi&quot;&gt;on
MyAnimeList&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I did parse the reviews in search for something that wasn&amp;#39;t a 10 or a 9 to find
some nuanced explanation but didn&amp;#39;t found anything that explains it. The 10 and
9 review mostly praise the aesthetics.&lt;/p&gt;
&lt;p&gt;I found this however, which I&amp;#39;ll confirm:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;On the other hand, the characters are less impressive. One of my biggest pet
peeves is same facing. Same facing is when an artist consistently draws the
same kind of face and the only way to distinguish them apart is from their
hair or clothing. MDZS is very guilty of this. I couldn&amp;#39;t tell anyone apart
because all the people from the same sect wore the same clothes and everyone
has the same face.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;rezero-frozen-bonds&quot;&gt;Re:Zero Frozen Bonds&lt;/h2&gt;
&lt;p&gt;Previously: &lt;a href=&quot;/even-more-anime/#rezero&quot;&gt;Season 1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A big coronavirus-induced disappointement this season was that Re:Zero season 2
was pushed back. However there is an OVA that came out at the end of 2019. Since
I really like Re:Zero, it was a no brainer to watch that.&lt;/p&gt;
&lt;p&gt;And ... it kinda sucks. I&amp;#39;m sure real fans will enjoy learning about the tiny
sliver of backstory we&amp;#39;re given here. But as a story on its own, it&amp;#39;s nothing to
write home about.&lt;/p&gt;
&lt;p&gt;Seriously, the thing just lacks &lt;em&gt;interestingness&lt;/em&gt;. The plot is basically (1)
people are afraid of Emilia, who is an unreasonably nice person, (2) an ennemy
appear, it has to be defeated.&lt;/p&gt;
&lt;p&gt;If you want the backstory without wasting your time, go read a summary.&lt;/p&gt;
&lt;h2 id=&quot;konosuba-legend-of-crimson&quot;&gt;Konosuba!: Legend of Crimson&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;konosuba-crimson.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;This is a movie (I had to look it up, but the main distinction seems to be that
a movie airs in theaters, while an OVA does not), this time for &lt;a href=&quot;/every-anime/#konosuba&quot;&gt;Konosuba!&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This was very unlike the Re:Zero OVA, and I enjoyed it a lot.&lt;/p&gt;
&lt;p&gt;It&amp;#39;s a spot on transcription of the show&amp;#39;s humor and feeling to a movie. It&amp;#39;s
also paced like a good &lt;em&gt;movie&lt;/em&gt;: it avoids the trap of feeling like a drawn-out
episode, or like something that would breathe better as a longer string of
episodes.&lt;/p&gt;
&lt;p&gt;Frankly, I&amp;#39;d forgotten how much I enjoyed Konosuba!, so this was really a nice
surprise.&lt;/p&gt;
&lt;p&gt;The franchise really has a unique texture to it. It&amp;#39;s quite funny in its own
unique way, but — despite the show never being overtly sentimal — it&amp;#39;s also warm
and fuzzy, when the characters reveal their underlying camaraderie in-between
bouts of bickering.&lt;/p&gt;
&lt;p&gt;Funnily enough, Konosuba! has a lot of the things I said I disliked in other
shows: bickering (&lt;a href=&quot;#mo-dao-zu-shi&quot;&gt;Mo Dao Zu Shi&lt;/a&gt;), the protagonist being loveable/dumb losers
(&lt;a href=&quot;#samurai-champloo&quot;&gt;Samurai Champloo&lt;/a&gt;), though crucially, in Konosuba! they do ultimately win and
it can be argued they do progress, albeit slowly).&lt;/p&gt;
&lt;p&gt;I guess the lesson is that everything can work under the right frame, and that
describing aesthetics and &amp;quot;texture&amp;quot; is hard.&lt;/p&gt;
&lt;p&gt;I realize I haven&amp;#39;t said much about the movie itself, but really it&amp;#39;s Konosuba!.
If you enjoy the show, you&amp;#39;ll enjoy the movie just as much. Very recommended.&lt;/p&gt;
&lt;h2 id=&quot;promare&quot;&gt;Promare&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;promare.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;As a fan of &lt;a href=&quot;/more-anime/#kill-la-kill&quot;&gt;Kill la Kill&lt;/a&gt; and &lt;a href=&quot;/every-anime/#gurren-lagann&quot;&gt;Gurren Lagann&lt;/a&gt;, I was naturally excited to see a
new movie featuring the same director and head writer (Hiroyuki Imaishi &amp;amp; Kazuki
Nakashima), especially since Promare is blatantly a riff on the same genre.
Heck, the main character (&lt;a href=&quot;https://www.google.be/search?q=promare+galo&amp;amp;tbm=isch&quot;&gt;Galo&lt;/a&gt;) even looks like Gurren Lagann&amp;#39;s &lt;a href=&quot;https://www.google.be/search?q=gurren+lagann+kamina&amp;amp;tbm=isch&quot;&gt;Kamina&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In fact, the ressemblance is so deep, it sometimes feels like an hommage.
Battles fuelled by fighting spirit, huge mechas that change, battle that
escalate to planetary scale, etc.&lt;/p&gt;
&lt;p&gt;While &lt;em&gt;ostensibly&lt;/em&gt; the movie is somewhat closer to Gurren Lagann, it found it
actually closer to Kill la Kill in terms of direction.&lt;/p&gt;
&lt;p&gt;It&amp;#39;s constant action that almost never lets up, ultra-fast pacing with no
useless downtime. This is a lot like Kill la Kill. Gurren Lagann is a story that
breathes more. Characters have more complex emotions that are given screen time
to be explored more in depth. Relationships are subtler.&lt;/p&gt;
&lt;p&gt;But all this would be complex to render in a movie, and still make a good action
flick. I reviewed the first &lt;a href=&quot;/even-more-anime/#gurren-lagann-the-movie-childhoods-end&quot;&gt;Gurren Lagann movie&lt;/a&gt;, which is an attempt to
condense the TV show to two movies. My conclusion was that it was an abject
failure — you&amp;#39;re rushed through emotional developments in a way that is simply
not satisfying or meaningful enough.&lt;/p&gt;
&lt;p&gt;But Promare is free of these shackles, and I found it to be &lt;em&gt;extremely&lt;/em&gt;
satisfying. It works as a movie version of the genre (in this it is a bit like
the &lt;a href=&quot;#konosuba-legend-of-crimson&quot;&gt;Konosuba! OVA&lt;/a&gt;). This is not to say that the characters don&amp;#39;t have emotions,
but they are less complex and fraught, and can be satisfyingly handled in a bit
less than two hours.&lt;/p&gt;
&lt;p&gt;The movie is not totally a re-thread. In particular, it has its own distinctive
visual style, that revolves around geometric shapes. Cubes feature prominently,
for instance ice-cube shooting guns. There are a lot of triangles as well, for a
distinctive low-polygon aesthetic on some effects (e.g. lightning). There is
also a very tasteful use of pastel colors that I personally found delightful.&lt;/p&gt;
&lt;p&gt;Still, it is &lt;em&gt;mostly&lt;/em&gt; a re-thread. If there is one bad thing to be said about
Promare, it&amp;#39;s that it avoids the risk of proposing something new, which would
really have made it stand out.&lt;/p&gt;
&lt;p&gt;If you&amp;#39;ve liked Gurren Lagann or Kill la Kill, go watch Promare. If you don&amp;#39;t
know about either, go watch one of those things and figure out if it&amp;#39;s your
style.&lt;/p&gt;
&lt;h2 id=&quot;lucky-star&quot;&gt;Lucky Star&lt;/h2&gt;
&lt;p&gt;Lucky Star was another anime we were slated to binge, but I couldn&amp;#39;t be there on
the first day. I tried to catch up on my own, but two episodes in, it was clear
it wasn&amp;#39;t for me.&lt;/p&gt;
&lt;p&gt;I think the first episode must be the most boring piece of anime I&amp;#39;ve seen in a
very long time.&lt;/p&gt;
&lt;p&gt;They just talk, about whatever (&amp;quot;how to eat a chocolate scone&amp;quot; is at topic that
takes up a big chunk of the time in that first episode).&lt;/p&gt;
&lt;p&gt;The second episode is a bit better, at least you get the passage of time for the
semblance of plot (it&amp;#39;s holiday and they have to do homework, and then it&amp;#39;s
school).&lt;/p&gt;
&lt;p&gt;Slice of life is not my big thing, but I can get into it. I liked &lt;a href=&quot;/more-anime/#k-on&quot;&gt;K-On!&lt;/a&gt; a lot.
But here it&amp;#39;s hard. There&amp;#39;s little sense of direction, absolutely no stakes or
tension. It&amp;#39;s not particularly funny (though I get how it could get one to
smile). I don&amp;#39;t begrudge the art style, but it&amp;#39;s not particularly pretty, and
it&amp;#39;s obviously low-budget. I&amp;#39;m not very observant of these things, but it struck
even me that there were no animated/detailed backgrounds in many scenes. Not
that I matters much, but the animation is not the show redeeming&amp;#39;s quality.&lt;/p&gt;
&lt;p&gt;At the same time, I kinda get it. In a way totally, utterly &lt;strong&gt;different&lt;/strong&gt; from
Samurai Champloo, I get how people can like this. There&amp;#39;s something about the
humor / aesthetic that&amp;#39;s kinda nice? If only they could manage to interest me at
all.&lt;/p&gt;
&lt;h2 id=&quot;westworld-season-3&quot;&gt;Westworld Season 3&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;westworld-3.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;(Note: I won&amp;#39;t spoil the events of the season below, but I will give some
meta-spoiler that will let you know what twists to expect or not. If you don&amp;#39;t
want that, now is the time to exit.)&lt;/p&gt;
&lt;p&gt;Since I&amp;#39;ve not reviewed the first two seaons, let&amp;#39;s recap first.&lt;/p&gt;
&lt;p&gt;I think Westworld season 1 is the best thing that&amp;#39;s ever been on TV. Ever. I
think it&amp;#39;s superior to most movies and TV shows. Maybe something like The Lord
of The Rings, The Dark Knight, or the first season of The Wire comes really
close.&lt;/p&gt;
&lt;p&gt;It&amp;#39;s a delightful story, there are (many) delightful mysteries that you can&amp;#39;t
help but get caught thinking about. The story is compelling, the acting is on
point, the dialogue is incredible. It&amp;#39;s one of the only things I&amp;#39;ve rewatched in
recent years, and it was still supremely enjoyable on second viewing, even
knowing all the twists.&lt;/p&gt;
&lt;p&gt;So yeah. Season 2 though? Not so good. It has the twists and mysteries, but
sometimes they feel a bit gratuitous, like they thought &amp;quot;Westworld is narrative
twists&amp;quot; and contorted the story to add them. Some of the main characters&amp;#39; arcs
are uninteresting, or downright bad (coughs &lt;em&gt;Shogun World&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;It&amp;#39;s still pretty good though, but a far cry from season 1. Just your &amp;quot;normal
better-than-average TV&amp;quot;.&lt;/p&gt;
&lt;p&gt;One sublime hit, one miss. Season 3 is the time of reckoning. Was season 2 a
fluke?&lt;/p&gt;
&lt;p&gt;Sadly it wasn&amp;#39;t. The more I think about season 3, the less I like it.&lt;/p&gt;
&lt;p&gt;It starts strong though, I&amp;#39;d say I was pretty excited until the middle, then I
progressively started feeling, with increased certainty with each passing
episode, that the conclusion would be sub-par.&lt;/p&gt;
&lt;p&gt;The premise is interesting. Aaron Paul&amp;#39;s character is very intriguing. All these
new elements appear and you&amp;#39;re like &amp;quot;hoo, mysteries, twists&amp;quot;. Well except there
is no real twist. Well there is a &amp;quot;twist&amp;quot; towards the middle of the season, but
no narrative-reframing timeline-magic everything-falls-into-place twist like in
the first two seasons. Yet there were signs... inconsistencies, small details in
a show that is known for its attention to details. I&amp;#39;ve seen people on the
&lt;a href=&quot;https://old.reddit.com/r/westworld/&quot;&gt;subreddit&lt;/a&gt; complain: have they become sloppy, or are they just messing with us?&lt;/p&gt;
&lt;p&gt;I enjoyed where it could have gone, but at the end of the season, there is no
part of it that I liked in its entirety. One of the main character arc is
completely useless, serving only to remind us that the character exists. Mostly
a waste of good screen time. One of the other main character&amp;#39;s motivation are
dumb and tired, a re-thread from previous seasons, and should have been put to
rest.&lt;/p&gt;
&lt;p&gt;And yet another of the main characters has big plans. But obviously the
showrunners have trouble writing a good (or even, clear) plan for a character
with unlimited resources.&lt;/p&gt;
&lt;p&gt;The mastermind played by Vincent Cassel was completely milquetoast compared to
Anthony Hopkins&amp;#39; Ford in the first season. The only thing interesting about him
was his biography, but nothing he says is particularly fascinating, the way
Ford&amp;#39;s monologues are.&lt;/p&gt;
&lt;p&gt;Besides twists and narratives, the big victim of the season is dialogue. There&amp;#39;s
too little of it, and it&amp;#39;s not good enough. Season 1 had all these philosophical
motifs that it would call often echo in dialogue, even if it wasn&amp;#39;t a deep
philosophical conversation (of which there were some too). Instead we get a lot
of action. Westworld is not so great with action. It&amp;#39;s not incompetent, but it&amp;#39;s
not impressive, and it&amp;#39;s often dumb in season 2 and 3 (a lot of shooting and not
a whole lot of hitting, some pretty heavy plot armors).&lt;/p&gt;
&lt;p&gt;All around, it felt like a dumbing down of the show. I wonder if this was
voluntary or not. Season 2 did worse than season 1. As it turns out, season 3
did significantly worse than season 2 (but as it is, it&amp;#39;s still HBO&amp;#39;s most
popular show this year).&lt;/p&gt;
&lt;p&gt;Let&amp;#39;s end on a positive note though, the show looks really good. The locations
(often in Singapore) are excellent, and the work on the environment (lighting,
etc) is really nice. Some of the shots (in particular those that frame the
characters agains the background locations) are very nice.&lt;/p&gt;
&lt;p&gt;It also sounds pretty damn nice. I especially like the choice of &lt;a href=&quot;https://www.tunefind.com/show/westworld/season-3&quot;&gt;insert songs&lt;/a&gt;,
from &amp;quot;Common People&amp;quot; to &amp;quot;Brain Damage&amp;quot;. On the more cinematic side, Ramin
Djawadi is &lt;a href=&quot;https://www.youtube.com/playlist?list=PLRWL5oACOrQV_R9cQKGxZBJ3w0lIjJTom&quot;&gt;still rocking&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Though it ain&amp;#39;t great, it&amp;#39;s also not that bad. I&amp;#39;m invested enough that I&amp;#39;ll
probably watch the next season.&lt;/p&gt;
      </description>
      <pubDate>2020-05-08T22:00:00.000Z</pubDate>
      <link>http://norswap.com/reviews-6</link>
      <guid isPermaLink="true">http://norswap.com/reviews-6</guid>
    </item>
    <item>
      <title>Book Notes - Influence: The Psychology of Persuasion</title>
      <description>
&lt;p&gt;I finished Robert Cialdini&amp;#39;s &lt;em&gt;Influence&lt;/em&gt; a couple months ago.&lt;/p&gt;
&lt;p&gt;The book is one of the most often cited when it comes to biases and our
psychological tendencies that work against us. It&amp;#39;s also heavily cited in
&lt;a href=&quot;https://www.readthesequences.com/&quot;&gt;&lt;em&gt;Rationality: From AI to Zombie&lt;/em&gt;&lt;/a&gt;, another book I&amp;#39;ve read and have yet to
write about.&lt;/p&gt;
&lt;p&gt;(If you&amp;#39;re interested in that general idea, be sure to check my post on &lt;a href=&quot;/munger-psychology&quot;&gt;Charlie
Munger&amp;#39;s list of psychological tendencies&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;More precisely, the book is about the big principles that &amp;quot;compliance
professionals&amp;quot; (marketers, salesmen and negotiators of all ilks) exploit in
order to influence us towards their preferred outcome.&lt;/p&gt;
&lt;p&gt;Cialdini identifies six such principles, which he describes in turn:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Reciprocation&lt;/li&gt;
&lt;li&gt;Consistency&lt;/li&gt;
&lt;li&gt;Social proof&lt;/li&gt;
&lt;li&gt;Liking&lt;/li&gt;
&lt;li&gt;Authority&lt;/li&gt;
&lt;li&gt;Scarcity&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Cialdini asserts that we humans come with a large store of evolved &lt;em&gt;automatic&lt;/em&gt;
responses. A very simple example is that we are prone to grant favors, when such
favors are requested with a reason, the quality of the reason notwithstanding!
Just adding &amp;quot;because I really need it&amp;quot; or &amp;quot;because I&amp;#39;m in a hurry&amp;quot; after your
requests apparently increases the chances they will be granted.&lt;/p&gt;
&lt;p&gt;Another such automatic response is that we tend to treat cost as a heuristic for
quality. Hence sometimes increasing the cost of a product makes it sell better.&lt;/p&gt;
&lt;p&gt;There are good reasons for these heuristics to exist. They are often pretty
useful, or at least were useful in the ancestral environment. Cialdini explains
for each principle why it is/was advantageous, how it is now being used against
us, and how to avoid falling for it.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;I took a few note while reading, but I wasn&amp;#39;t quite sure what to do with them.&lt;/p&gt;
&lt;p&gt;One reason I take notes is that I&amp;#39;m not usually too great at remembering things
I have read. Making notes makes it easy to come back to a topic. But more than
just offloading the info to my hard drive, I also want to remember. It happens
too often that I&amp;#39;ve read a book, want to tell someone about it, and nothing but
uninteresting platitudes about the book come to mind.&lt;/p&gt;
&lt;p&gt;This book, in particular, seemed well suited for being &lt;em&gt;remembered&lt;/em&gt;. After all, if
you&amp;#39;re getting the feeling that someone is trying to get advantage of you, you&amp;#39;d
like to remembert the standard set of technique likely to be used against you,
wouldn&amp;#39;t you?&lt;/p&gt;
&lt;p&gt;So what I did it was boil down the content of the book to a set of very short
aphorism-like sentences. This probably won&amp;#39;t make much sense to people who
haven&amp;#39;t read the book, and possibly to people other than myself.&lt;/p&gt;
&lt;p&gt;The plan is to re-read this once in a while, so as to imprint some of the ideas.
&lt;a href=&quot;https://apps.ankiweb.net/&quot;&gt;Anki&lt;/a&gt; could be a useful tool for this too.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;1-reciprocation&quot;&gt;1. Reciprocation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;It&amp;#39;s rude to refuse a gift.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It&amp;#39;s rude to refuse repaying favor.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Small favors can lead to big favors.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Starting from a realistic first ask, the asker can back down to a smaller
favor, and you would be tempted to &amp;quot;reciprocate the concession&amp;quot;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reciprocate exploitation with exploitation.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;2-consistency&quot;&gt;2. Consistency&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Nobody likes (being) hypocrites.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Commitment can be weaponized, especially when small and progressive.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Writing produces powerful commitment, doubly so if public.&lt;br&gt;... even if the beliefs written down are not truly-held beliefs!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We feel committed to things we&amp;#39;ve put effort into, or have suffered for
(the &lt;a href=&quot;https://en.wikipedia.org/wiki/Sunk_cost&quot;&gt;sunk cost fallacy&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The commitment is great if someone has made an &amp;quot;inner choice&amp;quot;. Incentives
can be detrimental, the reasons for the choice must allow the subject to
take personal
responsibility (e.g. morals).  &lt;/p&gt;
&lt;p&gt;Throwing a lowball: adding and then removing incentive to produce inner
choice.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Own your inconsistencies, trust your gut signals.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;3-social-proof&quot;&gt;3. Social Proof&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Examples: canned laughter, seeding the tip jar.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Bystander_effect&quot;&gt;The bystander effect&lt;/a&gt;: pluralistic ignorance.&lt;br&gt;Fight it by tasking a specific person with a specific task.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We imitate people similar to us.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;4-liking&quot;&gt;4. Liking&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;We prefer granting requests from people we know and like.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;e.g. Tupperware parties, local Amnesty volunteers&lt;/li&gt;
&lt;li&gt;Endorsements are often enough.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Salesmen want us to like them.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Physical attractiveness: &lt;a href=&quot;https://en.wikipedia.org/wiki/Halo_effect&quot;&gt;halo effect&lt;/a&gt;, grooming.&lt;/li&gt;
&lt;li&gt;Similarity: &lt;a href=&quot;https://en.wikipedia.org/wiki/Cold_reading&quot;&gt;cold reading&lt;/a&gt;, posture/mood/verbal mirroring.&lt;/li&gt;
&lt;li&gt;Compliments, which work even if inaccurate.&lt;/li&gt;
&lt;li&gt;Emphasis on the familiar.&lt;/li&gt;
&lt;li&gt;Collaboration: emphasize common interest.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The message infects the messenger.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Guilt by association.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Association to glamour, aesthetics, or even &lt;a href=&quot;https://en.wikipedia.org/wiki/Classical_conditioning#Pavlov&amp;#39;s_research&quot;&gt;meals&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Association/dissociation: When things are good it&amp;#39;s &amp;quot;we&amp;quot;, when things are
bad, it&amp;#39;s &amp;quot;they&amp;quot;.  &lt;/p&gt;
&lt;p&gt;Stronger for people with low self-esteem, or whose self-esteem was
recently injured.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fight by explicitly dissociating &amp;quot;the product&amp;quot; from outside associations.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;5-authority&quot;&gt;5. Authority&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;e.g. &lt;a href=&quot;https://en.wikipedia.org/wiki/Milgram_experiment&quot;&gt;The Stanley Milgram experiment&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Works even with just the apparence of authority (attire, titles)&lt;br&gt;... or association to authority.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Clothing matters: uniforms or business suits. They work even in unrelated
domains.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Principal%E2%80%93agent_problem&quot;&gt;The principal agent problem&lt;/a&gt;&lt;br&gt;Small concessions to truth can help conceal a broader deception strategy.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fight by verying credentials and wondering about their relevance.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;6-scarcity&quot;&gt;6. Scarcity&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;The way to love anything is to realize that it might be lost.&lt;br&gt;— G. K. Chesterton&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/Fear_of_missing_out&quot;&gt;fear of missing out (FOMO)&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Psychological reactance: we hate losing our freedoms, including our freedom of
choice.&lt;/li&gt;
&lt;li&gt;Ask for a commitment to buy commitment when the product is at its scarcest.&lt;/li&gt;
&lt;li&gt;The deadline technique: now or never.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We assign positive quality to that which we desire because we can&amp;#39;t
(or risk not) have it.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Banned information: we desire it more, but also trust it more.&lt;/li&gt;
&lt;li&gt;Combo: when knowledge of scarcity is itself scarce.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;New scarcity is more powerful than pre-existing scarcity.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Revolutions often occurs when prosperity is followed by short sharp reversal.&lt;/li&gt;
&lt;li&gt;For this reasons, parents should apply consistent rules to their children.&lt;/li&gt;
&lt;li&gt;Even more potent when caused by social demand (i.e. &lt;a href=&quot;#3-social-proof&quot;&gt;social proof&lt;/a&gt;).&lt;br&gt;e.g. auctions, love triangles&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;False desires: the joy is not in experiencing a scarce commodity but in possessing it.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;bonus-perceptual-contrast&quot;&gt;Bonus: Perceptual Contrast&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Showing expensive items first to make cheaper alternative look cheap, period.&lt;br&gt;... or showing crappy items first to make the more expensive items look worth
their cost.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Negotiating cheaper addons after a big sale.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Leading with a bad news.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
      </description>
      <pubDate>2020-03-30T22:00:00.000Z</pubDate>
      <link>http://norswap.com/influence</link>
      <guid isPermaLink="true">http://norswap.com/influence</guid>
    </item>
    <item>
      <title>Chosen Tidbits 3</title>
      <description>
&lt;p&gt;Previously: &lt;a href=&quot;/chosen-tidbits-1/&quot;&gt;One&lt;/a&gt; / &lt;a href=&quot;/chosen-tidbits-2/&quot;&gt;Two&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;http://tynan.com/ignore&quot;&gt;Why I Ignore All Studies&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A p-value of 0.05 means 5% of results are wrong &lt;strong&gt;and&lt;/strong&gt; the uninteresting
results go unpublished so in practice it&amp;#39;s way more (p-value fishing).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Last, I lower my confidence in studies because every individual is different.
That doesn&amp;#39;t mean that I should smoke because maybe I&amp;#39;m not affected by
tobacco, but it does mean that if the average person needs 7 hours of sleep
but my own research shows that 8 works best for me, I should probably stick to
8.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://breakingsmart.substack.com/p/planning-to-start-planning-to-finish&quot;&gt;Planning to Start, Planning to Finish&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Over the years I’ve realized that a different distinction, within planning, is
probably much more important: between planning to start, and planning to finish.&lt;/p&gt;
&lt;p&gt;Planning to finish is the familiar kind, where you plan all the way to the end
and the terminal condition is the completed state of the activity. The finish
line, the deadline, the checkered flag.&lt;/p&gt;
&lt;p&gt;Planning to start though, is the more important kind for any creative work.
The French phrase mise en place, a favorite of Hercule Poirot, gets at this.
It roughly means “setting the stage”, especially with reference to cooking
preparations.&lt;/p&gt;
&lt;p&gt;When you plan to start, you get to the starting line rather than the finishing
line, by setting the stage for a more creative, improvised phase. You can call
it getting to the starting line, or as I prefer, by analogy to deadline, the
lifeline. A condition where a zombie set of parts is assembled together in a
way that makes it come alive.&lt;/p&gt;
&lt;p&gt;The difference relates to what Scott Adams called the difference between
systems and goals. When you plan to start, you undertake planned activities to
end in a functioning system where habits can flow.&lt;/p&gt;
&lt;p&gt;Another connection familiar to many of you is to James Carse’s notion of
finite versus infinite games. Planning to finish is playing a finite game to
win it and exit it. Planning to start is working to enter an infinite game and
continue playing it.&lt;/p&gt;
&lt;p&gt;Whatever you choose to call it, you should probably spend more time thinking
about this difference than about how much planning to do, which is often a
much simpler question.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;http://jsomers.net/blog/speed-matters&quot;&gt;Speed Matters&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Part of the activation energy required to start any task comes from the
picture you get in your head when you imagine doing it. It may not be that
going for a run is actually costly; but if it feels costly, if the picture in
your head looks like a slog, then you will need a bigger expenditure of will
to lace up.&lt;/p&gt;
&lt;p&gt;Slowness seems to make a special contribution to this picture in our heads.
Time is especially valuable. So as we learn that a task is slow, an especial
cost accrues to it. Whenever we think of doing the task again, we see how
expensive it is, and bail.&lt;/p&gt;
&lt;p&gt;That’s why speed matters.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://buddhism-for-vampires.com/eating-the-shadow&quot;&gt;Eating The Shadow&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We can embrace our monstrosity while cultivating our human nobility. We can
allow each to transform the other, so we become cheerful, kind, useful
monsters who are also overpowering, unpredictable, and dangerous heroes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;http://tynan.com/reducefriction&quot;&gt;Reduce Friction&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Reduce friction.&lt;/p&gt;
&lt;p&gt;Automation might be costly... but it removes friction — it pays for more than
just the effort.&lt;/p&gt;
&lt;p&gt;Sometimes not even automatization but making sure you can do stuff in an
optimized way.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://breakingsmart.substack.com/p/investing-in-your-ordinary-powers&quot;&gt;Investing In Your Ordinary Powers&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The personal growth world is somewhat obsessed with strengths and weaknesses,
or more generally, things that make you different from others, whether you
view those things as gifts or curses.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- --&gt;

&lt;blockquote&gt;
&lt;p&gt;To get past a strengths/weaknesses orientation, or more generally past your
specialness orientation, you have to get in touch with the things that make
you ordinary.&lt;/p&gt;
&lt;p&gt;An early adopter is a classic example of someone investing in their
ordinariness. There may be some mild strengths or weaknesses involved: maybe you
are slightly better at figuring out janky UIs (a minor strength), or slightly
more susceptible to distraction (a minor weakness). But mainly, being an early
adopter is exactly the same as being a late adopter, except you are early.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- --&gt;

&lt;blockquote&gt;
&lt;p&gt;You may attract a romantic partner through things that make you special, but
most relationship maintenance skills are based on investing in the ordinary.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://www.perell.com/blog/peter-thiel&quot;&gt;Peter Thiel&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“Contrarians may be mostly wrong, but when they get it right, they get it really
right.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- --&gt;

&lt;blockquote&gt;
&lt;p&gt;According to Thiel, monopoly is the end state of every successful business. If
you want to create and capture lasting economic value, don’t compete. The more
unique companies are, the more the business world can flourish.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://www.lesswrong.com/posts/y5RoNDPcfJqm3vfQA/the-value-of-your-time-or-why-you-should-buy-an-ac&quot;&gt;How Much is Your Time Worth?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A post asking the question (among others): &amp;quot;should you buy an AC unit&amp;quot;?&lt;/p&gt;
&lt;p&gt;Interesting perspective.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://www.ribbonfarm.com/2019/09/16/mediocratopia-8/&quot;&gt;Mediocratopia 8&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Mediocrity is not being a completist about anything. Not finishing for the sake
of finishing.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- --&gt;

&lt;blockquote&gt;
&lt;p&gt;Mediocrity is not lack of attention to key details, it is to mainly care about
the key details and being willing to compromise on all other details. This is
often rational.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- --&gt;

&lt;blockquote&gt;
&lt;p&gt;After a lot of mediocre output, the result can start looking quite good. A bit
like in the pottery parable - but it&amp;#39;s not quite the point. You&amp;#39;re not trying
to cleverly solve for the &amp;quot;best&amp;quot; pot, you just have lower minimum standards
for pots. You&amp;#39;re not throwing away your mediocre pots, which are good enough.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- --&gt;

&lt;blockquote&gt;
&lt;p&gt;For a mediocratist, the level of caring is a design variable, not a fixed
performance parameter to be set at &amp;quot;maximum&amp;quot; by default.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- --&gt;

&lt;blockquote&gt;
&lt;p&gt;Where you decide to stop caring about what you&amp;#39;re doing reveals where you are
willing to start caring about yourself. And being a completist about
everything means not caring about yourself at all.&lt;/p&gt;
&lt;/blockquote&gt;
      </description>
      <pubDate>2020-03-26T23:00:00.000Z</pubDate>
      <link>http://norswap.com/chosen-tidbits-3</link>
      <guid isPermaLink="true">http://norswap.com/chosen-tidbits-3</guid>
    </item>
    <item>
      <title>A ps / pkill / pgrep Alternative</title>
      <description>
&lt;p&gt;As I was prepping my new computer, and &lt;a href=&quot;/unix-daemons/&quot;&gt;toying with unix daemons&lt;/a&gt;, I found
myself checking on running processes regularly, and occasionally killing them. I
also found myself being quite frustrated with the tools provided by the system
for this purpose.&lt;/p&gt;
&lt;h2 id=&quot;checking-processes&quot;&gt;Checking Processes&lt;/h2&gt;
&lt;p&gt;To check what a process is up to (or if it is running at all), you&amp;#39;d run a
command like this (here, assuming I&amp;#39;m interested in the status of the &lt;code&gt;sleep&lt;/code&gt;
process):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ps aux | grep sleep
# norswap    58694   0.0  0.0  4399328    728 s006  S+    2:26PM   0:00.00 grep sleep
# norswap    58686   0.0  0.0  4268240    576 s003  S+    2:26PM   0:00.00 sleep 300&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is an incantation I&amp;#39;ve personally memorized a long time ago. I didn&amp;#39;t even
remember what those &lt;code&gt;aux&lt;/code&gt; flags meant.&lt;/p&gt;
&lt;p&gt;(As it turns out, omitting the dash (&lt;code&gt;-&lt;/code&gt;) toggles legacy mode, in which &lt;code&gt;u&lt;/code&gt;
displays more info. &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;x&lt;/code&gt; work like they do with a dash, respectively
displaying processes from all users and showing processes that are not attached
to a controlling terminal.)&lt;/p&gt;
&lt;p&gt;This is less than ideal. For one, the output includes a line that matches the
&lt;code&gt;grep&lt;/code&gt; command itself!&lt;/p&gt;
&lt;p&gt;Here is the remedy, where &lt;code&gt;grep -v&lt;/code&gt; excludes matching lines (and no, there is no
easy way to merge the two &lt;code&gt;grep&lt;/code&gt; commands):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ps -ax | grep -v &amp;quot; grep &amp;quot; | grep foobar&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Frankly, not something you&amp;#39;d want to type each time.&lt;/p&gt;
&lt;p&gt;Another thing that bothers me is: what are all these numbers and letters? Do I
care?&lt;/p&gt;
&lt;p&gt;Let&amp;#39;s start by omitting our legacy &lt;code&gt;u&lt;/code&gt; option. Then, by default (at leasts on
stock macOS Catalina!), you&amp;#39;ll get the following fields:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ps ax | head -1
#  PID   TT  STAT      TIME COMMAND&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You should know what the &lt;code&gt;PID&lt;/code&gt; is (the process ID), &lt;code&gt;TT&lt;/code&gt; is an identifier for
the controlling terminal (e.g. &lt;code&gt;s006&lt;/code&gt;) or &lt;code&gt;??&lt;/code&gt; if there are no controlling
terminal.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;STAT&lt;/code&gt; column lists flags that gives information on the status of the
process. Info about which can be found under the &amp;quot;state&amp;quot; heading when running
&lt;code&gt;man ps&lt;/code&gt; on my mac:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-none&quot;&gt;state     The state is given by a sequence of characters, for example, ``RWNA&amp;#39;&amp;#39;.
          The first character indicates the run state of the process:

  I       Marks a process that is idle (sleeping for longer than about 20 seconds).
  R       Marks a runnable process.
  S       Marks a process that is sleeping for less than about 20 seconds.
  T       Marks a stopped process.
  U       Marks a process in uninterruptible wait.
  Z       Marks a dead process (a ``zombie&amp;#39;&amp;#39;).

  Additional characters after these, if any, indicate additional state information:

  +       The process is in the foreground process group of its control terminal.
  &amp;lt;       The process has raised CPU scheduling priority.
  &amp;gt;       The process has specified a soft limit on memory requirements and is currently
          exceeding that limit; such a process is (necessarily) not swapped.
  A       the process has asked for random page replacement (VA_ANOM, from vadvise(2), for
          example, lisp(1) in a garbage collect).
  E       The process is trying to exit.
  L       The process has pages locked in core (for example, for raw I/O).
  N       The process has reduced CPU scheduling priority (see setpriority(2)).
  S       The process has asked for FIFO page replacement (VA_SEQL, from vadvise(2), for
          example, a large image processing program using virtual memory to sequentially
          address voluminous data).
  s       The process is a session leader.
  V       The process is suspended during a vfork(2).
  W       The process is swapped out.
  X       The process is being traced or debugged.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There is a different output (probably Linux) &lt;a href=&quot;https://askubuntu.com/questions/360252/what-do-the-stat-column-values-in-ps-mean#360253&quot;&gt;listed in this StackOverflow
answer&lt;/a&gt; that you might find handy.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;TIME&lt;/code&gt; column: the CPU time the process has consumed since it started, in
&lt;code&gt;&amp;lt;hours&amp;gt;:&amp;lt;minutes&amp;gt;.&amp;lt;second&amp;gt;&lt;/code&gt; format.&lt;/p&gt;
&lt;p&gt;And finally the &lt;code&gt;COMMAND&lt;/code&gt; itself.&lt;/p&gt;
&lt;h2 id=&quot;the-system-has-you-covered-maybe&quot;&gt;The System Has You Covered... Maybe?&lt;/h2&gt;
&lt;p&gt;So of course, the double &lt;code&gt;grep&lt;/code&gt; thing is insane. I think some people might have
some point have recognized this. What did these good souls do? Come up with
&lt;code&gt;pgrep&lt;/code&gt;, of course!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ pgrep sleep
# 58686&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The number printed out is the PID of matched processes. That &lt;code&gt;pgrep sleep&lt;/code&gt;
command is approximately equivalent to the following full pipe:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ps -ax | grep -v &amp;quot; grep &amp;quot; | grep sleep | awk &amp;#39;{ print $1 }&amp;#39;
# 58686&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But not exactly. On the plus side, it&amp;#39;s slightly more robust, for instance it
wouldn&amp;#39;t ignore entries in the very unlikely scneario where entries of interest
contain the &amp;quot; grep &amp;quot; string. &lt;code&gt;pgrep&lt;/code&gt; just ignores its own process and that&amp;#39;s it.&lt;/p&gt;
&lt;p&gt;Also, by default &lt;code&gt;pgrep&lt;/code&gt; only matches on the program name and not on the
arguments.&lt;/p&gt;
&lt;p&gt;On the other hand, you&amp;#39;ve now lost all ability to get any other information
about the process, which sucks.&lt;/p&gt;
&lt;p&gt;Pointedly, it even sucks if all you want to do is find the PID of a process in
order to kill it! You might have caught the wrong process, but since its name is
not displayed, you&amp;#39;ll never find out. And if your query matches more than one
process, you don&amp;#39;t have any visual feedback on how to refine the search.&lt;/p&gt;
&lt;p&gt;Ok, so &lt;code&gt;pgrep&lt;/code&gt; does have a &lt;code&gt;-l&lt;/code&gt; flag that will print out the name of the process
(and the arguments if &lt;code&gt;-f&lt;/code&gt;, which makes it match on the arguments as well, is
given). But there are no flags to retrieve any other piece of information.&lt;/p&gt;
&lt;h2 id=&quot;killing-processes&quot;&gt;Killing Processes&lt;/h2&gt;
&lt;p&gt;Once you have the PID, it&amp;#39;s quite easy. Just &lt;code&gt;kill -9 &amp;lt;PID&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;One way to do it is to run a &lt;code&gt;grep&lt;/code&gt; (or &lt;code&gt;pgrep&lt;/code&gt;) command and copy the PID by
hand.&lt;/p&gt;
&lt;p&gt;Another way is use some piping:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ps -ax | grep sleep # identify process
$ ps -ax | grep sleep | grep -v &amp;quot; grep &amp;quot; | awk &amp;#39;{ print $1 }&amp;#39; | xargs kill -9 # kill it&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Adding &lt;code&gt;awk &amp;#39;{ print $1 }&amp;#39;&lt;/code&gt; outputs the first column (the PIDs), while &lt;code&gt;xargs&lt;/code&gt;
transmits them to &lt;code&gt;kill -9&lt;/code&gt; as arguments.&lt;/p&gt;
&lt;p&gt;Or using &lt;code&gt;pgrep&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ pgrep -l sleep # identify process
$ pkill !* # kill it&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here the trick is &lt;code&gt;!*&lt;/code&gt; which passes the same arguments as the previous command
 (&lt;code&gt;pgrep&lt;/code&gt;) to &lt;code&gt;pkill&lt;/code&gt;. &lt;code&gt;pkill&lt;/code&gt; is &lt;code&gt;pgrep&lt;/code&gt;&amp;#39;s cousin, which instead of printing
 the matched PIDs, kills them.&lt;/p&gt;
&lt;p&gt;Of course, we could also have used &lt;code&gt;xargs kill -9&lt;/code&gt; here.&lt;/p&gt;
&lt;h2 id=&quot;an-api-and-a-tool&quot;&gt;An API, and a Tool&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;pgrep&lt;/code&gt; and &lt;code&gt;pkill&lt;/code&gt; kinda work, but they lose something nice about the original
&lt;code&gt;ps&lt;/code&gt;: it can be used to get a lot of information about a process, not just its
PID and name.&lt;/p&gt;
&lt;p&gt;Essentially, what we would like is a command that is able to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Match processes using any of its properties (or &amp;quot;fields&amp;quot; as I called them
before. &lt;code&gt;pgrep&lt;/code&gt; and &lt;code&gt;pkill&lt;/code&gt; can do this (via various flags).&lt;/li&gt;
&lt;li&gt;Display properties of interest. &lt;code&gt;ps&lt;/code&gt; can do this (via its &lt;code&gt;-o&lt;/code&gt; flag).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Moreover I&amp;#39;d like a tool I can use at the command line easily. It should have
good defaults and enable frequent workflows easily, while supporting
customization.&lt;/p&gt;
&lt;p&gt;But I&amp;#39;d also like it to be a building block, either as a way to query processes
which I can use in elaborate scripts, or as a reusable component for other
interactive commands. As we&amp;#39;ll see, there are a few niceties we can add to that
effect (match coloring, output truncation, ...).&lt;/p&gt;
&lt;p&gt;I made this tool, and named it &lt;code&gt;nps&lt;/code&gt; (of course).&lt;/p&gt;
&lt;h2 id=&quot;nps-basic-features&quot;&gt;&lt;code&gt;nps&lt;/code&gt;: Basic Features&lt;/h2&gt;
&lt;p&gt;(Wanna see the code? &lt;a href=&quot;https://gist.github.com/norswap/3506d2b46102c2f32f18acced0ecd798&quot;&gt;It&amp;#39;s here.&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;I want the command to match only my processes by default, but always also the
processes that don&amp;#39;t have controlling terminals. The same switch as regular &lt;code&gt;ps&lt;/code&gt;
(&lt;code&gt;-a&lt;/code&gt;) can be added to get the processes from all users.&lt;/p&gt;
&lt;p&gt;By default I only want the PID and the command name, because that&amp;#39;s what I care
about 99% of the time. But I want the ability to request other informations,
this is done through the &lt;code&gt;-o&lt;/code&gt; flag followed by a comma-separated set of field
specifiers described in &lt;code&gt;man ps&lt;/code&gt;, the whole list of which can be obtained by
running &lt;code&gt;ps -L&lt;/code&gt; or &lt;code&gt;nps -l&lt;/code&gt;. So if you just need the PID, you&amp;#39;d use &lt;code&gt;-o pid&lt;/code&gt;. If
you just need to lookup some frequently used info, I included the verbose &lt;code&gt;-v&lt;/code&gt;
flag, which acts like the &lt;code&gt;ps -j&lt;/code&gt; flag, though implemented in terms of &lt;code&gt;-o &amp;#39;user, pid, ppid, pgid, sess, jobc, state, tt, time, command&amp;#39;&lt;/code&gt;, which are the
displayed fields.&lt;/p&gt;
&lt;p&gt;In terms of matching, the command defaults to case-insensitive matching for
faster typing, but case-sensitivity can be obtained with the &lt;code&gt;-s&lt;/code&gt; flag. &lt;code&gt;nps&lt;/code&gt;
matches on the command name and PID, but it&amp;#39;s possible to specify the matching
criteria using the &lt;code&gt;-m&lt;/code&gt; flag (whose argument is similar to that of the &lt;code&gt;-o&lt;/code&gt;
flag). As a special case, if you specify &lt;code&gt;-m pid&lt;/code&gt;, &lt;code&gt;nps&lt;/code&gt; only matches on entire
PIDs, as it&amp;#39;s pretty much useless to match only part of the PID.&lt;/p&gt;
&lt;h2 id=&quot;improving-output&quot;&gt;Improving Output&lt;/h2&gt;
&lt;p&gt;Further improvements are concerned with output. &lt;code&gt;nps&lt;/code&gt; detects whether its output
is directed towards a terminal, and if that&amp;#39;s the case enable &lt;code&gt;grep&lt;/code&gt; output
colorization so that you can quickly identify what was matched. You can also
specify the &lt;code&gt;--color&lt;/code&gt; flag which forces colorizaton even when &lt;code&gt;nps&lt;/code&gt; is piped to
a file or other process (this will leave terminal color codes in the output).&lt;/p&gt;
&lt;p&gt;Similarly, &lt;code&gt;nps&lt;/code&gt; follows after &lt;code&gt;ps&lt;/code&gt; and clips command names if the output is a
terminal. However, this too can be controlled: use &lt;code&gt;--full&lt;/code&gt; to always output
full command names, and &lt;code&gt;--clip&lt;/code&gt; to always clip them. Note that the clip length
depends on the size of the terminal &lt;code&gt;nps&lt;/code&gt; is running in!&lt;/p&gt;
&lt;p&gt;Another related concern use is the inclusion of a header. By default, &lt;code&gt;ps&lt;/code&gt; will
include a line with the name of all fields (columns) on display. This can be
useful on the terminal when displaying a lot of fields (e.g. &lt;code&gt;nps -v&lt;/code&gt;) but not
otherwise, and while used in scripts it&amp;#39;s a nuisance to be parsed away. &lt;code&gt;nps&lt;/code&gt;
hides the header by default, but it can be included back with the &lt;code&gt;--header&lt;/code&gt;
option.&lt;/p&gt;
&lt;h2 id=&quot;killing-processes-with-nps&quot;&gt;Killing Processes with &lt;code&gt;nps&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Killing processes? Easy peezy, lemon squeezy, just add the &lt;code&gt;-k&lt;/code&gt; flag:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ nps -k sleep
# 60772 sleep 300&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;nps&lt;/code&gt; still prints the matched processes, which it also kills. Note it may fail
to kill the matched processes! If the exit code is 0 when using &lt;code&gt;-k&lt;/code&gt;, it means
that all matched processes were killed (or that no process was matched).&lt;/p&gt;
&lt;p&gt;As an aside, it&amp;#39;s rather difficult to make the decision of what to return when
no process is matched. On the one hand, all &lt;em&gt;matched&lt;/em&gt; processes (i.e. none) were
successfully killed. On the other hand, if you emit the command, you might
expect it to kill something. I opted for to return 0 when no process is matched
with &lt;code&gt;-k&lt;/code&gt; (while usually it would be 1), because it makes the command
&lt;a href=&quot;https://en.wikipedia.org/wiki/Idempotence&quot;&gt;idempotent&lt;/a&gt;, a very useful property when writing scripts.&lt;/p&gt;
&lt;p&gt;It might be slightly better if &lt;code&gt;nps&lt;/code&gt; reported on exactly which process were
killed and which lived on, though re-running &lt;code&gt;nps&lt;/code&gt; (without &lt;code&gt;-k&lt;/code&gt;) can easily
help determine which process are still alive, so all in all not a crucial
feature.&lt;/p&gt;
&lt;h2 id=&quot;argument-processing&quot;&gt;Argument Processing&lt;/h2&gt;
&lt;p&gt;It&amp;#39;s interesting to look at how &lt;code&gt;nps&lt;/code&gt; processes it&amp;#39;s arguments. Unlike most
commands, options can be freely mixed with regular arguments (which are passed
to &lt;code&gt;grep&lt;/code&gt; for matching purposes). One advantage is that if you want to kill a
process, you can first verify your query, then kill the process by appening the
&lt;code&gt;-k&lt;/code&gt; flag:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ nps foobar
# 59325 sleep 300
# # (press up, type &amp;#39; -k&amp;#39;)
$ nps foobar -k
# 59325 sleep 300&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you use an unknown flag (e.g. &lt;code&gt;-z&lt;/code&gt; or &lt;code&gt;--foobar&lt;/code&gt;), &lt;code&gt;nps&lt;/code&gt; will display its
help and exit with code 1. But what if you want to match flags — a totally
reasonable thing to do? Then you need to put those flags at the end, &lt;em&gt;after&lt;/em&gt; the
special &lt;code&gt;--&lt;/code&gt; separator:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ nps -- -li
# 2043 bash -li
#  519 bash -li&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I think it would be &lt;em&gt;slightly&lt;/em&gt; better if one could still have regular options
after. We could imagine to bracket sensitive options with &lt;code&gt;--&lt;/code&gt;: &lt;code&gt;nps -- -li -- -k&lt;/code&gt;, but then we also need a way to specify we want to match &lt;code&gt;--&lt;/code&gt; itself,
probably as a special flag (e.g. &lt;code&gt;--sep&lt;/code&gt;). This is a pretty big change to the
script for little benefits, so I&amp;#39;m holding out for now.&lt;/p&gt;
&lt;p&gt;All the &amp;quot;search&amp;quot; arguments are collected in order and merged (separated by a
whitespace). So in reality, it doesn&amp;#39;t really make sense to have more than one,
though it can be convenient to type &lt;code&gt;nps sleep 300&lt;/code&gt; rather than &lt;code&gt;nps &amp;#39;sleep 300&amp;#39;&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;regular-expressions-and-return-code&quot;&gt;Regular Expressions, and Return Code&lt;/h2&gt;
&lt;p&gt;The final search parameter (obtained through argument processing as described in
the last section) will be used as a &lt;a href=&quot;https://www.regular-expressions.info/posix.html&quot;&gt;Posix extended regular expression
(ERE)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This is something to keep in mind when you special characters which might need
to be quoted. For instance, to search for an interrogation mark: &lt;code&gt;nps &amp;#39;\?&amp;#39;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For instance, the following command will match and highlight all string literals
in running commands arguments:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ nps &amp;#39;&amp;quot;.*&amp;quot;&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As for the return code, &lt;code&gt;nps&lt;/code&gt; returns 0 if it matched processes, 1 otherwise.
This is different when using the &lt;code&gt;-k&lt;/code&gt; flag, as discussed above.&lt;/p&gt;
&lt;h2 id=&quot;potential-pitfalls&quot;&gt;Potential Pitfalls&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;nps&lt;/code&gt; was only tested on macOS Catalina, and given how finicky these things are,
it&amp;#39;s almost sure not to work out of the box on Linux.&lt;/p&gt;
&lt;p&gt;In particular, the &lt;code&gt;script&lt;/code&gt; command appears different in &lt;a href=&quot;http://man7.org/linux/man-pages/man1/script.1.html&quot;&gt;Linux&lt;/a&gt;
than in &lt;a href=&quot;https://www.unix.com/man-page/mojave/1/script/&quot;&gt;macOS&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;getting-nps&quot;&gt;Getting &lt;code&gt;nps&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://gist.github.com/norswap/3506d2b46102c2f32f18acced0ecd798&quot;&gt;&lt;code&gt;nps&lt;/code&gt; can be found in this Gist&lt;/a&gt;. Because it&amp;#39;s short, I&amp;#39;m also
joining a copy below:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;#!/bin/bash

### --- Constants ---

SCRIPT_CMD=&amp;#39;script -q /dev/null&amp;#39;
TAIL_CMD=&amp;#39;tail -n +2&amp;#39;

### --- Parameters ---

ALL=&amp;#39;&amp;#39;     # flag to match all users process
CASE=&amp;#39;-i&amp;#39;  # flag for case-insensitive matches
KILL=0     # if 1, kill matched processes

# ps fields to match on
MATCH_FIELDS=&amp;#39;-o pid,command&amp;#39;

# ps fields to output
OUTPUT_FIELDS=&amp;#39;-o pid,command&amp;#39;

# command used to strip the header (or not)
STRIP_HEADER=&amp;quot;$TAIL_CMD&amp;quot;

if [[ -t 1 ]]; then
    COLOR=&amp;#39;--color=always&amp;#39;  # whether to colorize output
    CLIP=&amp;quot;$SCRIPT_CMD&amp;quot;      # command to clip command names (or not)
else
    COLOR=&amp;#39;--color=none&amp;#39;
    CLIP=&amp;#39;&amp;#39;
fi

### --- Help ---

help() {
    echo -e &amp;quot;Usage: nps &amp;lt;opts or search terms&amp;gt; [-- &amp;lt;search terms&amp;gt;]\n&amp;quot; \
    &amp;quot;  Print processes.\n&amp;quot; \
    &amp;quot;    -a: include processes from [a]ll users\n&amp;quot; \
    &amp;quot;    -s: case-sensitive match\n&amp;quot; \
    &amp;quot;    -k: [k]ill the mached processes\n&amp;quot; \
    &amp;quot;    -h: print this [h]elp and exit\n&amp;quot; \
    &amp;quot;    -l: print the [l]ist of selectable fields and exit\n&amp;quot; \
    &amp;quot;    -m &amp;lt;fields&amp;gt;: specify comma-separated list of field to [m]atch on\n&amp;quot; \
    &amp;quot;       If specifying only &amp;#39;-m pid&amp;#39;, only matches entired PIDs. \n&amp;quot; \
    &amp;quot;    -o &amp;lt;fields&amp;gt;: specify comma-separated list of fields to [o]utput\n&amp;quot; \
    &amp;quot;    -v: [v]erbose output, equivalent to\n&amp;quot; \
    &amp;quot;        -o &amp;#39;user, pid, ppid, pgid, sess ,jobc, state, tt, time, command&amp;#39; \n&amp;quot; \
    &amp;quot;    --color: [c]olorize output even when piping to programs\n&amp;quot; \
    &amp;quot;    --header: include fields (columns) header in output\n&amp;quot; \
    &amp;quot;    --full: output full command name even if stdout is a terminal\n&amp;quot; \
    &amp;quot;    --clip: output clipped command name even if stdout is not a terminal\n&amp;quot; \
    &amp;quot;    --version: print version and exit\n&amp;quot;;
}

### --- Arg Parsing ---

POSITIONAL=()
while [[ $# -gt 0 ]]; do case &amp;quot;$1&amp;quot; in
    -a)  ALL=&amp;#39;-a&amp;#39;;;
    -s)  CASE=&amp;#39;&amp;#39;;;
    -v)  OUTPUT_FIELDS=&amp;quot;-o user, pid, ppid, pgid, sess, jobc, state, tt, time, command&amp;#39;&amp;quot;;;
    -o)  OUTPUT_FIELDS=&amp;quot;-o $2&amp;quot;; shift;;
    -m)   MATCH_FIELDS=&amp;quot;-o $2&amp;quot;; shift;;
    -k)  KILL=1;;
    -l)         ps -L; exit;;
    -h|--help)  help; exit;;
    --)         shift; break;;

    --color)    COLOR=&amp;#39;--color=always&amp;#39;;;
    --header)   STRIP_HEADER=&amp;#39;cat&amp;#39;;;
    --full)     CLIP=&amp;#39;&amp;#39;;;
    --clip)     CLIP=&amp;quot;$SCRIPT_CMD&amp;quot;;;
    --version)  echo 2020.03.22; exit;;
    -*)         help; exit 1;;

     *)  POSITIONAL+=(&amp;quot;$1&amp;quot;);;
    esac
    shift
done
set -- &amp;quot;${POSITIONAL[@]}&amp;quot; &amp;quot;$@&amp;quot; # restore positional parameters

### --- Match PIDs ---

filter_header_and_grep() {
    $TAIL_CMD | grep -v &amp;quot;$(which nps)&amp;quot; | grep -v &amp;quot; grep &amp;quot;
}
select_pids() {
    grep $CASE -E -- &amp;quot;$*&amp;quot; | awk &amp;#39;{ print $1 }&amp;#39;
}

# if matching on PID only, only match whole PIDs
[[ &amp;quot;$MATCH_FIELDS&amp;quot; == &amp;quot;-o pid&amp;quot; ]] &amp;amp;&amp;amp; MATCH_FIELDS=-&amp;quot;p $*&amp;quot;

# find matching PIDs
PIDS=&amp;quot;$(ps -x $ALL &amp;quot;$MATCH_FIELDS&amp;quot; | filter_header_and_grep | select_pids &amp;quot;$*&amp;quot;)&amp;quot;

# when no process is found: exit with 1, or with 0 when the -k flag is set
[[ &amp;quot;$PIDS&amp;quot; == &amp;#39;&amp;#39; ]] &amp;amp;&amp;amp; { [[ $KILL == 1 ]]; exit $?; }

### --- Output ---

highlight_matches() {
    if [[ &amp;quot;$*&amp;quot; == &amp;#39;&amp;#39; ]]; then cat; else grep $COLOR $CASE -E &amp;quot;($*)|$&amp;quot;; fi
}

# print with requested fields + highlighting
# the tr command cleans up the script command output
$CLIP ps -x &amp;quot;$OUTPUT_FIELDS&amp;quot; -p $PIDS | tr -d &amp;#39;\r&amp;#39; | $STRIP_HEADER | highlight_matches &amp;quot;$*&amp;quot;
EXIT=$?

### --- Kill ---

# kill matched processes if requested
if [[ $KILL == 1 ]]; then
    kill -9 $PIDS
    EXIT=$?
fi

exit $EXIT&lt;/code&gt;&lt;/pre&gt;
&lt;link href=&#39;https://cdnjs.cloudflare.com/ajax/libs/prism/1.19.0/themes/prism-tomorrow.min.css&#39; rel=&#39;stylesheet&#39; /&gt;
&lt;script
src=&#39;https://cdnjs.cloudflare.com/ajax/libs/prism/1.19.0/components/prism-core.min.js&#39;&gt;&lt;/script&gt;
&lt;script
src=&#39;https://cdnjs.cloudflare.com/ajax/libs/prism/1.19.0/plugins/autoloader/prism-autoloader.min.js&#39;&gt;&lt;/script&gt;
      </description>
      <pubDate>2020-03-24T23:00:00.000Z</pubDate>
      <link>http://norswap.com/nps-pkill-pgrep</link>
      <guid isPermaLink="true">http://norswap.com/nps-pkill-pgrep</guid>
    </item>
    <item>
      <title>Weight Training Log, Episode 5: Intermediate Build and Looking into RTS</title>
      <description>
&lt;p&gt;Previously: &lt;a href=&quot;/weight-training&quot;&gt;One&lt;/a&gt; / &lt;a href=&quot;/weight-training-2&quot;&gt;Two&lt;/a&gt; / &lt;a href=&quot;/weight-training-3&quot;&gt;Three&lt;/a&gt; / &lt;a href=&quot;/weight-training-4&quot;&gt;Four&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/weight-training-4&quot;&gt;Last time&lt;/a&gt;, I had just finished my cut and was dipping my toes in a new
program. In the time between then and now (6 months, no less!), I&amp;#39;ve not only
gotten up to speed on that program, I&amp;#39;ve also ran a modified &amp;quot;arms
specialization&amp;quot; variant block for 8 weeks, emphasized the training of muscles I
hadn&amp;#39;t really trained directly before, and modified the program further by
integrating &amp;quot;Wenning warmups&amp;quot;.&lt;/p&gt;
&lt;h2 id=&quot;new-program&quot;&gt;New Program&lt;/h2&gt;
&lt;p&gt;Since September, I&amp;#39;ve been runing the &lt;a href=&quot;https://my.builtwithscience.com/p/intermediate-build-program&quot;&gt;Stronger by Science Intermediate
Build&lt;/a&gt; program. It&amp;#39;s 5-spread (5 different workouts, each one per
week). In concrete terms, here what was I was doing:&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;upper-body-workout&quot;&gt;Upper Body Workout&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Bench Press (4x6)&lt;/li&gt;
&lt;li&gt;Chest-Supported Row (3x8)&lt;/li&gt;
&lt;li&gt;Standing Overhead Press (3x10)&lt;/li&gt;
&lt;li&gt;Lat Pulldown (3x12)&lt;/li&gt;
&lt;li&gt;High to Low Cable Flies (3x15)&lt;/li&gt;
&lt;li&gt;Lying Face Pulls (3x12)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;lower-body-workout-1&quot;&gt;Lower Body Workout 1&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Front Squat (3x12)&lt;/li&gt;
&lt;li&gt;Deadlift (4x8)&lt;/li&gt;
&lt;li&gt;Barbell Hip Thurst (4x12)&lt;/li&gt;
&lt;li&gt;Single Leg Weighted Calf Raise (3x8)&lt;/li&gt;
&lt;li&gt;Leg Press Calf Raise (3x12)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;push-workout&quot;&gt;Push Workout&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Incline Dumbelle Press (3x10)&lt;/li&gt;
&lt;li&gt;Flat Dumbelle Press (RPT: 8, 10, 12)&lt;/li&gt;
&lt;li&gt;Lateral Cable Raises (2x12)&lt;/li&gt;
&lt;li&gt;Lateral Dumbbell Raises (2x12)&lt;/li&gt;
&lt;li&gt;Banded Push-Ups (2 to failure)&lt;/li&gt;
&lt;li&gt;Overhead Triceps Rope Extensions (3x15)&lt;/li&gt;
&lt;li&gt;Bar Triceps Pushdowns (3x12)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;pull-workout&quot;&gt;Pull Workout&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Weighted Pull-Ups (RPT: 6, 8, 10)&lt;/li&gt;
&lt;li&gt;Seated Row (3x10)&lt;/li&gt;
&lt;li&gt;Reverse Pec Deck (3x12)&lt;/li&gt;
&lt;li&gt;Kneeling Face Pulls (4x15)&lt;/li&gt;
&lt;li&gt;Incline Dumbell Curls (3x10)&lt;/li&gt;
&lt;li&gt;Hammer Curls (3x10)&lt;/li&gt;
&lt;li&gt;Scapular Pull-Ups (2 to failure)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;lower-body-workout-2&quot;&gt;Lower Body Workout 2&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Back Squat (3x8, 1x10 slow eccentric)&lt;/li&gt;
&lt;li&gt;Bulgarian Split Squat (4x10)&lt;/li&gt;
&lt;li&gt;Glute Ham Raise (4x12)&lt;/li&gt;
&lt;li&gt;Smith Machine Calf Raises (3x15)&lt;/li&gt;
&lt;li&gt;Seated Weight Calf Raise (3x15)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;RPT stands for &amp;quot;reverse pyramidal training&amp;quot; and it means you lower the
weight on the bar for each successive sets (but the reps go up). &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The reps listed are a maximum but it&amp;#39;s generally allowed to do 2 less if
you&amp;#39;re doing 6-10 reps and 4-5 less if you&amp;#39;re doing 12-15 reps. The point
being to allow for &lt;em&gt;double progression&lt;/em&gt; (increase reps, then increase weight
and lower reps, repeat).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The program includes many more things, including warmup routines (mostly
&lt;a href=&quot;https://en.wikipedia.org/wiki/Stretching#Dynamic_stretching&quot;&gt;dynamic stretches&lt;/a&gt;) that I ran for a while, before time constraint got in the
way. There are also &lt;em&gt;specialization phases&lt;/em&gt; that I&amp;#39;ll talk about later.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can see how much I lift on all of those, and how much I progressed in
&lt;a href=&quot;#annex-1-lift-progress&quot;&gt;Annex 1&lt;/a&gt; at the bottom of this article.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Okay, so you might be thinking &amp;quot;that&amp;#39;s a lot of stuff!&amp;quot;. And indeed, it is.&lt;/p&gt;
&lt;p&gt;I finished writing my thesis in early August, and between September and December
(when started my new job), I had a lot of time available. This enabled me to
effectively work out 5 times a week (sometimes 6, adding an extra session for
abs and traps, more on that later) and for a solid 1:45-2:00.&lt;/p&gt;
&lt;p&gt;I wasn&amp;#39;t sure if I was going to be able to maintain the rythm with a job, but
with a few troubled periods (business travel, Christmas holidays), I was able to
keep training mostly almost 5 times a week. The sessions did take a hit however,
as I more often than not cut them slightly shorter.&lt;/p&gt;
&lt;p&gt;So what do I think about the program?&lt;/p&gt;
&lt;p&gt;In general, it&amp;#39;s a pretty solid and well-rounded program. I mostly like the
exercise selection. I also think it&amp;#39;s too much volume: training 5 x 1.5 hours
per week is just too much, and often it took me even longer. Of course I could
modulate the weights and my effort to be done faster. Though, honestly, just
counting the sets + prescribed rest times, it would be pretty difficult.&lt;/p&gt;
&lt;p&gt;Since it&amp;#39;s so well-rounded, it&amp;#39;s hard to know what to drop, but there were a few
obvious choices for me. First, the bulgarian split squat (in lower workout 1).
Everybody hates this exercise, but it&amp;#39;s also awkardly positionned right after
the back squat. If the back squat is done seriously (all 4x8+ reps!), there is
no way that doing the split squat straight after is going to be that productive.
If anything, do it first with very light weights, as a warmup.&lt;/p&gt;
&lt;p&gt;I also dropped the front squat. What can I say, I just don&amp;#39;t like it. It&amp;#39;s
either super unstable or hard on the wrists depending on your grip. The
rationale for doing it over a back squat is minimal (just a bit more variety).
But similarly, this is on the same day as the deadlift. I don&amp;#39;t think that it&amp;#39;s
a great idea to do some high-volume heavy deadlifting and some high-volume heavy
squating on the same day. Maybe that&amp;#39;s just me though, but doing those to the
best of my ability is really taxing in a way that, for instance, the bench press
isn&amp;#39;t.&lt;/p&gt;
&lt;p&gt;That does leave me squatting only once a week when I used to squat thrice a week
(on every workout in StrongLifts!). Since I am making progress, I am fine with
it though. And legs weren&amp;#39;t particularly my priority during that period (or
really, in general).&lt;/p&gt;
&lt;p&gt;There is also a lot of calf exercises for not entirely clear reasons. It was
quite fun to train my calves, as that was a wholly untrained muscle for me. But
with more pressure on my time, I simply decide to do only one exercise per lower
body session. Mostly I&amp;#39;m doing the seated weight raises and the leg presses.
Might swap something else for the leg presses when I plateau there.&lt;/p&gt;
&lt;p&gt;In a cinch, I&amp;#39;ll also jettison the lying face pull (feels a bit gimmicky, and
there is already a kneeling face pull in the pull workout). Banded push-ups
often get &lt;em&gt;das boot&lt;/em&gt; (and when I do it at the end of a well-filled push workout,
they really don&amp;#39;t feel that useful). I tend to replace the hammer curls (in the
pull workout) with barbell curls (optionally making it a drag curl).&lt;/p&gt;
&lt;p&gt;Other exercises are also sometimes dropped in favour of the Wenning warmups. But
more on that later.&lt;/p&gt;
&lt;h2 id=&quot;discovering-new-muscles&quot;&gt;Discovering New Muscles&lt;/h2&gt;
&lt;p&gt;Since I had a lot of time at the start of that new program, I would sometimes
extend my workouts (or schedule extra workouts) with extra ab, glutes, and later
traps, lower back and forearms work.&lt;/p&gt;
&lt;p&gt;Compared to my strength in the big compound lifts (in particular the squat and
deadlift), my abs, glutes and (possibly) lower back had been criminally
neglected. As for traps, they&amp;#39;re not that important, but it actually felt good
to train them — it reduces the strain on them (traps tense very easily for me).
Forearm works mostly help with hanging exercises, and to stabilize the
bench/dumbbell press.&lt;/p&gt;
&lt;p&gt;As for the actual content of these workouts, I experimented with the ab workout
as part of the intermediate build program, and &lt;a href=&quot;https://athleanx.com/articles/abs-for-men/the-perfect-abs-workout&quot;&gt;this Athlean-X ab
workout&lt;/a&gt; (&lt;a href=&quot;https://www.youtube.com/watch?v=qk97w6ZmV90&quot;&gt;video&lt;/a&gt;), ultimately converging on that. It&amp;#39;s
actually two ab workout in one: a beginner and an advanced version.&lt;/p&gt;
&lt;p&gt;There are seemingly an infinite amount of ab exercises, and you can find already
find a &lt;a href=&quot;https://www.youtube.com/results?search_query=athlean-x+ab+workout&quot;&gt;varied selection&lt;/a&gt; on the Athlean-X channel, but what&amp;#39;s good about that
one in particular is that it outlines the different muscles and movement
patterns to hit to piece together a complete ab workout.&lt;/p&gt;
&lt;p&gt;I progressed a good deal, to the point I&amp;#39;m now able to perform 15 relatively good form
leg raises, though it&amp;#39;s frankly not my favorite exercise, as while quite taxing
for the abs, it&amp;#39;s one of those exercise where you can really power through as
the other muscles take over quite fast. Also just hanging for the duration is
not so easy.&lt;/p&gt;
&lt;p&gt;For the glutes, two exercises I recommand are the &lt;a href=&quot;https://www.menshealth.com/uk/fitness/a753007/resistance-band-crab-walk/&quot;&gt;resistance band crab
walk&lt;/a&gt; and the &lt;a href=&quot;https://www.youtube.com/watch?v=DbSF7ipBh5Y&quot;&gt;glute pull through&lt;/a&gt; (I&amp;#39;ve mostly run a variation where you
essentially do a wide squat while holding the rope in a similar position, but
the form presented in that video actually seems better).&lt;/p&gt;
&lt;p&gt;For the traps, besides the traditional shrugs (and variants: monkey shrugs,
overhead shrugs), you can sample from &lt;a href=&quot;https://www.youtube.com/watch?v=cYPDveEb1RQ&quot;&gt;this video&lt;/a&gt; (I&amp;#39;ve personally used
the cross-cable trap raise).&lt;/p&gt;
&lt;p&gt;Regarding the lower back, the stories is more complicated. I always assumed it
was quite strong as my very heavy deadlifts and squats tended to tax it quite a
bit. Those were in poor form, and the theory was that the strong lower back took
over, being not sufficiently assisted by e.g. glutes and abs. But this lower
back pain (purely muscular in nature) could also have been a sign that the
lower back was too weak. Hitting it directly with back extensions showed it
certainly wasn&amp;#39;t as strong there as I would have expected. In fact &lt;a href=&quot;https://builtwithscience.com/lower-back-exercises/&quot;&gt;it seems
it&amp;#39;s pretty weak for most people&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I now train the lower back with &lt;a href=&quot;https://www.youtube.com/watch?v=ph3pddpKzzw&quot;&gt;back extensions&lt;/a&gt; and &lt;a href=&quot;https://www.menshealth.com/fitness/a19520414/reverse-hyper/&quot;&gt;reverse hypers using an
incline bench&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For the forearms, I&amp;#39;ve mixed exercises form &lt;a href=&quot;https://www.youtube.com/watch?v=Ej4WzltO1DA&quot;&gt;this Athlean-X video&lt;/a&gt;
with exercises from &lt;a href=&quot;https://www.youtube.com/watch?v=0XS0j1Gtobw&quot;&gt;this Build with Science video&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Unfortunately, working these auxiliary muscles muscles (especially the abs,
traps and forearms) has a bit fallen by the wayside as I am more pressed for
time these days. I just can&amp;#39;t fit them in other workouts, so I end up sometimes
doing a special abs/trap workout, though that of course lengthens the whole
workout rotation. Glute and lower back work I integrated directly in the lower
body workouts, now as Wenning warmups.&lt;/p&gt;
&lt;h2 id=&quot;arms-specialization&quot;&gt;Arms Specialization&lt;/h2&gt;
&lt;p&gt;Part of the intermediate build program are a number of &lt;em&gt;specialization phases&lt;/em&gt;
where you put emphasis on a certain body part. I&amp;#39;ve only run one of those: the
arms one, as that was a muscle group I really wanted to build up.&lt;/p&gt;
&lt;p&gt;This post will end very long, so I&amp;#39;m going to describe the routine in precise
terms. Let&amp;#39;s suffice to say it did not alter the base workout fundamentally, but
added a few more biceps/triceps exercises, including some &lt;a href=&quot;https://en.wikipedia.org/wiki/Strength_training#Superset&quot;&gt;supersets&lt;/a&gt;, as well
as introducing narrow-grip bench presses. It makes place for this by cutting a
few exercises (two or three on the whole workout rotation) and a few sets on
others.&lt;/p&gt;
&lt;p&gt;My execution was not incredible. The specialization is meant to last 8 weeks (I
ended up doing 9) and overlapped a one-week business abroad, and a few days of
sickness. Still, I felt good activation over the duration, and was consequently
pretty satisfied with the experience.&lt;/p&gt;
&lt;p&gt;I feel like my arms, and in particular the triceps on which I placed a
particular emphasis during the specialization and afterwards, progressed nicely.&lt;/p&gt;
&lt;p&gt;It&amp;#39;s hard to tell however. Sure, the lifted weights are going up, and so is my
body weight. But visually, it&amp;#39;s hard to tell. I&amp;#39;m not taking physique pictures,
nor measuring arms circumference. Maybe I should do these things. But it&amp;#39;s even
more time and energy invested in this.&lt;/p&gt;
&lt;p&gt;I will have more to say about tracking training outcomes in the &lt;a href=&quot;#results&quot;&gt;Results&lt;/a&gt;
section below.&lt;/p&gt;
&lt;h2 id=&quot;wenning-warmups&quot;&gt;Wenning Warmups&lt;/h2&gt;
&lt;p&gt;Another change I made in my training (since mid-January) is that I started
incorporating so-called &lt;a href=&quot;https://www.youtube.com/watch?v=o61dLV9ccXA&quot;&gt;Wenning warmups&lt;/a&gt; (&lt;a href=&quot;https://www.youtube.com/watch?v=Csm3FrSMPPs&quot;&gt;lower body version&lt;/a&gt;):
basically do three exercises for 4 sets of 25 each, with a fast tempo at the
start of your workout. One exercise should mimic the movement pattern of the
main lift of the day, while the other two are in general used to work on weak
points (glute, hamstrings, lats, triceps, ...).&lt;/p&gt;
&lt;p&gt;I tried it because it was so simple to try out, but I ended up loving it. Matt
Wenning says this should take 12-15 minutes, but I hardly ever get it done under
20 (I probably could by lowering the weights, but I kinda like stretching it a
bit to progress).&lt;/p&gt;
&lt;p&gt;My lifts have been going up since I started implemented this, though to be
honest it may have been some other factors at play. In any case, this kind of
high-volume warmup will probably stay a fixture of my training in the future.&lt;/p&gt;
&lt;h2 id=&quot;results&quot;&gt;Results&lt;/h2&gt;
&lt;p&gt;Over the period, my bodyweight rose from 84kg in September to about 90kg now.
I&amp;#39;ve been bulking using a 300 calories surplus daily surplus which is about 10%
of my average calories intake (less on workout days, more on rest days). I&amp;#39;ve
erred on the side of more, but I certainly haven&amp;#39;t gone about 400 daily calories
on average.&lt;/p&gt;
&lt;p&gt;It&amp;#39;s often said that intermediate lifter can take about 0.5lb of muscle (or at
least, mass) per week, so about a kilogram per month. With 6kg taken, I&amp;#39;m right
in the numbers. Indubitably, I&amp;#39;ve taken some fat as well, though I&amp;#39;m not sure
how much. I think going into my next cut I want to track fat with tape
measurements + the gym&amp;#39;s impedance scale.&lt;/p&gt;
&lt;p&gt;In terms of strength, it&amp;#39;s hard to say what the results are. The main lifts have
gone up from their initial &amp;quot;reset&amp;quot; value when I switched to higher-volume,
lower-weight. The full data is in &lt;a href=&quot;#annex-1-lift-progress&quot;&gt;Annex 1&lt;/a&gt; below, but in summary my bench went
from 82.5 to 90kg (4x6), my squat from 90 to 110kg (3x80 + 1x90@90%) and my
deadlift from 110 to 127.5kg (4x8).&lt;/p&gt;
&lt;p&gt;These numbers do not tell a complete story though. The starting numbers were
determined via a rep-max calculator, and then diminished significantly after
experimentation. This made sense since the calculator only worked for one-set
maxes. Still, it is possibly I could have started heavier. I also got much less
training on the big lifts than I used to — only once a week (and more
realistically, maybe only once every 8.5 days or so in recent days).&lt;/p&gt;
&lt;p&gt;The progression was not linear either: most of these lifts were deloaded at
least once. In fact, I didn&amp;#39;t remember this, but apparently I deloaded all three
main lifts right at the time when I started incorporating Wenning warmups into
my routine (mid-January), and they&amp;#39;ve been growing since.&lt;/p&gt;
&lt;p&gt;So did I gain strength? The only way to know for sure will be to retry lifting
using my previous &amp;quot;settings&amp;quot; and see if the weights can go up. I probably want
to start doing 1-rep-max testing from time to time, to assess progress. I fully
expect I&amp;#39;ll be able to reclaim my former level, but whether I will have gained
much is a question that hangs up in the hair. I have definitely worked on some
weak muscles and in general got a good amount of quality reps in, so I&amp;#39;m
hopeful.&lt;/p&gt;
&lt;p&gt;But at the same time, I only practiced the big lifts once a week. If I were
focused on meaningful progress there, it should probably be ramped up to at
least twice.&lt;/p&gt;
&lt;p&gt;Physically speaking, I&amp;#39;m not very changed. If I was taking pictures I could
perhaps notice small changes, but nothing that is going to be visible to an
observer that saw me 6 months ago. This is somewhat disappointing, but it is
life. I expect the best change I can do right now is becoming significantly
leaner.&lt;/p&gt;
&lt;h2 id=&quot;thoughts&quot;&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;I&amp;#39;ve already given my thoughts on the Intermediate build program above. But
aside from that, what have I learned from this period?&lt;/p&gt;
&lt;p&gt;First, it was good to adopt a more well-rounded approach that includes more
muscles and weaknesses. The flip side was training big lifts only once per week.
This in turns means slower progress, but otherwise I was relatively fine with
it. I&amp;#39;m at a point in the road where I have to choose priorities more clearly,
and I think I will prioritize a more well-rounded bodybuilding-inspired type
approach, as opposed to chasing number of the big lifts, powerlifting-style.&lt;/p&gt;
&lt;p&gt;It was good in the sense of fixing underlying weaknesses and improving physique
(while my physique progressed little in the past six month, the whole paradigm
shift started with adopting Jeremy Ethier&amp;#39;s &lt;a href=&quot;https://builtwithscience.com/best-full-body-workout/&quot;&gt;full body workout&lt;/a&gt; &lt;a href=&quot;/weight-training-3&quot;&gt;a year
ago&lt;/a&gt; and I certainly saw results from that). It&amp;#39;s also good because I
enjoy it. I enjoyed &lt;a href=&quot;https://stronglifts.com/&quot;&gt;StrongLifts&lt;/a&gt; too, but I think that returning to it (or to
other hyper-focused powerlifting programs) would leave me wanting for something
else.&lt;/p&gt;
&lt;p&gt;A problem that surfaces however, is that of time management. 5 workouts a week
for 2 hours is simply too much. Even now that I&amp;#39;m somewhat cutting things to 1.5
hours most workouts, it&amp;#39;s still a lot. And accessory works on abs and traps has
fallen to the wayside. The Wenning warmups did not help with keeping the time
down (but that was mostly compensated by more cuts).&lt;/p&gt;
&lt;p&gt;It&amp;#39;s not entirely clear to me what the solution is yet, but it will probably
involve some kind of shifting focus. I&amp;#39;ve been reading up on &amp;quot;Reactive Training
Systems&amp;quot; (aka RTS, more on that below) and it proposes to use training blocks (of
individually-determined length, but typically 6-10 weeks) with shifting
approaches, to see what works and what doesn&amp;#39;t. This would also be a perfect
opportunity to shift one&amp;#39;s focus while some other area stay in maintenance mode.&lt;/p&gt;
&lt;p&gt;I also need to run deload weeks from time to time. I&amp;#39;ve done it once or twice
since last time, but I only do it when I really feel the need, which is probably
too late and very far from optimal. Again, RTS may provide an answer here.&lt;/p&gt;
&lt;h2 id=&quot;the-future&quot;&gt;The Future&lt;/h2&gt;
&lt;p&gt;I&amp;#39;ve had a couple ideas for the future. First, I want to redo smaller sets with
heavy weights, if only because I want to see what the last 6 months have gained
me in terms of strength. Maybe double up the frequency of the big lifts in order
to see some progress.&lt;/p&gt;
&lt;p&gt;The other big thing to do is to cut again, and hopefully go under what I reached
last time in terms of bodyfat percent.&lt;/p&gt;
&lt;p&gt;I also want to change the way I approach my programming, using Reactive Training
Systems (RTS) to program blocks and experiment. See the &lt;a href=&quot;#reactive-training-systems-rts&quot;&gt;RTS section&lt;/a&gt; below. As
such, training heavy compound lifts twice a week could be a dedicated block. The
cut, on the other hand, would necessarily span multiple blocks. This is
annoying, as one will necessarily not see the best results during a cut, but
somewhat necessary.&lt;/p&gt;
&lt;p&gt;All that is well and lofty, but for the time being we have to compose with the
coronavirus which caused all the gyms to shut down for at least two weeks here
in Belgium (and probably more). I&amp;#39;m of a mind to make the most of it and get
all-in on home workout. I&amp;#39;ve ordered two sets of reconfigurable 2-24kg dumbells,
but I plan to do mostly bodyweight work.&lt;/p&gt;
&lt;p&gt;Actually, I experimented with bodyweight training once a few months ago —
unwilling to drive to drive to a 24/7 gym, I cobbled up a push-up/chest workout.
It was much rougher than I expected and my arms probably got the sorest they&amp;#39;ve
ever been as a result. So naturally, I&amp;#39;m quite excited about getting to try
similar things again!&lt;/p&gt;
&lt;p&gt;In terms of particular muscle group, I think I need to keep training my lower
back. I&amp;#39;m also starting to wonder whether I shouldn&amp;#39;t do some quadriceps
isolation. This is usually a strong muscle for most people, but it sure seems to
be a bottleneck on the squat for me.&lt;/p&gt;
&lt;p&gt;Other things I&amp;#39;m considering for the some future are doing full body weight
training each day (mix upper and lower body during each session). This could be
done as supersets and could help drive the workout time down. The trick would be
to preserve or even increase volume under this new regime.&lt;/p&gt;
&lt;p&gt;I also want to keep paying attention to the small things and in particular
emphasize the &lt;a href=&quot;https://en.wikipedia.org/wiki/Eccentric_training&quot;&gt;eccentric&lt;/a&gt; part of my lifts.&lt;/p&gt;
&lt;h2 id=&quot;reactive-training-systems-rts&quot;&gt;Reactive Training Systems (RTS)&lt;/h2&gt;
&lt;p&gt;I learned about Reactive Training Systems through the [Stronger by Science]
podcast, though the best introduction is probably this &lt;a href=&quot;https://www.powerliftingtowin.com/a-review-of-mike-tuchscherers-reactive-training-systems-rt/sg&quot;&gt;Powerlifting to Win
review&lt;/a&gt; of the system as well as &lt;a href=&quot;https://www.powerliftingtowin.com/autoregulation/&quot;&gt;this article on
autoregulation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I&amp;#39;ve also started going through the articles on the &lt;a href=&quot;https://articles.reactivetrainingsystems.com/&quot;&gt;official website&lt;/a&gt; to
see what I could glean.&lt;/p&gt;
&lt;p&gt;In this section I want to highlight a few neat ideas (probably the main ideas)
from the system. These all relate to the key idea of &lt;em&gt;autoregulation&lt;/em&gt;: instead
of prescribing an absolute amount of sets/reps/weights, one should instead
ensure a certain amount of effort is exerted. Effort can vary greatly from day
to day, depending on rest, energy level, stress, ... By prescribing a set amount
of effort rather than fixed volume, you will ensure you do enough work to make
progress regardless of your condition.&lt;/p&gt;
&lt;h3 id=&quot;rpe&quot;&gt;RPE&lt;/h3&gt;
&lt;p&gt;RPE stands for rate of perceived exertion and its a way to qualify the effort
put into a set. Here is a handy chart:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;rpe-description.jpg&quot; alt=&quot;Flowchart describing RPE values from 5.5 to 10&quot;&gt;&lt;/p&gt;
&lt;p&gt;In practice, it&amp;#39;s rare to use RPE values of under 8.&lt;/p&gt;
&lt;p&gt;There are multiple ways to &amp;quot;use&amp;quot; RPE. A simple way is to find out how much
weight you should put on the bar. You fix the number of sets and the rep count
(or rep range) and then your goal is to lift the heaviest weight for which you
can attain the given RPE.&lt;/p&gt;
&lt;p&gt;Another way is to fix the weight but keep performing reps until you reach the
desired RPE. Doing that with a RPE of 10 is the classic &amp;quot;repeat to failure&amp;quot;
scheme.&lt;/p&gt;
&lt;p&gt;Those are both example of autoregulation! Personally, I&amp;#39;ve tended to stick to
much to a certain number of reps, when I could have done more, and I&amp;#39;ve also had
the tendency to feel disappointed when I fell short, while at the same time
feeling I&amp;#39;d put in a tremendous effort. In that light, the idea of RPE was
helpful to me, and I&amp;#39;ve made good use of it (though to be honest, most often by
simply going to failure on accessory lifts).&lt;/p&gt;
&lt;p&gt;Yet, I have reservations about RPE. First, it&amp;#39;s difficult to evaluate. RTS is
mostly about powerlifting, and it&amp;#39;s true it&amp;#39;s easier to estimate RPE in heavy,
compound movements (and interestingly for me, it&amp;#39;s easier to tell on the bench
press than on the squat and easier on the squat than on the deadlift). But even
on those heavy movement, I can generaly tell when my last rep is (i.e. not
attempt a rep that would be a failure) and &lt;em&gt;maybe&lt;/em&gt; tell when I have one rep left
in reserve (sometimes people use the acronym RIR for &amp;quot;rep in reserve&amp;quot;), but not
more. I haven&amp;#39;t really trained that capacity, but I&amp;#39;m dubious.&lt;/p&gt;
&lt;p&gt;In fact, on some exercises, I can hardly tell if I&amp;#39;m doing reps in good form at
all (this was my big frustration on the &lt;a href=&quot;https://stronglifts.com/barbell-row/&quot;&gt;barbell Pendlay row&lt;/a&gt; that was part of
StrongLifts.&lt;/p&gt;
&lt;p&gt;On bodybuilding-type exercises (isolations etc) with higher rep counts (12-15...
sometimes more) it&amp;#39;s also hard to tell. There also typically is the issue of
form degradation. It&amp;#39;s usually okay for the last reps not to look academic, but
how sloppy is too sloppy?&lt;/p&gt;
&lt;p&gt;My big take away from RPE is: set in advance the effort you want to get (to
failure? some reps in reserve? maybe first few sets with reps in reserve than to
failure on last set?) and performs reps accordingly.&lt;/p&gt;
&lt;p&gt;But RPE can also be used in other ways, which we&amp;#39;ll talk about soon.&lt;/p&gt;
&lt;h3 id=&quot;fatigue&quot;&gt;Fatigue&lt;/h3&gt;
&lt;p&gt;The concept of fatigue is another way to tackle autoregulation. Whereas RPE can
be used to modulate the number of reps, fatigue is used (in conjunction with
RPE) to modulate the number of sets.&lt;/p&gt;
&lt;p&gt;Here&amp;#39;s how it works: you set a fatigue amount in % (say 5%). Then you have two
options.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Load drops. You work your way to a top heavy set (usually your max for a
given rep count &amp;amp; RPE). You then drop the fatigue percent, and keep
performing sets with the same rep count until you reach the same rep count.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; - 90kg   ×5 @7      (warmup)
 - 95kg   ×5 @8      (warmup)
 - 100kg  ×5 @9      (top set)
 - 95kg   ×5 @8      (drop 5%)
 - 95kg   ×5 @8.5
 - 95kg   ×5 @9      (fatigue reached)&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Repeats. Instead of working your way up to a top heavy set, you pick some
fixed weight under your max. You then repeat sets using this weight until you
reach some pre-determined RPE. To determine the fatigue accrued from working
up from the starting RPE to the final RPE, you consult an RPE chart like the
one below and subtract the initial effort % from the final effort %.&lt;/p&gt;
&lt;p&gt;One rep at RPE 10 is your one-rep max, and thus 100% effort. Other
combinations have their effort expression as some percentage of that. Note
that this is a &amp;quot;stock&amp;quot; version of the chart, but it could differ from person
to person (some are better in certain rep ranges, or even on certain lifts),
so Mike Tuscherer (RTS&amp;#39; creator) encourages you to &lt;a href=&quot;https://articles.reactivetrainingsystems.com/2016/01/06/customizing-your-rpe-chart/&quot;&gt;customize your RPE
chart&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;rpe-chart.png&quot; alt=&quot;RPE chart: describe effort percent for RPE/number-of-reps pairs&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;blocks&quot;&gt;Blocks&lt;/h3&gt;
&lt;p&gt;RTS structures training in &amp;quot;blocks&amp;quot; and encourages you to experience different
things within a block.&lt;/p&gt;
&lt;p&gt;You should closely monitor your first block to determine your &amp;quot;time to peak&amp;quot; —
the number of weeks after which you&amp;#39;re likely to max out your lifts compared to
your starting weights. This is typically the same accross the big three
powerlifting lifts, although Tuchscherer warns that it can sometimes be
different. Progression being not always linear, your have to ensure you persist
long enough in your first blocks in order not to call it quits right before the
gains come in.&lt;/p&gt;
&lt;p&gt;Once you know your time to peak, you can use it to schedule blocks of that
duration, followed by a couple deload weeks (typically 1/3 of the time to peak).&lt;/p&gt;
&lt;p&gt;I like the idea of time-boxed blocks, though once again you have to note that
this is powerlifting approach. Doing each big lift only once a week, the
progress is likely to be slow (or blocks will be very long). And of course, I&amp;#39;m
a big fan of experimentation (while also believing you need to stick with
something long enough to be able to see progress).&lt;/p&gt;
&lt;p&gt;But the idea of blocks might also be to shift your focus. So maybe instead I can
focus on improving my bench press, or the number of pullups I can do, and then I
ramp up the frequency of these movements and determine the block time
accordingly. This is not unlike the Build with Science &amp;quot;specialization phases&amp;quot;,
although with clearer metrics.&lt;/p&gt;
&lt;p&gt;Each block should be followed by few weeks of deload, so that&amp;#39;s an easy way to
know when to schedule them.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;annex-1-lift-progress&quot;&gt;Annex 1: Lift Progress&lt;/h2&gt;
&lt;p&gt;Here are my stats for each of the exercises in the Built with Science
Intermediate Build program.&lt;/p&gt;
&lt;p&gt;I&amp;#39;ve done exercises outside the program, and dropped some of these exercises
(some I dropped earlier haven&amp;#39;t even been reported). The goal here is not to be
exhaustive, it is to provide an overview of my progress over the period.&lt;/p&gt;
&lt;p&gt;For each exercise, I&amp;#39;m reporting:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How much I lifted prior starting the program (if I did that exercise at all).&lt;/li&gt;
&lt;li&gt;How much I started lifting in the program.&lt;/li&gt;
&lt;li&gt;How much I peaked at (my record for the time I was on the program).&lt;/li&gt;
&lt;li&gt;How much I currently lift.&lt;/li&gt;
&lt;li&gt;Sometimes some extra comments.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;upper-body-workout-1&quot;&gt;Upper Body Workout&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Bench Pess&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;prior:&lt;/strong&gt; 3x100 + 2x3x92.5&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;start:&lt;/strong&gt; 4x6x82.5&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;peak/current:&lt;/strong&gt; 4x6x90&lt;/li&gt;
&lt;li&gt;Exhibits a pattern of loading/deloading quite unlike my other lifts (three
cycles). Should probably have done a deload week and gone back to the
previously mastered weight.&lt;/li&gt;
&lt;li&gt;Discovered that benching on a reverse incline bench (head down) is
actually slightly easier and could (should?) be used to help build the
normal bench press.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Chest-Supported Row&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;prior:&lt;/strong&gt; 3x15x65&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;start:&lt;/strong&gt; 3x8x75&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;peak:&lt;/strong&gt; 3x8x95&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;current:&lt;/strong&gt; 3x8x90&lt;/li&gt;
&lt;li&gt;Not done in February/March, mostly because I forgot :&amp;#39;(&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Overhead Press&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;prior:&lt;/strong&gt; 4x3x62.5&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;start:&lt;/strong&gt; 3x10x40&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;current/peak:&lt;/strong&gt; 3x8x50&lt;/li&gt;
&lt;li&gt;Slow but steady progression.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Lat Pulldown&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;prior/start:&lt;/strong&gt; 3x12x47&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;current(?)/peak:&lt;/strong&gt; 3x12x56.6&lt;/li&gt;
&lt;li&gt;Not done since December, dropped in favor of lat pulldowns as Wenning
warmups (current: 4x25x27.3).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;High to Low Cable Flies&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;start:&lt;/strong&gt; 3x15x9&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;current/peak:&lt;/strong&gt; 3x15x18&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Lying Face Pulls&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://youtu.be/2Vprklw8cu8?t=430&quot;&gt;single-rope elbow-first style&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;start:&lt;/strong&gt; 3x12x59&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;peak:&lt;/strong&gt; 3x12x77&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=eIq5CB9JfKE&quot;&gt;Athlean-X two-ropes hands-first style&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;start:&lt;/strong&gt; 3x15x27&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;current/peak:&lt;/strong&gt; 3x15x38&lt;/li&gt;
&lt;li&gt;Not done very regularly lately.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;lower-body-workout-1-1&quot;&gt;Lower Body Workout 1&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Front Squat&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;start:&lt;/strong&gt; 4x12x50&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;peak:&lt;/strong&gt; 4x12x65&lt;/li&gt;
&lt;li&gt;dropped (see above)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Deadlift&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;prior:&lt;/strong&gt; 3x150 (peak: 3x187.5 with sloppy form)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;start:&lt;/strong&gt; 4x8x110&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;peak:&lt;/strong&gt; 4x8x127.5&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;current:&lt;/strong&gt; 4x8x125&lt;/li&gt;
&lt;li&gt;A lots of ups and downs on the way.&lt;/li&gt;
&lt;li&gt;Experimented with hook grips.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hip Thrust&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;prior/start:&lt;/strong&gt; 4x12x50&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;peak:&lt;/strong&gt; 4x12x70&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;current:&lt;/strong&gt; 4x12x60 (??)&lt;/li&gt;
&lt;li&gt;Mostly dropped, too hard on the back for deadlift day.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Single Leg Weighted Calf Raise&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The numbers are all over the place for this one. Weight can vary wildly
depending on platform height, positioning, support, range of motion, time
under tension, ... I can probably do 3x10x28 with good form.&lt;/li&gt;
&lt;li&gt;Dropped (see above).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Leg press Calf Raise&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;start:&lt;/strong&gt; 4x12x39&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;peak/current:&lt;/strong&gt; 4x12x107&lt;/li&gt;
&lt;li&gt;Probably started a bit underpowered.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;push-workout-1&quot;&gt;Push Workout&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Incline Dumbbell Press&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;prior:&lt;/strong&gt; 3x10x34&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;start/peak/current:&lt;/strong&gt; 34/32/30&lt;/li&gt;
&lt;li&gt;Oh boy, I hadn&amp;#39;t realized.&lt;/li&gt;
&lt;li&gt;On the other hand, volume increased because it&amp;#39;s now followed by the flat press.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Flat Dumbbell Press&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;start:&lt;/strong&gt; 10x28/10x28/12x26&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;peak:&lt;/strong&gt; 8x34/6x32/11x30&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Cable Lateral Raise&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;start:&lt;/strong&gt; 2x11x9&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;peak/current:&lt;/strong&gt; 2x10x11.3&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Dumbbell Lateral Raise&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;prior:&lt;/strong&gt; 3x9x10&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;start:&lt;/strong&gt; 2x12x9&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;peak:&lt;/strong&gt; 2x12x10&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;current:&lt;/strong&gt; 2x11x8&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Banded Push-Up&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;start:&lt;/strong&gt; 13/9&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;peak:&lt;/strong&gt; 18/14&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;last:&lt;/strong&gt; 14/10&lt;/li&gt;
&lt;li&gt;I typically did this at the tail end of long workouts, so it mostly
reflects my energy level that day and not much else.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Overhead Triceps Rope Extensions&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;start:&lt;/strong&gt; 3x15x23&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;peak/current:&lt;/strong&gt; 3x15x41&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Bar Triceps Pushdown&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;start:&lt;/strong&gt; 3x12x43.3&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;peak/current:&lt;/strong&gt; (9/13/11)x56.3&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;pull-workout-1&quot;&gt;Pull Workout&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Weighted Pull-Ups&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;prior:&lt;/strong&gt; 6x15/8x10/7x5&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;start:&lt;/strong&gt; 6x12.5/8x7.5/7x5&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;peak:&lt;/strong&gt; 6x15/8x12.5/8x10&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;current:&lt;/strong&gt; 6x10/7x5/8x0&lt;/li&gt;
&lt;li&gt;Actually started at a deload point.&lt;/li&gt;
&lt;li&gt;It looks like regression, but you have to consider that I gained 6+ kilo
in the interval. But this sure isn&amp;#39;t progressing much either.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Seated Row&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;prior:&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;start:&lt;/strong&gt; 3x10x47.3&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;peak:&lt;/strong&gt; 10x70.6/2x10x68.3&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;current:&lt;/strong&gt; (15/14/11)x56.6&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;warmup:&lt;/strong&gt; 3x25x25/25x20.3&lt;/li&gt;
&lt;li&gt;Had to deload this to get a better activation.&lt;/li&gt;
&lt;li&gt;Feels even better as a Wenning warmup.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reverse Pec Deck&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;start:&lt;/strong&gt; 3x12x59&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;peak:&lt;/strong&gt; 3x12x79&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;current:&lt;/strong&gt; 10x66/12x66/8x66&lt;/li&gt;
&lt;li&gt;I varied the grip (pronated vs neutral), and the seat height, which give
vastly different activations. Here too, more weight is not necessarily
better if the activation isn&amp;#39;t there.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Kneeling Face Pulls (&lt;a href=&quot;https://youtu.be/2Vprklw8cu8?t=430&quot;&gt;Single Rope, Elbows-First Version&lt;/a&gt;)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;prior/start:&lt;/strong&gt; 4x12x64 (peak: ~4x13x73)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;peak:&lt;/strong&gt; 2x15x68/2x12x68&lt;/li&gt;
&lt;li&gt;Switched to the other kneeling face pull style&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Kneeling Face Pulls (&lt;a href=&quot;https://www.youtube.com/watch?v=eIq5CB9JfKE&quot;&gt;Dual Ropes, Hands-First Version&lt;/a&gt;)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;start:&lt;/strong&gt; 3x16x18 (with overhead extension)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;peak:&lt;/strong&gt; 3x15x27 (with overhead extension)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;peak/current:&lt;/strong&gt; 3x24x41 (without overhead extension)&lt;/li&gt;
&lt;li&gt;Dropped the accessory overhead extension to progress, but might
reintroduce it, it&amp;#39;s a great trap exercise.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Incline Dumbell Curls&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;start:&lt;/strong&gt; 3x10x10&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;peak/current:&lt;/strong&gt; 8x14/8x12/11x10&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hammer Curls&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;start/peak:&lt;/strong&gt; 3x10x14&lt;/li&gt;
&lt;li&gt;Not a huge fan of those, I replaced them with barbell curls.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Scapular Pull-Ups&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;start:&lt;/strong&gt; 2x10&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;peak/current (?):&lt;/strong&gt; 20/18/10&lt;/li&gt;
&lt;li&gt;This one is also a finisher, so numbers varied a bit but remained in the
same area. Except for that last time where I feel like I &lt;em&gt;got&lt;/em&gt; something
about the exercise I didn&amp;#39;t before... We&amp;#39;ll see if it reproduces!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;lower-body-workout-2-1&quot;&gt;Lower Body Workout 2&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Back Squat&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;prior:&lt;/strong&gt; 3x3x132.5 (peak: 3x3x150 with sloppy form)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;start:&lt;/strong&gt; 3x8x90&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;peak/current:&lt;/strong&gt; 3x8x110&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Bulgarian Split Squat&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;prior:&lt;/strong&gt; (9/12)x30 (peak: &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;start:&lt;/strong&gt; 4x10x20&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;peak:&lt;/strong&gt; 3x10x36&lt;/li&gt;
&lt;li&gt;dropped (see above)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Lying Leg Curl&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;start:&lt;/strong&gt; 2x12x36/10x36&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;peak/current:&lt;/strong&gt; 12x28.2/12x37.1/12x36&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;warmup:&lt;/strong&gt; 4x25x16.2&lt;/li&gt;
&lt;li&gt;Mostly done as warmups these days.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Smith Machine Calf Raises&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;start:&lt;/strong&gt; 3x15x55&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;peak:&lt;/strong&gt; 3x15x70&lt;/li&gt;
&lt;li&gt;Mostly dropped (see above)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Seated Weight Calf Raise&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;start:&lt;/strong&gt; 3x15x64&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;peak:&lt;/strong&gt; 3x15x95&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;current:&lt;/strong&gt; 2x15x85/14x85&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
      </description>
      <pubDate>2020-03-19T23:00:00.000Z</pubDate>
      <link>http://norswap.com/weight-training-5</link>
      <guid isPermaLink="true">http://norswap.com/weight-training-5</guid>
    </item>
    <item>
      <title>Shell Deep Dive: Easy Unix Daemons (on macOS too)</title>
      <description>
&lt;p&gt;I&amp;#39;ve been setting up my new work machine recently, and while doing so I
encountered an interesting challenge.&lt;/p&gt;
&lt;p&gt;I wanted to setup a proxy to the company&amp;#39;s VPN as a daemon. Here was my feature
wishlist:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Runs in the background.&lt;/li&gt;
&lt;li&gt;Starts at startup or login.&lt;/li&gt;
&lt;li&gt;Can be manually killed / relaunched.&lt;/li&gt;
&lt;li&gt;Output visible (e.g. via log files).&lt;/li&gt;
&lt;li&gt;Restarts automatically if it stops for some reason.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now, there are daemons systems build into most OSes. For macOS this is &lt;code&gt;launchd&lt;/code&gt;
(for &amp;quot;launch daemon&amp;quot;). On Linux it&amp;#39;s most likely than not &lt;code&gt;systemd&lt;/code&gt;, though are
other systems, like the venerable &lt;code&gt;sysvinit&lt;/code&gt; and &lt;code&gt;OpenRC&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Even before starting however, I knew (from reputation and past personal
experiences) that those systems sucked mightily. The less I had to deal / rely
on them, the better. But I&amp;#39;ll expand on that &lt;a href=&quot;#startup&quot;&gt;later&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In the end I did actually use &lt;code&gt;launchd&lt;/code&gt; to launch at startup. I&amp;#39;m not providing
details for linux, but &lt;a href=&quot;https://unix.stackexchange.com/questions/233468/how-does-systemd-use-etc-init-d-scripts&quot;&gt;look here for pointers about systemd&lt;/a&gt; (and
by the same occasion note that I&amp;#39;m right: this is a mess).&lt;/p&gt;
&lt;h2 id=&quot;running-in-the-background&quot;&gt;Running in the Background&lt;/h2&gt;
&lt;p&gt;Your daemon system will run jobs in the background for you. Nevertheless it&amp;#39;s
quite interesting to take a small detour to see how one can run a job in the
background from the user shell. In fact this is how I stumbled upon the
backbone of my solution.&lt;/p&gt;
&lt;p&gt;The obvious way is to append &lt;code&gt;&amp;amp;&lt;/code&gt; at the end of your command. This runs in the
background, but the command is now a child of the current shell, and will be
terminated along with the shell.&lt;/p&gt;
&lt;p&gt;The traditional approach in this case is to do something like &lt;code&gt;nohup &amp;lt;command&amp;gt; &amp;amp; disown&lt;/code&gt;. &lt;a href=&quot;https://unix.stackexchange.com/a/148698&quot;&gt;Here is a very thorough explanation of that command.&lt;/a&gt;
But basically: &lt;code&gt;disown&lt;/code&gt; just removes the command from the list of the shell&amp;#39;s
job while &lt;code&gt;nohup&lt;/code&gt; redirects the terminal output to a file called &lt;code&gt;nohup.out&lt;/code&gt; in
the current directory (or you can just redirect it yourself), as well as closes
terminal input. Using either &lt;code&gt;disown&lt;/code&gt; or &lt;code&gt;nohup&lt;/code&gt; (or both) will prevent the
command from being killed when the shell is killed (it prevents the sending of
the &lt;code&gt;SIGHUP&lt;/code&gt; signal (&amp;quot;signal hang up&amp;quot;), which is &amp;quot;a signal sent to a process
when its controlling terminal is closed&amp;quot;).&lt;/p&gt;
&lt;p&gt;So this works rather nicely.&lt;/p&gt;
&lt;p&gt;But I have an even better solution: use &lt;code&gt;screen&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In short, &lt;code&gt;screen&lt;/code&gt; lets you start a virtual shell that you can &amp;quot;attach&amp;quot; to a
real shell, or &amp;quot;detach&amp;quot; from. So you can use it to run a command in its own
shell, which you can recall at will, in any real shell.&lt;/p&gt;
&lt;p&gt;The advantages of &lt;code&gt;screen&lt;/code&gt; is that you can use it for job control. We couldn&amp;#39;t
have used normal shell job control (using the command &lt;code&gt;jobs&lt;/code&gt;) because it is
shell-specific (not shared between different shell instances). So you can&amp;#39;t use
it as soon as you close the original shell used to run the command. And if you
want to kill the command at that point, you need to find out its PID and use
&lt;code&gt;pkill&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But with &lt;code&gt;screen&lt;/code&gt;, you can do this, from any shell:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ screen -dm &amp;lt;command&amp;gt;           # start command in background
$ screen -dm -S &amp;lt;name&amp;gt; &amp;lt;command&amp;gt; # ... and give it a specific name
$ screen -ls                     # list all running screens
$ screen -r &amp;lt;name&amp;gt;               # (re)attach to the given screen
$ screen -S &amp;lt;name&amp;gt; -X quit       # kill the given screen&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since some of those are not super intuitive, I propose the use of the following
aliases and functions:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;alias sjobls=&amp;#39;screen -ls&amp;#39;
alias sjoba=&amp;#39;screen -r&amp;#39;
alias sjobmk=&amp;#39;screen -dm -S&amp;#39;

sjobk() {
    screen -S $1 -X quit
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Final tip: when you attach to the screen, it&amp;#39;s &lt;code&gt;ctrl+a d&lt;/code&gt; (or &lt;code&gt;cmd+a d&lt;/code&gt; on mac)
to detach.&lt;/p&gt;
&lt;h2 id=&quot;repeating-the-command&quot;&gt;Repeating the Command&lt;/h2&gt;
&lt;p&gt;To repeat a command in &lt;code&gt;bash&lt;/code&gt;, with 3 seconds of delay between each execution,
you&amp;#39;d normaly do:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;while true; do &amp;lt;command&amp;gt;; sleep 3; done&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which you can turn into the following function:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;repeat() {
    while true; do $1; sleep 3; done
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANT POINT:&lt;/strong&gt; Making a function was a mistake. This is also valid for
other functions that will be presented later. It should be a script to be put
somewhere on the path instead. Why?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;By making it a script, you can use a shebang (&lt;code&gt;#!&lt;/code&gt;) to specify the shell
(&lt;code&gt;bash&lt;/code&gt;, &lt;code&gt;zsh&lt;/code&gt;, ...) used to run it, making it usable whatever shell you
decide to run as a user.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Functions are normally not inherited by sub-shells. In Bash, it&amp;#39;s actually
possible to export them anyway by using &lt;code&gt;export -f &amp;lt;function&amp;gt;&lt;/code&gt;. And as we&amp;#39;ll
see later, we really want to use subshells.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This remark, aside, there is a couple improvements we might want to make to our
function.&lt;/p&gt;
&lt;p&gt;First, we&amp;#39;d like to be able to pass an optional argument specifying the duration of
  the delay between two command runs.&lt;/p&gt;
&lt;p&gt;Second, we&amp;#39;d like the command to be not only a simple command, but also a whole
pipeline (including pipes &lt;code&gt;|&lt;/code&gt; and redirects &lt;code&gt;&amp;gt;&lt;/code&gt;). But if we try the naive way,
we&amp;#39;ll rune into a parser issue.&lt;/p&gt;
&lt;p&gt;Consider the command &lt;code&gt;echo &amp;quot;x&amp;quot; | cat -n&lt;/code&gt;. This prints &lt;code&gt;1 x&lt;/code&gt; to standard output
(&lt;code&gt;-n&lt;/code&gt; is the option for line numbering). Then try running &lt;code&gt;repeat echo &amp;quot;x&amp;quot; | cat -n&lt;/code&gt;. This &lt;em&gt;should&lt;/em&gt; output &lt;code&gt;1 x&lt;/code&gt; multiple times. Instead it prints &lt;code&gt;1 x&lt;/code&gt;, then &lt;code&gt;2 x&lt;/code&gt;, then &lt;code&gt;3 x&lt;/code&gt;, etc. This is because the command is interpreted as &lt;code&gt;(repeat echo &amp;quot;a&amp;quot;) | cat&lt;/code&gt; and not &lt;code&gt;repeat (echo &amp;quot;a&amp;quot; | cat)&lt;/code&gt; (note the use of parentheses here
is not valid Bash syntax).&lt;/p&gt;
&lt;p&gt;How to pass a pipe then? We have to quote it, then pass it as a parameter to
&lt;code&gt;bash -c&lt;/code&gt;. e.g. &lt;code&gt;repeat &amp;#39;echo &amp;quot;a&amp;quot; | cat -n&amp;#39;&lt;/code&gt; This is by no means perfect — it
gets annoying when dealing with commands that already have multiple level of
quotations: for instance &lt;code&gt;echo &amp;quot;&amp;#39;a&amp;#39;&amp;quot;&lt;/code&gt; should have been quoted as &lt;code&gt;&amp;#39;echo &amp;quot;\&amp;#39;a\&amp;#39;&amp;quot;&amp;#39;&lt;/code&gt;. But it&amp;#39;s still a good step forward.&lt;/p&gt;
&lt;p&gt;With all the considerations factored in, we get the following function:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;repeat() {
    local OPT OPTIND OPTARG T=3
    while getopts &amp;quot;:t:&amp;quot; OPT; do
        case $OPT in
            t)  T=$OPTARG;;
            \?) echo &amp;quot;Usage: repeat [-t &amp;lt;Time interval in seconds&amp;gt;] &amp;lt;command&amp;gt;&amp;quot;;
                return;;
        esac
    done
    shift $((OPTIND - 1))
    while true; do bash -c &amp;quot;$*&amp;quot;; sleep $T; done
}
export -f repeat&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For a brief description of argument handling: the option string &lt;code&gt;:t:&lt;/code&gt; says that
to disable getopt&amp;#39;s normal error output (first colon &lt;code&gt;:&lt;/code&gt;): we&amp;#39;ll do it ourselves
with the &lt;code&gt;\?&lt;/code&gt; option. The &lt;code&gt;t:&lt;/code&gt; part says we expect an optional argument &lt;code&gt;t&lt;/code&gt; that
takes a value (the second colon &lt;code&gt;:&lt;/code&gt;). The variable &lt;code&gt;OPT&lt;/code&gt; receives the option
letter in the loop, while &lt;code&gt;OPTARG&lt;/code&gt; received the option value (if any). &lt;code&gt;OPTIND&lt;/code&gt;
is set the index of the next (unprocessed) argument. The loop stop when all
options have been processed. The &lt;code&gt;shift $((OPTIND - 1))&lt;/code&gt; removes all processed
options from the list of arguments (accessible via &lt;code&gt;$*&lt;/code&gt;, &lt;code&gt;$@&lt;/code&gt; and &lt;code&gt;$1&lt;/code&gt;, &lt;code&gt;$2&lt;/code&gt;,
...). Check &lt;a href=&quot;https://sookocheff.com/post/bash/parsing-bash-script-arguments-with-shopts/&quot;&gt;this tutorial&lt;/a&gt; for more information.&lt;/p&gt;
&lt;p&gt;An important note on &lt;code&gt;bash -c &amp;quot;$*&amp;quot;&lt;/code&gt;: &lt;code&gt;&amp;quot;$*&amp;quot;&lt;/code&gt; will expand to all remaining
arguments, &lt;em&gt;quoted as a single parameter&lt;/em&gt;. In this way, &lt;code&gt;repeat&lt;/code&gt; can be used
with or without quoting whenever supported: &lt;code&gt;repeat echo &amp;quot;x&amp;quot;&lt;/code&gt; or &lt;code&gt;repeat &amp;#39;echo &amp;quot;x&amp;quot; | cat -n&amp;#39;&lt;/code&gt; (using pipes while not quoting still doesn&amp;#39;t work).&lt;/p&gt;
&lt;p&gt;The alternative to &lt;code&gt;&amp;quot;$*&amp;quot;&lt;/code&gt; is &lt;code&gt;&amp;quot;$@&amp;quot;&lt;/code&gt; which expands to the same arguments, but
quoted individually. Since &lt;code&gt;bash -c&lt;/code&gt; expects a single argument, this wouldn&amp;#39;t
work when used without quotes. We&amp;#39;ll however use &lt;code&gt;&amp;quot;$@&amp;quot;&lt;/code&gt; later!&lt;/p&gt;
&lt;h2 id=&quot;getting-the-process-output&quot;&gt;Getting The Process&amp;#39; Output&lt;/h2&gt;
&lt;p&gt;A simple way to get the process&amp;#39; output even though it runs in the background is
simply to redirect it. Because of how we built it, this is even compatible with
our &lt;code&gt;repeat&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;But if we&amp;#39;re going to use &lt;code&gt;screen&lt;/code&gt;, we can simply attach to the screen and see
what&amp;#39;s going on.&lt;/p&gt;
&lt;p&gt;This has, however, two slight issues:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The logs are lost in case the machine shuts down. Here, simply using the &lt;code&gt;tee&lt;/code&gt;
command (&lt;a href=&quot;http://man7.org/linux/man-pages/man1/tee.1.html&quot;&gt;manpage&lt;/a&gt;) works: &lt;code&gt;&amp;lt;command&amp;gt; | tee logfile&lt;/code&gt; enables us to
benefit from both logs and screen output.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;If the command terminates, then the screen shuts down and the output is lost.
Not necessarily a problem if you log, but it is if you don&amp;#39;t.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(At this point, I&amp;#39;ll note that for my proxy I don&amp;#39;t really care about long-time
logs, I just want to be able to know what&amp;#39;s happening &lt;em&gt;right now&lt;/em&gt;, sometimes.
Also proper log management requires some thought, as &amp;quot;just append forever&amp;quot; might
work in practice, but it makes fussy me shudder.)&lt;/p&gt;
&lt;p&gt;To solve that second issue, I introduced a function called &lt;code&gt;remain&lt;/code&gt;, which would
take a command as parameter (much like &lt;code&gt;repeat&lt;/code&gt;) and run a shell once that
command exited.&lt;/p&gt;
&lt;p&gt;You can actually achieve that quite easily with just &lt;code&gt;&amp;lt;command&amp;gt;; bash&lt;/code&gt;, as long
as the command exits by itself. By hitting &lt;code&gt;ctrl+c&lt;/code&gt; in the screen (and thus
sending &lt;code&gt;SIGINT&lt;/code&gt;), you&amp;#39;ll shut down the whole chain, just like in a regular
shell.&lt;/p&gt;
&lt;p&gt;But imagine you want to kill the command, while still being able to peruse the
output in the shell? (Again, quite relevant to my use case: stop trying to
connect to the proxy, but let me see what&amp;#39;s going on.) Well that&amp;#39;s possible too:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;remain() {
    trap &amp;quot;echo Interrupted by user&amp;quot; SIGINT
    bash -c &amp;quot;$*&amp;quot;
    exec bash
}
export -f remain&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This traps &lt;code&gt;SIGINT&lt;/code&gt;, making it echo a message rather than letting it kill the
screen. We run our command using &lt;code&gt;bash -c&lt;/code&gt; (again, to enable passing whole
pipelines to the function). We end by &lt;code&gt;exec bash&lt;/code&gt; which makes the process
becomes bash. We could just have written &lt;code&gt;bash&lt;/code&gt; there instead, this is just a
tiny bit more economical.&lt;/p&gt;
&lt;h2 id=&quot;quoting-woes&quot;&gt;Quoting Woes&lt;/h2&gt;
&lt;p&gt;It&amp;#39;s time for a little confession: &lt;code&gt;repeat&lt;/code&gt; and &lt;code&gt;remain&lt;/code&gt; are not entirely robust
as-is.&lt;/p&gt;
&lt;p&gt;Consider that we want to use &lt;code&gt;remain&lt;/code&gt; with &lt;code&gt;repeat&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;remain repeat &amp;#39;echo &amp;quot;x&amp;quot; | cat -n&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What happens is that the &lt;code&gt;bash -c &amp;quot;$*&amp;quot;&lt;/code&gt; line in &lt;code&gt;remain&lt;/code&gt; expands to something
equivalent to &lt;code&gt;bash -c &amp;#39;repeat echo &amp;quot;x&amp;quot; | cat -n&amp;#39;&lt;/code&gt; — the outer quotes have been
stripped! This will misbeheave in &lt;code&gt;repeat&lt;/code&gt;, producing the wrong &lt;code&gt;1 x&lt;/code&gt;, &lt;code&gt;2 x&lt;/code&gt;
(etc) output rather than straight &lt;code&gt;1 x&lt;/code&gt; each time.&lt;/p&gt;
&lt;p&gt;We cannot &amp;quot;just&amp;quot; use &lt;code&gt;&amp;quot;$@&amp;quot;&lt;/code&gt; instead of &lt;code&gt;&amp;quot;$*&amp;quot;&lt;/code&gt; either: &lt;code&gt;bash -c &amp;quot;$@&amp;quot;&lt;/code&gt; would
expand to &lt;code&gt;bash -c &amp;#39;repeat&amp;#39; &amp;#39;echo &amp;quot;x&amp;quot; | cat -n&amp;#39;&lt;/code&gt; — but &lt;code&gt;bash -c&lt;/code&gt; expects a
single argument!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Important note:&lt;/strong&gt; I&amp;#39;m slighlty simplifying here. In particular here, &lt;code&gt;bash -c &amp;quot;$@&amp;quot;&lt;/code&gt; would not &lt;em&gt;literally&lt;/em&gt; expand to &lt;code&gt;bash -c &amp;#39;repeat&amp;#39; &amp;#39;echo &amp;quot;x&amp;quot; | cat -n&amp;#39;&lt;/code&gt;.
Instead the shell would perform expansion and the result would be an
interpretation like &amp;quot;invoke &lt;code&gt;bash&lt;/code&gt; with three parameters of value &lt;code&gt;-c&lt;/code&gt;, &lt;code&gt;repeat&lt;/code&gt;
and &lt;code&gt;repeat&amp;#39; &amp;#39;echo &amp;quot;x&amp;quot; | cat -n&lt;/code&gt; on which no further expansion must be
performed&amp;quot;. Otherwise, &lt;code&gt;&amp;quot;$@&amp;quot;&lt;/code&gt; wouldn&amp;#39;t work with parameters containing single
quotes!&lt;/p&gt;
&lt;p&gt;The solution is to re-insert the quotes manually. for this we introduce a
function called &lt;code&gt;quote_args&lt;/code&gt;, which takes a series of arguments and sets &lt;code&gt;ARGS&lt;/code&gt;
to the concatenation of all those arguments with quotes inserted around each of
them (excepted when there is a single argument).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;quote_args() {
    ARGS=&amp;#39;&amp;#39;
    # single argument: output directly
    if [[ $# -eq 1 ]]; then
        ARGS=&amp;quot;$1&amp;quot;
        return
    fi
    # multiple arguments: quote each and output
    for ARG in &amp;quot;$@&amp;quot;; do
        ARGS+=&amp;quot;&amp;#39;$ARG&amp;#39;&amp;quot;
    done
}
export -f quote_args&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Why add exception for single arguments? Consider the following examples given
that we always quote even on single args:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;always_quote_args echo hello

bash -c &amp;quot;$ARGS&amp;quot;
# 1.    &amp;quot;expansion&amp;quot;: bash -c &amp;quot;&amp;#39;echo&amp;#39; &amp;#39;hello&amp;#39;&amp;quot;
#       output: &amp;quot;hello&amp;quot;

bash -c $ARGS
# 2.    &amp;quot;expansion&amp;quot;: bash -c &amp;#39;echo&amp;#39; &amp;#39;hello&amp;#39;
#       output: &amp;quot;&amp;quot;

always_quote_args &amp;#39;echo hello&amp;#39;

bash -c &amp;quot;$ARGS&amp;quot;
# 3.    &amp;quot;expansion&amp;quot;: bash -c &amp;quot;&amp;#39;echo hello&amp;#39;&amp;quot;
#       output: bash: echo hello: command not found

bash -c $ARGS
# 4.    &amp;quot;expansion&amp;quot;: bash -c &amp;#39;echo hello&amp;#39;
#       output: &amp;quot;hello&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(&lt;em&gt;Expansion&lt;/em&gt; is quoted because again, bash does not expand to a textual
representation, but to an internal representation tracking &amp;quot;words&amp;quot;.)&lt;/p&gt;
&lt;p&gt;We would like behaviour 1 and 4, meaning we need to know the number of arguments
to know whether to quote &lt;code&gt;$ARGS&lt;/code&gt;. So we move this choice into &lt;code&gt;quote_args&lt;/code&gt;
itself and now we should just always quote &lt;code&gt;$ARGS&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This is not always &amp;quot;correct&amp;quot; depending on what you need to do, but it&amp;#39;s good for
commands like &lt;code&gt;bash -c&lt;/code&gt; that expect a command as a single argument. As always,
the key is to understand what this is doing so you can reason about it.&lt;/p&gt;
&lt;p&gt;Now that we have &lt;code&gt;quote_args&lt;/code&gt;, we can patch &lt;code&gt;repeat&lt;/code&gt; and &lt;code&gt;remain&lt;/code&gt; with it:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;repeat() {
    local OPT OPTIND OPTARG T=3
    while getopts &amp;quot;:t:&amp;quot; OPT; do
        case $OPT in
            t)  T=$OPTARG;;
            \?) echo &amp;quot;Usage: repeat [-t &amp;lt;Time interval in seconds&amp;gt;] &amp;lt;command&amp;gt;&amp;quot;;
                return;;
        esac
    done
    shift $((OPTIND - 1))
    quote_args &amp;quot;$@&amp;quot;
    while true; do bash -c &amp;quot;$ARGS&amp;quot;; sleep $T; done
}
export -f repeat

remain() {
    trap &amp;quot;echo Interrupted by user&amp;quot; SIGINT
    quote_args &amp;quot;$@&amp;quot;
    bash -c &amp;quot;$ARGS&amp;quot;
    exec bash
}
export -f remain&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So in our initial example (&lt;code&gt;remain repeat &amp;#39;echo &amp;quot;x&amp;quot; | cat -n&amp;#39;&lt;/code&gt;), we end up with
&lt;code&gt;ARGS&lt;/code&gt; containing &lt;code&gt;&amp;#39;repeat&amp;#39; &amp;#39;echo &amp;quot;x&amp;quot; | cat -n&amp;#39;&lt;/code&gt;. Using &lt;code&gt;&amp;quot;$ARGS&amp;quot;&lt;/code&gt; within
&lt;code&gt;remain&lt;/code&gt; then produces a single argument where the individual arguments are
properly quoted: &lt;code&gt;&amp;quot;&amp;#39;repeat&amp;#39; &amp;#39;echo &amp;quot;x&amp;quot; | cat -n&amp;#39;&amp;quot;&lt;/code&gt;. (Note that in this case we
are literally expanding to that, and that &lt;code&gt;quote_args&lt;/code&gt; is not meant to be used
with arguments that contain literal single quotes!) Within &lt;code&gt;repeat&lt;/code&gt;, the single
argument is note quoted again and passed to &lt;code&gt;bash -c&lt;/code&gt; directly. It works!&lt;/p&gt;
&lt;h2 id=&quot;putting-the-pieces-together&quot;&gt;Putting the Pieces Together&lt;/h2&gt;
&lt;p&gt;Now that we have a repeating mechanism and one to be able to preserve the
output, we still need to combine those things together, and then to combine them
with &lt;code&gt;screen&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let&amp;#39;s consider a simpler but useful case first. If we want to use &lt;code&gt;screen&lt;/code&gt; for
job control, it&amp;#39;d make sense to have a command that:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Calls &lt;code&gt;remain&lt;/code&gt; so that we can check on the output after the job is &amp;quot;done&amp;quot;.&lt;/li&gt;
&lt;li&gt;Can take pipes just like we did in &lt;code&gt;repeat&lt;/code&gt; and &lt;code&gt;remain&lt;/code&gt;, and not just a
single command. Additionally, &lt;code&gt;screen&lt;/code&gt; can&amp;#39;t normally take Bash function
calls as parameter (that&amp;#39;s because it passes its arguments to &lt;code&gt;exec&lt;/code&gt;, not
&lt;code&gt;bash&lt;/code&gt;). Our fix will allow that.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For this simple(r) case, I&amp;#39;m making a function called &lt;code&gt;sjob&lt;/code&gt; (for &amp;quot;screen job&amp;quot;)
that takes an optional &lt;code&gt;-n&lt;/code&gt; option to set the job name (equivalent to &lt;code&gt;screen&lt;/code&gt;&amp;#39;s
own &lt;code&gt;-S&lt;/code&gt; parameter) and (a) parameter(s) to specify the command, similar to
&lt;code&gt;remain&lt;/code&gt; and &lt;code&gt;repeat&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;sjob() {
    local OPT OPTIND OPTARG N=sjob
    while getopts &amp;quot;:n:&amp;quot; OPT; do
        case $OPT in
            n)  N=$OPTARG;;
            \?) echo &amp;quot;Usage: sjob [-n &amp;lt;Name&amp;gt;] &amp;lt;command&amp;gt;&amp;quot;;
                return;;
        esac
    done
    shift $((OPTIND - 1))
    quote_args &amp;quot;$@&amp;quot;
    screen -dm -S $N bash -c &amp;quot;remain $ARGS&amp;quot;
}
export -f sjob&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can see all our previous tricks: option handling, &lt;code&gt;quote_args&lt;/code&gt; and a direct
call to &lt;code&gt;remain&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now for the full shebub, we also want to throw &lt;code&gt;repeat&lt;/code&gt; in the mix. Since this
is going to be run by some kind of init system (&lt;code&gt;launchd&lt;/code&gt;, &lt;code&gt;systemd&lt;/code&gt;, ...), we
also want to make sure that the command is only run once even if the function is
called multiple times. We&amp;#39;ll use a unique name + &lt;code&gt;screen -ls&lt;/code&gt; to ensure that.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;daemon() {
    local OPT OPTIND OPTARG T=3 N=daemon
    while getopts &amp;quot;:n:t:&amp;quot; OPT; do
        case $OPT in
            t)  T=$OPTARG;;
            n)  N=$OPTARG;;
            \?) echo &amp;quot;Usage: daemon [-n &amp;lt;Name&amp;gt;] [-t &amp;lt;Time interval in seconds&amp;gt;] &amp;lt;command&amp;gt;&amp;quot;;
                return;;
        esac
    done
    shift $((OPTIND - 1))
    # Only run if the daemon by this name is not already running.
    (screen -ls | grep -q $N) &amp;amp;&amp;amp; return
    sjob -n $N repeat -t $T &amp;quot;$@&amp;quot;
}
export -f daemon&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that this doesn&amp;#39;t use &lt;code&gt;quote_args&lt;/code&gt;: &lt;code&gt;sjob&lt;/code&gt; can handle that, and we use
&lt;code&gt;&amp;quot;$@&amp;quot;&lt;/code&gt; meaning the arguments we receive (minus the processed options) will be
passed as &amp;quot;as-is&amp;quot; and not unduly split because of stripped quotes.&lt;/p&gt;
&lt;h2 id=&quot;calling-at-startup-mac-only&quot;&gt;Calling at Startup (mac-only)&lt;/h2&gt;
&lt;div id=startup /&gt;

&lt;p&gt;Only one step remains: actually running our &lt;code&gt;daemon&lt;/code&gt; function with the command
as parameter on startup.&lt;/p&gt;
&lt;p&gt;In a better world, we&amp;#39;d just need to plop down a script in a directory, and be
done with it. That&amp;#39;s what most Linux distribution &lt;em&gt;attempt&lt;/em&gt; to do (typically the
directory is &lt;code&gt;/etc/init.d&lt;/code&gt;). However, here is &lt;a href=&quot;https://gist.github.com/mrowe/8b617a8b12a6248d48b8&quot;&gt;the skeleton&lt;/a&gt; for what you&amp;#39;re
supposed to do in Debian and &amp;quot;I can&amp;#39;t even&amp;quot; — there is just too much ceremony to
be handled upfront.&lt;/p&gt;
&lt;p&gt;Ideally, you should be able to just run every script in the directory, period.
Need to log? Add that in your script. Need to relaunch the command if it dies?
Add that in your script (e.g. &lt;code&gt;repeat&lt;/code&gt;). This skeleton strikes me as very
un-unixy.&lt;/p&gt;
&lt;p&gt;For sure this is probably very robust, and you might want system daemons to use
such a system. For 99% of the things &lt;em&gt;I&lt;/em&gt; want to run at startup, this is
massively overkill.&lt;/p&gt;
&lt;p&gt;But this is mac we&amp;#39;re talking about, so we&amp;#39;re not even there. Instead you have
to configure a &lt;em&gt;stupid xml file&lt;/em&gt;.&lt;/p&gt;
&lt;div class=nsep&gt;&lt;/div&gt;

&lt;p&gt;So here is my plan: if I&amp;#39;m going to go through these pains once, I might as well
make so that the script being run runs all scripts in a given directory (in my
case I chose &lt;code&gt;~/startup&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;I followed &lt;a href=&quot;https://medium.com/@fahimhossain_16989/adding-startup-scripts-to-launch-daemon-on-mac-os-x-sierra-10-12-6-7e0318c74de1&quot;&gt;this guide&lt;/a&gt; (warning: not fully trustworthy, for
instance it has you setup a system-level daemon instead of user-level, which is
a bad idea), and you can refer to &lt;a href=&quot;https://www.launchd.info/&quot;&gt;this very handy reference&lt;/a&gt;. But
for those who want the short of it (at least at the time of writing), keep
reading.&lt;/p&gt;
&lt;p&gt;What you&amp;#39;ll want to do is create a &lt;code&gt;.plist&lt;/code&gt; file. I called mine
&lt;code&gt;com.startup.plist&lt;/code&gt;, after the previous tutorial.&lt;/p&gt;
&lt;p&gt;At this point you get a choice: make it a &amp;quot;LaunchDaemon&amp;quot; (system-level, run at
boot time) or a &amp;quot;LaunchAgent&amp;quot; (user-level, run on logon). If you going to run
Bash, you most certainly want a LaunchAgent (otherwise your commands will end up
being run as root, in a root shell, which for one does not inherit your Bash
profile). LaunchDaemons also have a bunch of restriction on file permissions,
path of programs/scripts being run (can&amp;#39;t be in home directories), ...&lt;/p&gt;
&lt;p&gt;LaunchAgents must be created in &lt;code&gt;~/Library/LaunchAgents&lt;/code&gt; (run only for the
current user) or &lt;code&gt;/Library/LaunchAgents&lt;/code&gt; (run for all users). For LaunchDaemons,
it&amp;#39;s &lt;code&gt;/Library/LaunchDaemons&lt;/code&gt; (there are also other dirs for the system&amp;#39;s own
agents and daemons, see &lt;a href=&quot;https://www.launchd.info/&quot;&gt;the ref&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Personally, I like to keep my config files together, so I&amp;#39;ve set this up as a
symlink, and it works. The file itself will need to have read permissions, so
&lt;code&gt;chmod 644 com.startup.plist&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here is what the content of the file should be:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;!DOCTYPE plist PUBLIC &amp;quot;-//Apple//DTD PLIST 1.0//EN&amp;quot; &amp;quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&amp;quot;&amp;gt;
&amp;lt;plist version=&amp;quot;1.0&amp;quot;&amp;gt;
  &amp;lt;dict&amp;gt;
    &amp;lt;key&amp;gt;EnvironmentVariables&amp;lt;/key&amp;gt;
    &amp;lt;dict&amp;gt;
      &amp;lt;key&amp;gt;PATH&amp;lt;/key&amp;gt;
      &amp;lt;string&amp;gt;/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:&amp;lt;/string&amp;gt;
    &amp;lt;/dict&amp;gt;
    &amp;lt;key&amp;gt;Label&amp;lt;/key&amp;gt;
    &amp;lt;string&amp;gt;com.startup&amp;lt;/string&amp;gt;
    &amp;lt;key&amp;gt;Program&amp;lt;/key&amp;gt;
    &amp;lt;string&amp;gt;/Users/norswap/bin/startup&amp;lt;/string&amp;gt;
    &amp;lt;key&amp;gt;RunAtLoad&amp;lt;/key&amp;gt;
    &amp;lt;true/&amp;gt;
    &amp;lt;key&amp;gt;KeepAlive&amp;lt;/key&amp;gt;
    &amp;lt;false/&amp;gt;
    &amp;lt;key&amp;gt;LaunchOnlyOnce&amp;lt;/key&amp;gt;
    &amp;lt;true/&amp;gt;
    &amp;lt;key&amp;gt;StandardOutPath&amp;lt;/key&amp;gt;
    &amp;lt;string&amp;gt;/tmp/startup.stdout&amp;lt;/string&amp;gt;
    &amp;lt;key&amp;gt;StandardErrorPath&amp;lt;/key&amp;gt;
    &amp;lt;string&amp;gt;/tmp/startup.stderr&amp;lt;/string&amp;gt;
  &amp;lt;/dict&amp;gt;
&amp;lt;/plist&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is verbose but actually pretty straightforward. Notice the log files. The
program being run is my &lt;code&gt;startup&lt;/code&gt; script:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/bash
P=/Users/norswap/startup
for file in $P/*
do
    $file
done&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The shebang (&lt;code&gt;#!/bin/bash&lt;/code&gt;) is actually important and &lt;code&gt;launchd&lt;/code&gt; will complain
if it&amp;#39;s not present.&lt;/p&gt;
&lt;p&gt;And here is an example of file in &lt;code&gt;~/startup&lt;/code&gt;, namely the one I use to run my
VPN (with confidential details redacted).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/bash -l
daemon -n proxyvpn &amp;#39;echo &amp;lt;password&amp;gt; | openconnect --script-tun \
    --script &amp;quot;ocproxy -D 9999&amp;quot; -u &amp;lt;username&amp;gt; -passwd-on-stdin &amp;lt;vpn address&amp;gt;&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Two notes. First off, don&amp;#39;t write your password in a readable bash script unless you want
your local sysadmin to berate and/or murder you.&lt;/p&gt;
&lt;p&gt;Second, note how the script specifies &lt;code&gt;bash -l&lt;/code&gt; after the shebang to get a
&amp;quot;login shell&amp;quot; — login shell source &lt;code&gt;.bash_profile&lt;/code&gt; while other don&amp;#39;t, and that&amp;#39;s
where we defined our &lt;code&gt;daemon&lt;/code&gt; function!&lt;/p&gt;
&lt;p&gt;If you want to know more about the different types of shell (login, interactive)
and how Bash decides which config file to source, read this &lt;a href=&quot;https://github.com/rbenv/rbenv/wiki/Unix-shell-initialization&quot;&gt;life-saving guide
on shell initialization&lt;/a&gt;.&lt;/p&gt;
&lt;div class=nsep&gt;&lt;/div&gt;

&lt;p&gt;You&amp;#39;ll probably want to test all of this. To do so you can run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;launchctl load -w ~/Library/LaunchAgents/com.startup.plist&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;-w&lt;/code&gt; option ignores some file where the agent can be disabled for some
nefarious reasons. I didn&amp;#39;t need it, but it doesn&amp;#39;t hurt either.&lt;/p&gt;
&lt;p&gt;You might see stuff about a &lt;code&gt;start&lt;/code&gt; command that can in the place of &lt;code&gt;load&lt;/code&gt;.
That didn&amp;#39;t work for me (but it might be because my &lt;code&gt;plist&lt;/code&gt; file is too
primitive).&lt;/p&gt;
&lt;p&gt;Similarly, you might read about the &lt;code&gt;unload&lt;/code&gt; command, but for me it always said
that the agent wasn&amp;#39;t loaded. I guess that whenever if you use an agent to run a
script that returns, the agent is not considered to be &amp;quot;loaded&amp;quot;.&lt;/p&gt;
&lt;p&gt;Now, if you do need to debug issues with &lt;code&gt;launchd&lt;/code&gt;, you can first check the
&lt;code&gt;/tmp/startup.stdout&lt;/code&gt; and &lt;code&gt;/tmp/startup.stderr&lt;/code&gt; specified in the plist file.&lt;/p&gt;
&lt;p&gt;You can also run &lt;code&gt;tail -f /var/log/system.log&lt;/code&gt; before you run the &lt;code&gt;load&lt;/code&gt; command
in another shell. This will give you messages such as the following if things go
wrong.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Service could not initialize: 19D76: xpcproxy + 15636
com.apple.xpc.launchd[1] (com.startup[2355]): Service exited with abnormal code: 78&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;parting-thoughts&quot;&gt;Parting Thoughts&lt;/h2&gt;
&lt;p&gt;When I started my &amp;quot;quest&amp;quot; for a quick daemon setup, I didn&amp;#39;t think it would end
taking as much time, nor require me to go so deep (but then, getting lost in the
depths seems like a recurring theme on this blog and in my life).&lt;/p&gt;
&lt;p&gt;Truth be told, this was a lot of fun. The issues I encountered were just right
for my skill level to solve.&lt;/p&gt;
&lt;p&gt;That being said, this still shows how arcane shell logic, and especially the
Bash language can be. I&amp;#39;ve said to whomever could hear that I prefer to use some
scripting language (Ruby, Python, Javascript) rather than Bash.&lt;/p&gt;
&lt;p&gt;I didn&amp;#39;t take my own advice because I thought this would be as simple as
cobbling a couple of commands together. Ha ha.&lt;/p&gt;
&lt;p&gt;Would it have been easier with a proper language though? Well, it would have
alleviated the quoting issues. While the issue is not super difficult and the
fix is simple, understanding and debugging it took quite some time. Option
handling would also probably haven been slightly easier. A lot of the other
difficulties were shell-specific though, so I&amp;#39;m not so sure it would have bought
&lt;em&gt;so much&lt;/em&gt; time in this case.&lt;/p&gt;
&lt;p&gt;Finally, if you absolutely have to work in Bash, you could do worse than check
the &lt;a href=&quot;https://github.com/dylanaraps/pure-bash-bible&quot;&gt;Pure Bash Bible&lt;/a&gt; to see if it includes a recipe for whatever you&amp;#39;re trying
to achieve. I&amp;#39;m also re-plugging the &lt;a href=&quot;https://github.com/rbenv/rbenv/wiki/Unix-shell-initialization&quot;&gt;shell initialization guide&lt;/a&gt;.&lt;/p&gt;
      </description>
      <pubDate>2020-02-28T23:00:00.000Z</pubDate>
      <link>http://norswap.com/unix-daemons</link>
      <guid isPermaLink="true">http://norswap.com/unix-daemons</guid>
    </item>
    <item>
      <title>Chosen Tidbits 2</title>
      <description>
&lt;p&gt;Previously: &lt;a href=&quot;https://norswap.com/chosen-tidbits-1/&quot;&gt;June 2019&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Yes, I know it&amp;#39;s now February... Truth be told I forgot I was sitting on so much
material! Anyway, this content is evergreen, so enjoy. More to come!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/vgr/status/1145720241432887296&quot;&gt;Venkatesh Rao on the aging mind&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Wisdom = cognitive reading glasses for the blurred thinking of an aging mind.
Like making bolder, rougher approximations and thereby getting to the right
answer 80% of the time faster than more cautious younger people who can
calculate faster to greater precision&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/visakanv/status/1097402088961695744&quot;&gt;Visakan Veerasamy&amp;#39;s memex - everything is
connected&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;memex.jpg&quot;&gt;&lt;img src=&quot;memex.jpg&quot; alt=&quot;Visa&amp;#39;s memex&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/visakanv/status/1088356040444239873&quot;&gt;Visa on Taste&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;When you worship your heroes, you distract them from the process that enables
them to make great work. Encourage the process, participate in the process.
They’re people too. Every creative mind is always yearning for more good minds
to play with.&lt;/p&gt;
&lt;p&gt;“How do I develop taste?”&lt;/p&gt;
&lt;p&gt;Well it shouldn’t be something you force yourself to do. What do you already
like? What are you already interested in? Explore that with a playful curiosity
and ask yourself what’s good, what’s not good. Have fun&lt;/p&gt;
&lt;p&gt;“How do I produce a large body of work?”&lt;/p&gt;
&lt;p&gt;A house is built one brick at a time. Make a brick. Then make another brick.
Then another. The secret is that you forget worrying about the house and enjoy
making bricks. It’s fun because you get to exercise and develop your taste&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/visakanv/status/1141043305007894528&quot;&gt;Visa on Taste (2)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can spend years arguing with idiots or you can spend years making friends.
The idiots aren’t going to be there for you when you need someone&lt;/p&gt;
&lt;div class=nsep&gt;&lt;/div&gt;

&lt;p&gt;Every “utterance” (status, tweet, whatever) is a bit of an invitation, a bit of
a proposal. “Let’s play this game”. When strangers read the proposal accurately,
and support the game, a shared understanding develops. You can make friends this
way.&lt;/p&gt;
&lt;p&gt;Some people deliberately choose to ignore, misread, disregard or denounce other
people’s bids. Others are outright clueless and don’t know how to play, and
sometimes cluelessness leads to worse bungling than deliberate malice&lt;/p&gt;
&lt;div class=nsep&gt;&lt;/div&gt;

&lt;p&gt;I believe that taste is one of the most powerful, precious, fragile things in
the known Universe and should be cultivated accordingly&lt;/p&gt;
&lt;div class=nsep&gt;&lt;/div&gt;

&lt;p&gt;I think you need to have taste to know how to make your own fun, and because
society disincentivizes the development of taste in the short run, people end up
having to buy mass-produced fun at a mark-up&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;http://visakanv.com/1000/0675-smart-vs-kind/&quot;&gt;Smart vs Kind&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Where does kindness enter the picture? Kindness nourishes (not coddles) fragile
things and makes them strong.&lt;/p&gt;
&lt;p&gt;When I was younger, I truly believed that the best way to learn and grow and
progress was to subject everything to relentless scrutiny. To debate, argue,
attack from all sides. I still believe that that can be true in some cases, and
that individuals who are deeply committed to learning and intellectual
development can benefit tremendously from welcoming such behavior. Inviting
criticisms and takedowns. Soliciting negative feedback.&lt;/p&gt;
&lt;p&gt;BUT, I’ve also grown to learn that there’s this whole other side to the picture.
What you see is NOT all there is. There’s a lot that you haven’t seen, that you
can’t see – and if you saw it with an open mind, you’d almost definitely revise
your model of reality.&lt;/p&gt;
&lt;p&gt;I had a Kurt Cobain quote in mind – “Better to be hated for who you are than
loved for who you’re not”. It seemed radically profound at the time, but on
retrospect that’s entire oversimplistic thinking. We have more than two options.&lt;/p&gt;
&lt;p&gt;Here’s what you miss if you’re unkind or non-kind: people opening up to you in
private.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://slatestarcodex.com/2019/07/17/caution-on-bias-arguments/&quot;&gt;Caution On Bias Arguments&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You say it’s important to overcome biases. So isn’t it hypocritical that
you’re not trying to overcome whichever bias prevents you from realizing
you’re wrong and I’m right?&lt;br&gt;— everybody&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is a general phenomenon: for any issue, you can think of biases that could
land people on one side or the other.&lt;/p&gt;
&lt;p&gt;A is less biased. But B may be better informed.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://www.raptitude.com/2019/06/two-ways-to-get-better-at-something/&quot;&gt;Two Ways To Get Better At
Something&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The gentle ramp vs the boot camp.&lt;/p&gt;
&lt;p&gt;Sometimes one is right, sometimes the other.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;http://www.treewhimsy.com/TECPB/Articles/SevenInsights.pdf&quot;&gt;Seven Insight From Queueing Theory (PDF)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The response time is the wait time (spent in a queue) + the service time.&lt;/p&gt;
&lt;p&gt;As the utilization of a service center grows, it becomes more likely that a
newly arriving job will have to wait because there are jobs ahead of it. In
general, the response time degradation is more pronounced the busier the
resource is. An approximate formula that describes this relationship is:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ResponseTime = ServiceTime / (1 - Utilization)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Visualized for different utilization percentages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;00%: 1x&lt;/li&gt;
&lt;li&gt;33%: 1.5x&lt;/li&gt;
&lt;li&gt;50%: 2x&lt;/li&gt;
&lt;li&gt;75%: 4x&lt;/li&gt;
&lt;li&gt;80%: 5x&lt;/li&gt;
&lt;li&gt;90%: 10x&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you plot this, it will look like a hokey curve that rises up sharply as you
approach 100%.&lt;/p&gt;
&lt;p&gt;Insight #1: The slower the service center, the lower the maximum utilization you
should plan for at peak load. (50% busy is a good max)&lt;/p&gt;
&lt;p&gt;Insight #2: It’s very hard to use the last 15% of anything.&lt;/p&gt;
&lt;p&gt;Insight #3: The closer you are to the edge, the higher the price for being
wrong: Going from 50 to 59% utilization is okay (2x to 3x), 90 to 99 is not (10x
to 100x).&lt;/p&gt;
&lt;p&gt;Insight #4: Response time increases are limited by the number of jobs that can
wait without droping out of the queue.&lt;/p&gt;
&lt;p&gt;Insight #5: Remember this is an average, not a maximum. Sometimes the wait time
will be small, sometimes huge depending on the queue buildup (i.e. on arrival
schedules and on utilisation in the time leading up to the request). This too
gets worse with higher utilization.&lt;/p&gt;
&lt;p&gt;Insight #6: You could have multiple service centers to decrease the response
time. This works well until you reach high utilization: the response time stays
flat until you hit maybe 90% utilization, then rises much faster. Reason: there
usually is a free service center. When they start getting all busy, requests
still arrive at the same rate and build up faster.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.plan99.net/the-future-of-ai-is-entertainment-1841fbb400df&quot;&gt;Mike Hearn - The Future of AI is Entertainement&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Mike paints a picture of how AI can be used to generate all sort of contents
that can be put to work in entertainment (video games, movies, music, ...).&lt;/p&gt;
      </description>
      <pubDate>2020-02-26T23:00:00.000Z</pubDate>
      <link>http://norswap.com/chosen-tidbits-2</link>
      <guid isPermaLink="true">http://norswap.com/chosen-tidbits-2</guid>
    </item>
  </channel>
</rss>
