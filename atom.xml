<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>norswap</title>
  <link href="http://norswap.com/atom.xml" rel="self"/>
  <link href="http://norswap.com/"/>
  <updated>2016-07-09T17:03:34.567Z</updated>
  <id>http://norswap.com/</id>
  <author>
    <name>Nicolas "Norswap" Laurent</name>
    <email>norswap+atom@gmail.com</email>
  </author>
  <entry>
    <title>Building Java with Make</title>
    <link href="http://norswap.com/build-java-with-make"/>
    <updated>2016-07-08T22:00:00.000Z</updated>
    <id>http://norswap.com/build-java-with-make</id>
    <content type="html">
      <p>In <a href="https://github.com/norswap/violin">violin</a>, I set up the build using the good old <code>make</code> tool (you might have
      gathered that <a href="/rant-java-build">I harbor no love</a> for Java build systems).</p>
      <p>For examples of how to perform common Java build tasks by calling command line
      tools from make, <a href="https://github.com/norswap/violin/blob/master/makefile">have a look at the makefile</a>.</p>
    </content>
  </entry>
  <entry>
    <title>Micro-Rant: Java Build Systems</title>
    <link href="http://norswap.com/rant-java-build"/>
    <updated>2016-07-08T22:00:00.000Z</updated>
    <id>http://norswap.com/rant-java-build</id>
    <content type="html">
      <p>Ant is Make in XML.</p>
      <p>Maven is an over-engineered, yet castrated build system. You can&#39;t do
      fundamental stuff (such as specifying which version of Java you want to use or
      <strong>moving files</strong> without importing a plugin or calling Ant. Want to do something
      slightly different? Build you own plugin (this process is more painful than it
      sounds). On the plus side, Maven does have a handy (but not best-in-class)
      dependency system, which is why we still have to suffer it.</p>
      <p>Gradle allows custom build tasks (<strong>finally!</strong>). It&#39;s also huge, bloated, and
      comes with a <a href="https://docs.gradle.org/current/userguide/userguide.html">70-chapters manual</a> that still manages to be lacunary and
      confusing. Understanding Gradle is not the work of an afternoon but of weeks.</p>
      <p>Scala is not served better. To think sbt once stood for &quot;simple build
      tool&quot; (now retconned to &quot;scala build tool&quot;) is enough to choke on the irony.</p>
      <p><a href="/build-java-with-make">One might as well build Java using Make.</a></p>
      <h2 id="hope-">Hope?</h2>
      <p><a href="http://beust.com/kobalt/">Kobalt</a> is a sane build system for Kotlin &amp; Java by Cedric Beust (the
      author of TestNG). However it&#39;s still in its infancy.</p>
      <p><a href="http://pluto-build.github.io/">pluto</a> is a prototype from academia (<a href="http://www.informatik.uni-marburg.de/~seba/publications/pluto-incremental-build.pdf">related paper</a>)
      that enables incremental, minimal, and safe builds (no need to <code>make clean</code>).
      You can&#39;t really use it as is, but the idea only asks to be picked up.</p>
    </content>
  </entry>
  <entry>
    <title>Released: Violin, a human-sized Kotlin utility library</title>
    <link href="http://norswap.com/violin-release"/>
    <updated>2016-07-08T22:00:00.000Z</updated>
    <id>http://norswap.com/violin-release</id>
    <content type="html">
      <p>I just released <a href="https://github.com/norswap/violin">violin</a>, a small Kotlin utility library that features
      simple streams and some other stuff too.</p>
    </content>
  </entry>
  <entry>
    <title>The Path to Wisdom</title>
    <link href="http://norswap.com/path-to-wisdom"/>
    <updated>2016-07-07T22:00:00.000Z</updated>
    <id>http://norswap.com/path-to-wisdom</id>
    <content type="html">
      <blockquote>
      <p>The path to wisdom is like this: each time you get one step closer, the target
      moves two steps away.</p>
      </blockquote>
    </content>
  </entry>
  <entry>
    <title>In Defence of Checked Exceptions</title>
    <link href="http://norswap.com/checked-exceptions"/>
    <updated>2015-10-02T22:00:00.000Z</updated>
    <id>http://norswap.com/checked-exceptions</id>
    <content type="html">
      <p>I had a minor epiphany recently. I realized that checked exceptions are great.
      Until then I supported the hip opinion that checked exceptions are a design
      mistakes, and that all exceptions should be unchecked.</p>
      <p>The first step on my path to enlightenment was to realize the different use
      cases for checked and unchecked exceptions. Java Practices <a href="http://www.javapractices.com/topic/TopicAction.do?Id=129">says it best</a>:</p>
      <blockquote>
      <p>Unchecked exceptions represent defects in the program (bugs) - often invalid
          arguments passed to a non-private method. To quote from The Java Programming
          Language, by Gosling, Arnold, and Holmes: &quot;Unchecked runtime exceptions
          represent conditions that, generally speaking, reflect errors in your
          program&#39;s logic and cannot be reasonably recovered from at run time.&quot;</p>
      <p>Checked exceptions represent invalid conditions in areas outside the
          immediate control of the program (invalid user input, database problems,
          network outages, absent files).</p>
      </blockquote>
      <p>Ideally, all unchecked exceptions can be removed from your program without
      causing problems. They are just a debugging aid in pinpointing what went wrong
      when you made a mistake. Under this assumption, unchecked exceptions should
      never be handled: the program is incorrect and should crash and burn. Or at
      least, the component (~ a blob of features) should. It&#39;s good form to insulate
      other components from the failure of a component, if they can still perform
      usefully without it.</p>
      <p>On the other hand, you can&#39;t prevent checked exceptions from occuring, they are
      outside your sphere of control. Hence the need to ensure that are handled
      correctly.</p>
      <p>This seems to make sense. So why are people so fiercely opposed to checked
      exceptions?</p>
      <p>Well imagine that you are writing some code, and you make a call to a method
      that throws a checked exception. You have two choices: add a <code>throws</code> clause to
      your method, or wrap the method call in a try-catch block. The right thing to do
      is to use try-catch if you can handle the exception at that level, otherwise to
      add a <code>throws</code> clause. In practice, the <code>throws</code> clause is almost always the
      right thing to do. Yet, adding a <code>throws</code> clause is tedious, because it must be
      propagated to all the callers of the current method. It&#39;s much easier to add a
      try-catch block even though there&#39;s nothing we can do about the exception, and
      so ignore it silently, leading to a loss of information in case of failure.</p>
      <p>People who oppose exceptions have either performed this kind of abuse, or have
      been bitten by the consequences of other people doing it. I am not making this
      up, it&#39;s quite obvious from pieces like <a href="http://www.mindview.net/Etc/Discussions/CheckedExceptions">this one</a> and it&#39;s explained in
      great length <a href="http://stackoverflow.com/a/614494/298664">here</a>.</p>
      <p>Summarized: people don&#39;t want exceptions because they are going to be abused by
      lazy programmers.</p>
      <p>I can also think of another reason why exceptions might be frustrating to use:
      people don&#39;t understand the distinction between checked and unchecked exceptions
      as spelled out above, and so create frustrating APIs. Even Sun has been guilty
      of this: should <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/NoSuchMethodException.html">NoSuchMethodException</a> really be a checked exception?
      Probably not.</p>
      <p>Finally, I&#39;ll note that it&#39;s sometimes allowable to cheat a little bit. If
      you&#39;re writing a component with a well-delimited interface, you could for
      instance eschew checked exceptions if all the exceptions are going to be handled
      at the API boundary and no cleanup needs to be performed. You&#39;re trading off
      some safety for some typing. Just be aware that you are making the trade-off.</p>
      <p>In conclusion, do use checked exception, but use them properly: define checked
      exceptions only for areas outside the programmer&#39;s control; and don&#39;t silently
      swallow checked exceptions.</p>
    </content>
  </entry>
  <entry>
    <title>The Most Useful Java Function</title>
    <link href="http://norswap.com/java_caster"/>
    <updated>2015-02-23T23:00:00.000Z</updated>
    <id>http://norswap.com/java_caster</id>
    <content type="html">
      <p>Warning: title may contain hyperbole.</p>
      <p>Without further ado:</p>
      <pre><code>public class Caster
      {
          @SuppressWarnings(&quot;unchecked&quot;)
          public static &lt;T&gt; T cast(Object obj)
          {
              return (T) obj;
          }
      }
      </code></pre><p>Now you can write:</p>
      <pre><code>List&lt;Object&gt; x = objectList(&quot;cthulhu&quot;);
      functionExpectingStringList(Caster.cast(x));
      </code></pre><p>instead of:</p>
      <pre><code>List&lt;Object&gt; x = objectList(&quot;cthulhu&quot;);
      @SuppressWarnings(&quot;unchecked&quot;)
      List&lt;String&gt; y = (List&lt;String&gt;) x;
      functionExpectingStringList(y);
      </code></pre><p>So, it does two things: (1) automatically infer the destination type and (2)
      avoid an intermediate variable declaration, which you need if you want to ignore
      the resulting &quot;unchecked cast&quot; warning. This warning appears when the cast can&#39;t
      be checked at run-time, as is the case when casting between types that differ in
      their generic type parameters.</p>
      <p>The type inference part will only work with Java 8 and higher. The definition of
      <code>cast</code> is valid on Java 5 and higher however, and you still get benefit (2).</p>
      <p>In the cases where the type cannot be inferred, you need to specify it
      explicitly:</p>
      <pre><code>Object x = &quot;cthulhu&quot;;
      functionExpectingString(Caster.&lt;String&gt;cast(x));
      </code></pre><p>It also holds up remarkably well when using multiple casts with generics:</p>
      <pre><code>static &lt;T&gt; void takeArrayListPair(ArrayList&lt;T&gt; a, ArrayList&lt;T&gt; b) {}
      
      static void test()
      {
          List&lt;String&gt; x = new ArrayList&lt;&gt;();
          List&lt;Integer&gt; y = new ArrayList&lt;&gt;();
      
          takeArrayListPair(Caster.cast(x), Caster.cast(y));
          // x and y are casted to ArrayList&lt;Object&gt;
      }
      </code></pre>
    </content>
  </entry>
  <entry>
    <title>C: Scope, Duration &amp; Linkage</title>
    <link href="http://norswap.com/c_scope_duration_linkage"/>
    <updated>2015-01-25T23:00:00.000Z</updated>
    <id>http://norswap.com/c_scope_duration_linkage</id>
    <content type="html">
      <p><a name="intro"></a></p>
      <p>This article explains the concepts of scope, linkage and duration (aka lifetime)
      in the C programming language. It also explains how scope, linkage and duration
      are determined for each function or variable declaration, depending on its
      location in the file and its storage class specifier (<code>extern</code>, <code>static</code>, etc).</p>
      <p>In what follows we will use the term &quot;object&quot; to mean &quot;function or variable&quot;.
      The terminology is used by the C standard and avoids tedious repetitions. When
      we say &quot;declaration&quot;, we always mean &quot;object declaration&quot;, since types have
      declarations as well. An &quot;identifier&quot; is just a name; e.g., a variable name.</p>
      <p>The <strong>scope</strong> of a declaration is the part of the code where the declaration is
      seen and can be used.</p>
      <p>Note that this says nothing about whether the object associated to the
      declaration can be accessed from some other part of the code via another
      declaration!</p>
      <p>We uniquely identify an object by its memory: the storage for a variable or the
      function code.</p>
      <p><strong>Duration</strong> indicates whether the object associated to the declaration persists
      throughout the program&#39;s execution or whether it is allocated dynamically when
      the declaration&#39;s scope is entered.</p>
      <p><strong>Linkage</strong> is what determines if multiple declarations of the same object refer
      to the same object, or to separate ones.</p>
      <p>As you might suspect, the three notions are closely inter-related. Let&#39;s try to
      untangle them.</p>
      <h1 id="scope">Scope</h1>
      <p><a name="scope"></a></p>
      <p>C features four scopes:</p>
      <ul>
      <li>block scope</li>
      <li>function scope</li>
      <li>function prototype scope</li>
      <li>file scope</li>
      </ul>
      <p>Every variable or function declaration that appears inside a block (including a
      function body) has <strong>block scope</strong>. The scope goes from the declaration to the end
      of the innermost block in which the declaration appears.</p>
      <p>Function parameter declarations in function definitions (but not in prototypes)
      also have block scope. The scope of a parameter declaration therefore includes
      the parameter declarations that appear after it.</p>
      <p><strong>Function scope</strong> is a bit special: it is the scope of goto labels. Goto labels are
      implicitly declared at the place where they appears, but they are visible
      throughout the function, even if they appear inside a block.</p>
      <p>Note that goto labels have a different namespace than objects, meaning you can
      have goto labels and objects using the same identifier without incurring any
      problems.</p>
      <p><strong>Function prototype scope</strong> is the scope for function parameters that appear inside
      a function prototype. It extends until the end of the prototype. This scope
      exists to ensure that function parameters have distinct names.</p>
      <p>All variables and functions defined outside functions have <strong>file scope</strong>. They are
      visible from their declaration until the end of the file. Here, the term &quot;file&quot;
      should be understood as the source file being compiled, after all includes have
      been resolved.</p>
      <div class="nsep"></div>
      
      <p>The other two concepts (duration and linkage) are only relevant to declarations
      that have block scope or file scope. We will ignore the two other kinds of scope
      from now on.</p>
      <p>Finally, note that a declaration in a nested scope can hide a declaration in an
      outer scope; but only if one of the two has no linkage. Most compilers have
      warning flags to warn you when this kind of hiding occurs, as it can be
      error-prone.</p>
      <h1 id="storage-class-specifiers">Storage Class Specifiers</h1>
      <p>The are five storage class specifiers: <code>static</code>, <code>extern</code>, <code>auto</code>, <code>register</code>
      and <code>typedef</code>. Each declaration can only have a single storage class specifier.</p>
      <p>As you are probably well aware, <code>typedef</code> is kind of a hack, and we don&#39;t need
      to concern ourselves with it for regular declarations.</p>
      <h2 id="at-block-scope">At Block Scope</h2>
      <p>The storage class specifiers <code>auto</code> and <code>register</code> are only valid for variable
      declarations appearing inside functions.</p>
      <p><code>auto</code> cannot apply to parameter declarations. It is the default for variable
      declared inside a function body, and is hence never necessary. The existence of
      <code>auto</code> is rather puzzling, as is the fact that it is not allowed with
      parameters. <code>auto</code> is in fact a historic leftover from C predecessor&#39;s &quot;B&quot;.</p>
      <p><code>register</code> is a hint to the compiler that it might be a good idea to store the
      variable in a register, but the compiler is not forced to do so. The compiler
      does make sure that you do not take the address of a variable with the
      <code>register</code> storage class.</p>
      <p>Inside a function, variable declarations with the <code>static</code> storage class
      specifiers keeps its value in between invocations of the function.</p>
      <p>Variables declared inside a function with the <code>extern</code> behaves exactly like a
      file-scope <code>extern</code> declaration, excepted for the difference in scope.</p>
      <h2 id="at-file-scope">At File Scope</h2>
      <p>At file scope, <code>extern</code> and <code>static</code> influence the linkage of a declaration,
      according to rules that we will describe shortly.</p>
      <h1 id="duration">Duration</h1>
      <p>There are two kind of duration:</p>
      <ul>
      <li>automatic</li>
      <li>static</li>
      </ul>
      <p>A static duration means the object associated to the declaration persists for
      the whole program execution. Automatic duration means the object is allocated
      dynamically when the declaration&#39;s scope is entered.</p>
      <p>Within functions (at block-scope), declarations without <code>extern</code> or <code>static</code>
      have automatic duration. Any other declaration (at file or block-scope) has
      static duration.</p>
      <p>Sometimes, people talk of <strong>lifetime</strong>. Strictly speaking the duration is either
      automatic or static, while the lifetime refers to the portion of the execution
      during which memory is reserved for the object. The distinction is moot and both
      terms are often used interchangeably.</p>
      <h1 id="linkage">Linkage</h1>
      <p>Remember that linkage is what determines if multiple declarations of the same
      object refer to the same object (i.e., memory location), or to separate ones.</p>
      <p>There are three kind of linkage:</p>
      <ul>
      <li>no linkage</li>
      <li>internal linkage</li>
      <li>external linkage</li>
      </ul>
      <p>A declaration with no linkage is associated to an object that is not shared with
      any other declaration.</p>
      <p>In a single compilation unit, all declarations for the same object that have
      linkage (so not &quot;no linkage&quot;) must have the same linkage (either internal or
      external).</p>
      <p>Within the compilation unit, all declarations with internal linkage for the same
      identifier refer to the same object.</p>
      <p>Within the whole program, all declarations with external linkage for the same
      identifier refer to the same object.</p>
      <p>Of course, all declarations for the same object must agree on its type!</p>
      <p>All declarations with no linkage happen at block-scope: all block-scope
      declarations without the <code>extern</code> storage class specifier have no linkage.</p>
      <p>For all other objects in the compilation units, the object has internal linkage
      if there is a declaration with the <code>static</code> storage class specifier. This
      declaration must happen before any <code>extern</code> declaration, and there cannot be any
      declaration without storage class specifier (or a compilation error ensues).
      Otherwise, it has external linkage.</p>
      <h1 id="declarations-definitions">Declarations &amp; Definitions</h1>
      <p><a name="declarations_and_definitions"></a></p>
      <p>All declarations with no linkage are also definitions.</p>
      <p>Other declarations are definitions if they have an initializer. A function body
      is treated as an initializer.</p>
      <p>A file-scope <strong>variable</strong> declaration without the <code>extern</code> storage class
      specifier or initializer is a tentative definition.</p>
      <p>Note that <code>extern</code> declarations can have an initializer; although it makes no
      sense to do that (since dropping the <code>extern</code> specifier preserves the behaviour
      and makes and clarifies intent). Some compiler warn if you try to specify both
      <code>extern</code> and an initializer.</p>
      <p>For a declared object to be defined, there must be at least one definition or
      tentative definition, and not more than one non-tentative definition.</p>
      <p>The object for a variable defined without initializer is initialized to 0 (its
      memory is zeroed).</p>
      <p>Why does this matter? To be able to use a declared object, there must be a
      definition. Second, these rules ensure that an object isn&#39;t initialized
      multiple times.</p>
      <h1 id="const">Const</h1>
      <p>A small note about the <code>const</code> qualifier (not the same thing as a storage class
      specifier). Using <code>const</code> does not influence scope, duration or linkage in C. In
      C++ however, declaration with <code>const</code> at the &quot;top-level&quot; (the outermost pointer,
      or the whole variable if there&#39;s no pointer) have internal linkage by default.</p>
      <p>The reason C++ does this is to enable more optimizations: if the address of the
      variable is not taken, then memory does not need to be allocated for it and its
      value can be inlined in the assembly code.</p>
      <h1 id="storage-class-specifiers-summary">Storage Class Specifiers Summary</h1>
      <p>Here&#39;s a short summary of which storage class specifiers are valid in which part
      of a program, and what difference they make compared to omitting the
      storage class specifier. As we said earlier, there can be at most one storage
      class specifier by declaration.</p>
      <p>Storage class specifiers valid for block-scope variable declarations:</p>
      <ul>
      <li>none: automatic duration, no linkage</li>
      <li><code>auto</code> (never required)</li>
      <li><code>register</code> (compiler hint)</li>
      <li><code>static</code> (static duration)</li>
      <li><code>extern</code> (static duration; copy previous linkage)</li>
      </ul>
      <p>Storage class specifiers valid for parameter declarations:</p>
      <ul>
      <li>none: automatic duration, no linkage</li>
      <li><code>register</code> (compiler hint)</li>
      </ul>
      <p>Storage class specifiers valid for file-scope variable declarations:</p>
      <ul>
      <li>none: static duration, external linkage</li>
      <li><code>extern</code> (copy previous linkage, else external linkage)</li>
      <li><code>static</code> (internal linkage)</li>
      </ul>
      <p>Storage class specifiers valid for file-scope function declarations:</p>
      <ul>
      <li>none: static duration; copy previous linkage, else external linkage</li>
      <li><code>extern</code> (same as none)</li>
      <li><code>static</code> (internal linkage)</li>
      </ul>
      <p>Storage class specifiers valid for block-scope function declarations (useless):</p>
      <ul>
      <li>none: static duration; copy previous linkage, else external linkage</li>
      <li><code>extern</code> (same as none)</li>
      </ul>
      <p>Finally, note that the <code>extern</code> storage class specifier prevents a declaration
      from being a tentative definition.</p>
      <h1 id="summary">Summary</h1>
      <p>So in summary, each declaration has:</p>
      <ul>
      <li>a scope: block, function, function prototype, or file</li>
      <li>a duration: automatic or static</li>
      <li>linkage: no linkage, internal linkage, or external linkage</li>
      </ul>
      <p>Refer to the <a href="#intro">intro</a> for a short definition of these three concepts.</p>
      <p>One can determine the linkage and duration of any declaration using only three
      rules (most prioritary rule first):</p>
      <ul>
      <li><p>Within functions, declarations without <code>extern</code> have no linkage.</p>
      </li>
      <li><p>Within functions, declarations without <code>extern</code> or <code>static</code> have automatic
      duration. Any other declaration, at any scope, has static duration.</p>
      </li>
      <li><p>Within a compilation unit, objects have internal linkage if there is a
      declaration with the <code>static</code> storage class specifier. This declaration must
      happen before any <code>extern</code> declaration, and there cannot be any declaration
      without storage class specifier (or a compilation error ensues). Otherwise,
      they have external linkage.</p>
      </li>
      </ul>
      <p>Finally, for a variable to be defined there should be exactly one declaration
      with an initializer; or, failing that, at least one declaration without
      <code>extern</code>.</p>
      <h1 id="if-we-could-do-it-over-">If we could do it over...</h1>
      <p>Perhaps the most obvious flaw of the scheme is that <code>static</code> at file scope bears
      no relationship with <code>static</code> at block scope. One of the two should have a
      different name.</p>
      <p>Second, the interplay of <code>extern</code>, <code>static</code> (at file-scope), and no specifier
      (at file-scope) is too complex.</p>
      <p>We could describe the behaviour of <code>extern</code> as follows:</p>
      <pre><code>if (first declaration for same object was static)
          static linkage
      else
          external linkage
      </code></pre><p>While no-specifier (at file-scope) means:</p>
      <pre><code>if (object is a function
              &amp;&amp; first declaration for same object was static)
          static linkage
      else
          external linkage
      </code></pre><p>The reason for making the lack of a specifier act like <code>extern</code> for functions is
      that functions don&#39;t have tentative definitions.</p>
      <p>Why do we even need tentative definitions? The only advantage I see is that one
      can declare a variable only in a header file and get a definition for it. The
      gain in convenience is so small that I&#39;d propose to get rid of it.</p>
      <p>At that point, we don&#39;t need &quot;no specifier&quot; anymore, and can force all of our
      declarations to be either <code>extern</code> or <code>static</code>. Let&#39;s pick one as the default.
      <code>static</code> seems better suited, since it does not pollute the namespace of other
      compilation units: other compilation units can still declare an object with the
      same identifier and external linkage.</p>
      <p>Let&#39;s also get rid of the fact that <code>extern</code> &quot;copies&quot; the previous linkage. I
      can see no case where it would be necessary.</p>
      <p>The scheme ends up simple enough: only add <code>extern</code> to declarations of symbol
      one wants to export or import to/from other compilation units. If we were not
      bound by the fact that C uses header files that are generally included both in
      the exporting and importing compilation unit, we could even split <code>extern</code> into
      <code>import</code> and <code>public</code> to make things clearer.</p>
      <h1 id="clarifying-intent">Clarifying Intent</h1>
      <p>Since many of us are stuck with C, here are a few macros and guidelines on how
      to use them to make things clearer. It roughly follows the scheme proposed in
      the last section, except that we can&#39;t make <code>static</code> the default, or statically
      check that the scheme is used properly.</p>
      <ul>
      <li><code>#define import extern</code> - for declarations in header files &amp; declarations in C
      files to be imported from other compilation units</li>
      <li><code>#define public</code> - for declaratons in C files to be exported to other
      compilation units</li>
      <li><code>#define private static</code> - for declarations in C files local to the
      compilation unit</li>
      <li><code>#define local   static</code> - for block-scope variables that should persist
      accross function invocations</li>
      </ul>
      <p>All file-scope declarations should be qualified by one of <code>import</code>, <code>public</code> or
      <code>private</code>. Within a compilation unit, all declarations for an object should have
      the same specifier. The only exception is that for a single object there can be
      one declaration with <code>import</code> in the header file, and one with <code>public</code> in the C
      file. Block-scope declarations can use <code>import</code> or <code>local</code>.</p>
      <h1 id="sources">Sources</h1>
      <ul>
      <li><a href="http://publications.gbdirect.co.uk/c_book/chapter8/declarations_and_definitions.html">The C Book, Chapter 8</a></li>
      <li><a href="http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf">The C Standard (*)</a></li>
      <li>Experimentations with GCC and MSVC</li>
      </ul>
      <p>(*) This is for C11, but these things haven&#39;t changed in a long time.</p>
    </content>
  </entry>
</feed>
