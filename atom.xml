<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>norswap</title>
    <description></description>      
    <link>http://norswap.com/</link>
    <atom:link href="http://norswap.com/atom.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Ruby Methods, Procs and Blocks</title>
      <description>
&lt;p&gt;This is the first article in the &lt;a href=&quot;/ruby-dark-corners&quot;&gt;Ruby&amp;#39;s Dark Corners&lt;/a&gt; series.&lt;/p&gt;
&lt;p&gt;Here are a few question this article will try to answer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What combination of parameters are legal in method definition?&lt;/li&gt;
&lt;li&gt;How are arguments assigned to parameters when calling a method?&lt;/li&gt;
&lt;li&gt;How do blocks differ from procs?&lt;/li&gt;
&lt;li&gt;What are the differences between lambdas and procs?&lt;/li&gt;
&lt;li&gt;What is the difference between &lt;code&gt;{ ... }&lt;/code&gt; and &lt;code&gt;do ... end&lt;/code&gt;?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;declaring-parameters&quot;&gt;Declaring Parameters&lt;/h2&gt;
&lt;p&gt;In everything that follows we make the distinction between &lt;em&gt;parameters&lt;/em&gt; (or
&lt;em&gt;formal parameters&lt;/em&gt;): the parameters as they appear in method definitions; and
&lt;em&gt;arguments&lt;/em&gt; (or &lt;em&gt;actual parameters&lt;/em&gt;): the value passed to method calls.&lt;/p&gt;
&lt;p&gt;A method definition admits the following types of parameters:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;type&lt;/th&gt;
&lt;th&gt;example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;regular&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;default&lt;/td&gt;
&lt;td&gt;&lt;code&gt;b = 2&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;array decomposition&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(c, d*)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;splat&lt;/td&gt;
&lt;td&gt;&lt;code&gt;*e&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;keyword&lt;/td&gt;
&lt;td&gt;&lt;code&gt;f:&lt;/code&gt;, &lt;code&gt;g: 7&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;double splat&lt;/td&gt;
&lt;td&gt;&lt;code&gt;**h&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;block&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;amp;i&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;A kitchen sink example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-ruby&quot;&gt;def foo a, (b, c), d = 1, *e, f:, g: 7, **h, &amp;amp;i; end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here are quick explanations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Default parameters can have a default value.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Array decomposition parameters are regular parameters that decompose an array
argument into parts. Here are some examples, assuming the argument is &lt;code&gt;[[1,
2], 3]&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(a*)          a = [[1, 2], 3]
(a, b)        a = [1, 2], b = 3
(a, b*)       a = [1, 2], b = [3]
(a, b, c*)    a = [1, 2], b = 3,   c = []
((a, b), c)   a = 1,      b = 2,   c = 3
((a, b*), c)  a = 1,      b = [2], c = 3
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The splat parameter enables variable length argument lists and receives all
extra arguments.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Keyword operators have to be named explicitly when calling the method:
&lt;code&gt;foo(f: 6)&lt;/code&gt;. They can have default values.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The double splat parameter acts like the splat parameter, but for extra
keyword arguments.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The block parameter gives a name to the block passed to the method, allowing
you to pass it to other methods, and call it by name instead of through
&lt;code&gt;yield&lt;/code&gt;. See more on blocks in the section on &lt;a href=&quot;#blocks-and-procs&quot;&gt;Blocks and Procs&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;ordering&quot;&gt;Ordering&lt;/h3&gt;
&lt;p&gt;You can&amp;#39;t mix match these parameters as you please. All types of parameters are
optional, but those that are present must respect the following ordering:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;regular parameters, default parameters, and splat parameter (at most one)&lt;/li&gt;
&lt;li&gt;keyword parameters&lt;/li&gt;
&lt;li&gt;double splat parameter (at most one)&lt;/li&gt;
&lt;li&gt;block parameter (at most one)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;best-practices&quot;&gt;Best Practices&lt;/h3&gt;
&lt;p&gt;Put the parameters in the following order:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;regular parameters&lt;/li&gt;
&lt;li&gt;default parameters&lt;/li&gt;
&lt;li&gt;splat parameters&lt;/li&gt;
&lt;li&gt;keyword parameters&lt;/li&gt;
&lt;li&gt;double splat parameter&lt;/li&gt;
&lt;li&gt;block parameter&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You should not mix the ordering of regular, default and splat parameters, it
makes it very unintuitive which parameters gets assigned which argument.&lt;/p&gt;
&lt;h2 id=&quot;assigning-arguments-to-parameters&quot;&gt;Assigning Arguments to Parameters&lt;/h2&gt;
&lt;p&gt;The real complexity of Ruby&amp;#39;s methods is determining how arguments are mapped to
parameters.&lt;/p&gt;
&lt;p&gt;Here are the different types of arguments you can pass to a method call:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;type&lt;/th&gt;
&lt;th&gt;example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;regular&lt;/td&gt;
&lt;td&gt;&lt;code&gt;v&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;keyword&lt;/td&gt;
&lt;td&gt;&lt;code&gt;b: v&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;hash argument&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:c =&amp;gt; v&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;splat&lt;/td&gt;
&lt;td&gt;&lt;code&gt;*v&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;double splat&lt;/td&gt;
&lt;td&gt;&lt;code&gt;**v&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;block conversion&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;amp;v&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;block&lt;/td&gt;
&lt;td&gt;&lt;code&gt;{ .. }&lt;/code&gt; or &lt;code&gt;do .. end&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;You can substitute &lt;code&gt;v&lt;/code&gt; with almost any expression, as long as you respect
operator precedence.&lt;/p&gt;
&lt;p&gt;A kitchen sink example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-ruby&quot;&gt;foo 1, *array, 2, c: 3, :d =&amp;gt; 4, **hash
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here are quick explanations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Keyword and hash arguments are always treated the same. You should prefer the
keyword syntax. They match keyword parameters.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If the splat argument is an &lt;code&gt;Array&lt;/code&gt; or an object that supported the &lt;code&gt;to_a&lt;/code&gt;
method, it is expanded inside the method call: &lt;code&gt;foo(1, *[2, 3], 3)&lt;/code&gt; is
equivalent to &lt;code&gt;foo(1, 2, 3, 4)&lt;/code&gt;. Otherwise the splat expands to a regular
argument.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A double splat works the same, but for hashes: &lt;code&gt;foo(a: 1, **{b: 2, c: 3}, e:
4)&lt;/code&gt; is equivalent to &lt;code&gt;foo(a: 1, b: 2, c: 3, d: 4)&lt;/code&gt;. It performs implicit
conversion to &lt;code&gt;Hash&lt;/code&gt; for objects that support the &lt;code&gt;to_hash&lt;/code&gt; method. Note in
passing that by convention &lt;code&gt;to_hash&lt;/code&gt; represents implicit conversion to a
&lt;code&gt;Hash&lt;/code&gt;, while &lt;code&gt;to_h&lt;/code&gt; represents explicit (on-demand only) conversion.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A block conversion argument must be a &lt;code&gt;Proc&lt;/code&gt;, or an object that can implicitly
converted to one via &lt;code&gt;to_proc&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Finally, a method can be passed a block explicitly. The block will appear
after the argument list. We&amp;#39;ll touch on the difference between the two block
syntaxes in the &lt;a href=&quot;#blocks-and-procs&quot;&gt;section about blocks&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;ordering&quot;&gt;Ordering&lt;/h3&gt;
&lt;p&gt;Again, arguments cannot be supplied in any order. All regular and splat
arguments must appear before any keyword and double splat arguments. A block
conversion or block argument (only one allowed) must appear last.&lt;/p&gt;
&lt;p&gt;If the order is not respected, an error ensues.&lt;/p&gt;
&lt;h3 id=&quot;assigning-arguments-to-parameters&quot;&gt;Assigning Arguments to Parameters&lt;/h3&gt;
&lt;p&gt;Below we say &amp;quot;keyword argument&amp;quot; to mean &amp;quot;keyword or hash argument&amp;quot;, as those are
always treated identically.&lt;/p&gt;
&lt;p&gt;Where an error is mentionned, it is most likely an &lt;code&gt;ArgumentError&lt;/code&gt;. I haven&amp;#39;t
re-checked everything, but it should always be the case.&lt;/p&gt;
&lt;p&gt;Here is the full procedure for figuring out how arguments are assigned to
parameters:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Expand any splat or double splat arguments. The expanded content is taken
into account when we talk about regular or keyword arguments later on.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Let &lt;code&gt;n&lt;/code&gt; be the number of regular parameters&lt;br&gt;Let &lt;code&gt;m&lt;/code&gt; be the number of regular and default parameters&lt;br&gt;Let &lt;code&gt;x&lt;/code&gt; be the number of regular arguments&lt;/p&gt;
&lt;p&gt;Depending on the value of &lt;code&gt;x&lt;/code&gt; (pick the first case that matches):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;x &amp;lt; n-1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;There aren&amp;#39;t enough regular arguments, an error ensues.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;x == n-1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If there aren&amp;#39;t any keyword arguments, an error ensues.&lt;/p&gt;
&lt;p&gt;Otherwise, the last regular parameter will receive a hash that will
collect all keyword arguments.&lt;/p&gt;
&lt;p&gt;If there were any keyword parameter without default value, an error
ensues. If there was a double splat parameter, it will receive an empty
hash.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;x&lt;/code&gt; regular arguments are assigned to the &lt;code&gt;x&lt;/code&gt; first regular
parameters.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;x &amp;lt; m&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The first &lt;code&gt;x&lt;/code&gt; regular arguments are assigned to the &lt;code&gt;x&lt;/code&gt; first regular
and/or keyword parameters. The last &lt;code&gt;m-x&lt;/code&gt; default parameters get assigned
their default values.&lt;/p&gt;
&lt;p&gt;However, a special case arises if there are keyword arguments but no
keyword or double splat parameters. In this case, the keyword arguments
will be collected in a hash, and assigned to the first default parameter
who has a hash as default value. If none have, the hash is assigned to the
first regular or default parameter instead. The assignment from arguments
to parameters is shifted, of course (i.e. no arguments is lost because of
this).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;x &amp;gt; m&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;m&lt;/code&gt; first arguments are assigned to the &lt;code&gt;m&lt;/code&gt; first regular and/or
default parameters.&lt;/p&gt;
&lt;p&gt;If there is at least a keyword or double splat parameter, but there are no
keyword arguments, and if the last regular argument is a &lt;code&gt;Hash&lt;/code&gt; or can be
converted to one with &lt;code&gt;to_hash&lt;/code&gt;, consider it is a double splat argument and
expand it.&lt;/p&gt;
&lt;p&gt;All other arguments (&lt;code&gt;x-m&lt;/code&gt; or &lt;code&gt;x-m-1&lt;/code&gt; of them) are collected in an array
and assigned to the splat parameter if it exists. If there is no splat
parameter and there more than 0 such arguments, an error ensues.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Assuming the keyword argument weren&amp;#39;t captured in either the &lt;code&gt;x == n-1&lt;/code&gt; or &lt;code&gt;x
&amp;lt; m&lt;/code&gt; cases in step 2, three situations are possible:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The are keyword or double plat parameters.&lt;/p&gt;
&lt;p&gt;The keywords arguments are assigned to the corresponding keyword parameter.
If a keyword parameter without default value is not filled, an error ensued.&lt;/p&gt;
&lt;p&gt;If two values are supplied for the same key, the last one wins. However, if
the two values are visible in the method call (e.g. &lt;code&gt;foo(a: 1, **{a: 2})&lt;/code&gt;),
a warning is emitted.&lt;/p&gt;
&lt;p&gt;If any keyword arguments remain, they are collected inside a hash and
assigned to the double splat parameter if it exists. If it doesn&amp;#39;t and any
keyword argument remain, an error ensues.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There are no keyword or double splat parameters, but there is a splat
parameter.&lt;/p&gt;
&lt;p&gt;All keyword arguments are collected in a hash, which is added to the array
assigned to the splat parameter.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There are no keyword, double splat or splat parameters. If there are any
keyword arguments, an error ensues.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If a block or block conversion argument is passed, assign it to the block
parameter if any, otherwise it becomes the implicit block parameter.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;blocks-and-procs&quot;&gt;Blocks and Procs&lt;/h2&gt;
&lt;p&gt;The following is in general much better understood than assignment from
arguments to parameters.&lt;/p&gt;
&lt;h3 id=&quot;procs-vs-blocks&quot;&gt;Procs vs Blocks&lt;/h3&gt;
&lt;p&gt;Blocks are what you pass at the end of a method call, while procs are what you
create using &lt;code&gt;proc&lt;/code&gt;, &lt;code&gt;Proc.new&lt;/code&gt;, &lt;code&gt;lambda&lt;/code&gt; or &lt;code&gt;-&amp;gt;&lt;/code&gt;. Any function can accept a
block, either implicitly, or explicitly via a block argument. Procs can be
passed to any parameter, or to the block parameter if converted via &lt;code&gt;&amp;amp;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This is less known, but you can convert a block to a proc, by calling &lt;code&gt;Proc.new&lt;/code&gt;
or &lt;code&gt;proc&lt;/code&gt; without any parameter.&lt;/p&gt;
&lt;h3 id=&quot;procs-vs-lambdas&quot;&gt;Procs vs Lambdas&lt;/h3&gt;
&lt;p&gt;Lambdas are special, stricter kind of procs.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Regular procs can perform non-local control flow: if a proc uses &lt;code&gt;retry&lt;/code&gt;,
&lt;code&gt;return&lt;/code&gt;, &lt;code&gt;break&lt;/code&gt;, &lt;code&gt;next&lt;/code&gt; or &lt;code&gt;redo&lt;/code&gt;, those will be interpreted as though the
proc&amp;#39;s code had been inlined at the point where the proc was called. This can
only happen in the method in which the proc was originally defined. If called
outside the method, a proc that performs non-local control flow will cause a
&lt;code&gt;LocalJumpError&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If regular procs are passed too many arguments, the extra arguments are
ignored instead of causing an error (the behaviour is otherwise the same as
for methods, as outlined above). Lambda behave like methods for parameter
assignment.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You create a regular proc with &lt;code&gt;proc&lt;/code&gt; or &lt;code&gt;Proc.new&lt;/code&gt;, while lambda are created
with &lt;code&gt;lambda&lt;/code&gt; or the &lt;code&gt;-&amp;gt;&lt;/code&gt; notation (&lt;em&gt;lambda literal&lt;/em&gt; or &lt;em&gt;dash rocket&lt;/em&gt; or &lt;em&gt;stab
operator&lt;/em&gt;). While the three first forms simply take a block argument, the &lt;code&gt;-&amp;gt;&lt;/code&gt;
notation works like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-ruby&quot;&gt;-&amp;gt; (a, b) { ... }
-&amp;gt; (a, b) do .. end
-&amp;gt; { ... }
-&amp;gt; do .. end
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;curly-brackets-vs-do-end-&quot;&gt;Curly Brackets (&lt;code&gt;{}&lt;/code&gt;) vs &lt;code&gt;do .. end&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;There is not semantic difference between both forms.&lt;/p&gt;
&lt;p&gt;There is one syntactic difference because the two forms have different
precedences:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-ruby&quot;&gt;foo bar { ... }     # foo(bar { ... })
foo bar do ... end  # foo(bar) { ... }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you don&amp;#39;t need to use this particularity, there are two popular ways to
choose on form over the other:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Use curlies for single-line blocks, &lt;code&gt;do ... end&lt;/code&gt; for multi-line blocks.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use curlies when the return value is used, &lt;code&gt;do ... end&lt;/code&gt; when only the
side-effects matter.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;calling-procs-and-blocks&quot;&gt;Calling Procs and Blocks&lt;/h3&gt;
&lt;p&gt;As we said above, procs work like method for assigning arguments to parameters,
but extra arguments are ignored for regular procs (not for lambdas).&lt;/p&gt;
&lt;p&gt;Blocks acts like regular procs: extra arguments are ignored.&lt;/p&gt;
&lt;p&gt;Blocks cannot be passed a block of their own!&lt;/p&gt;
&lt;p&gt;You can call an implicit or explicit block using &lt;code&gt;yield&lt;/code&gt;. An explicit block or
proc named &lt;code&gt;x&lt;/code&gt; can be called using &lt;code&gt;x.call(1, 2)&lt;/code&gt;, &lt;code&gt;x.(1, 2)&lt;/code&gt; or &lt;code&gt;x[1, 2]&lt;/code&gt;.&lt;/p&gt;
      </description>
      <pubDate>2017-02-08T23:00:00.000Z</pubDate>
      <link>http://norswap.com/ruby-methods</link>
      <guid isPermaLink="true">http://norswap.com/ruby-methods</guid>
    </item>
    <item>
      <title>Ruby&#39;s Specification Problem</title>
      <description>
&lt;p&gt;I&amp;#39;m start a series of post about &lt;a href=&quot;/ruby-dark-corners&quot;&gt;Ruby&amp;#39;s Dark Corners&lt;/a&gt;. Here I
would like to talk about the reason for these posts: that despite its
popularity, Ruby is thoroughly under-documented.&lt;/p&gt;
&lt;p&gt;Here is a look at some questions I&amp;#39;m answering in my &lt;a href=&quot;/ruby-dark-corners&quot;&gt;dark corners&lt;/a&gt; series:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What combination of parameters are legal in method definition?&lt;/li&gt;
&lt;li&gt;How are arguments assigned to parameters when calling a method?&lt;/li&gt;
&lt;li&gt;How are ancestors ordered when using &lt;code&gt;include&lt;/code&gt;?&lt;/li&gt;
&lt;li&gt;How do we know what name refers to?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It looks like stuff that should be well-understood, but it isn&amp;#39;t. The &lt;a href=&quot;http://ruby-doc.org/core-2.4.0/&quot;&gt;official
documentation&lt;/a&gt; doesn&amp;#39;t cover these topics and doesn&amp;#39;t do so in enough depth.
Sometimes, it is even downright misleading. For each these topics them, I
couln&amp;#39;t find any blog article that was even remotely close from telling the
whole story.&lt;/p&gt;
&lt;p&gt;The behaviour of Ruby is very much implementation-defined. An &lt;a href=&quot;https://www.ipa.go.jp/files/000011432.pdf&quot;&gt;ISO standard&lt;/a&gt; is
available, but it covers Ruby 1.8, which is at this point rather old (the
current version is 2.4). For each of the three topics I&amp;#39;m covering, new versions
change the semantics and/or bring new details to the story. Another artifact of
importance is the &lt;a href=&quot;https://github.com/ruby/spec&quot;&gt;Ruby Spec Suite&lt;/a&gt;, a test suite that is used by alternative
implementations to verify they comply with the official implementation. A test
suite is just what it is however, I haven&amp;#39;t found it very useful as a tool to
understand how things work (e.g. try to understand linearization by reading
&lt;a href=&quot;https://github.com/ruby/spec/blob/master/language/super_spec.rb&quot;&gt;&lt;code&gt;super_spec.rb&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://github.com/ruby/spec/blob/master/core/module/include_spec.rb&quot;&gt;&lt;code&gt;include_spec.rb&lt;/code&gt;&lt;/a&gt;). Popular books like &lt;em&gt;Ruby under a
Microscope&lt;/em&gt; and &lt;em&gt;Metaprogramming in Ruby&lt;/em&gt; don&amp;#39;t have the answers either.&lt;/p&gt;
&lt;p&gt;Ultimately, there are two sources of truth: dive in the source code of &lt;a href=&quot;https://github.com/ruby/ruby&quot;&gt;MRI&lt;/a&gt;
(Matz&amp;#39; Ruby Implementation — the official implementation) or experiment with the
interpreter. I chose the later, more as a matter of fact than as a well-planned
strategy. It is entirely possible I made some mistake in the way I interpreted
the rules, but it will put you closer to the truth than anything you can find
online.&lt;/p&gt;
&lt;p&gt;As a concluding remark, I want to emphasize that I&amp;#39;m not picking on Ruby. It&amp;#39;s a
language I really like, and the situation is much the same in many other
languages. Nevertheless that&amp;#39;s not a reason to be satisfied with the status quo,
and my &lt;a href=&quot;/ruby-dark-corners&quot;&gt;Ruby&amp;#39;s Dark Corner&lt;/a&gt; series is my humble contribution to
that.&lt;/p&gt;
      </description>
      <pubDate>2017-02-08T23:00:00.000Z</pubDate>
      <link>http://norswap.com/ruby-specification-problem</link>
      <guid isPermaLink="true">http://norswap.com/ruby-specification-problem</guid>
    </item>
    <item>
      <title>Ruby&#39;s Dark Corners</title>
      <description>
&lt;p&gt;Recently, I&amp;#39;ve been immersing myself in the Ruby language for the need of our
new programming language paradigms course. Ruby is there to showcase run-time
metaprogramming.&lt;/p&gt;
&lt;p&gt;I have been surprised by how some language features are governed by byzantine
rules. Most practitionners know and use these features, supported by an
heuristic undertanding of them that is serviceable in most situations. However,
itt turns out almost no-one understand the precise semantics.&lt;/p&gt;
&lt;p&gt;After investing some time to understand these features, I thought I would go the
extra mile and publish my findings. Here are the topics I will cover:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/ruby-methods&quot;&gt;Ruby&amp;#39;s Methods, Procs and Blocks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Ruby&amp;#39;s Module Linearization (soon)&lt;/li&gt;
&lt;li&gt;Ruby&amp;#39;s Lookups and Scopes (soon)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you think all of this is documented elsewhere, read &lt;a href=&quot;/ruby-specification-problem&quot;&gt;Ruby&amp;#39;s Specification
Problem&lt;/a&gt; and think again.&lt;/p&gt;
      </description>
      <pubDate>2017-02-08T23:00:00.000Z</pubDate>
      <link>http://norswap.com/ruby-dark-corners</link>
      <guid isPermaLink="true">http://norswap.com/ruby-dark-corners</guid>
    </item>
    <item>
      <title>Action and Expectations</title>
      <description>
&lt;blockquote&gt;
&lt;p&gt;Mindfulness is the art of “just doing”. The problem with expectation is that
  it adds a layer of unnecessary complication to doing, a layer that is
  potentially self-defeating. If you do a thing with an expectation, and it
  doesn’t live up to your desire (as so often is the case) you experience fear,
  failure, detachment and laziness.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!----&gt;
&lt;blockquote&gt;
&lt;p&gt;The reason people are lazy is simultaneously the reason they are ambitious—
  they associate action with expectation. If they don’t act, they don’t expect,
  and thus don’t suffer. If they do act, they expect, and often do suffer.
  Projecting idealizations onto an uncaring and inhuman world doesn’t make good
  things more likely to happen. It often just causes you trouble.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://medium.com/@dailyzen/expectation-and-delusion-2cb7edff6239#.tfut0y1au&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;It’s important to see that it’s not life that causes suffering but our
  expectation that life should be the way we want. We can’t live without
  expectation, but if we can handle the feelings caused by the difference
  between our expectations and reality, that’s liberation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://medium.com/@dailyzen/zen-masters-101-kodo-sawaki-fc09dc251e00#.k457qrlnj&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Having a positive outlook on the future (optimism) seems like a pre-requisite
for happiness. On the other hand, expecting the worst not to be disappointed is
a common technique to avoid unhappiness. The technique is closely related to
stoic philosophy. Zen masters, on the other hand, advocat not expecting anything
at all.&lt;/p&gt;
&lt;p&gt;There seems like there is a contradiction there. And indeed, there is. These
examples are representative of a broader trade-off between a radical acceptance
of the present moment, and the kind of positive visualisation that often is the
impetus for action.&lt;/p&gt;
&lt;p&gt;What&amp;#39;s the answer then? I think it&amp;#39;s to transcend the trade-off.&lt;br&gt;Act without expectations.&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;Success consists of going from failure to failure without loss of enthusiasm.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Winston Churchill&lt;/p&gt;
      </description>
      <pubDate>2017-01-27T23:00:00.000Z</pubDate>
      <link>http://norswap.com/expectations</link>
      <guid isPermaLink="true">http://norswap.com/expectations</guid>
    </item>
    <item>
      <title>Music Piracy Miniguide</title>
      <description>
&lt;p&gt;Nowadays, it is easier than ever to listen to music: just use &lt;a href=&quot;https://play.spotify.com&quot;&gt;Spotify&lt;/a&gt; or
&lt;a href=&quot;http://www.deezer.com/&quot;&gt;Deezer&lt;/a&gt;, amongst others.&lt;/p&gt;
&lt;p&gt;Call me old-fashioned, but I don&amp;#39;t like to be dependent on an internet connection.
I&amp;#39;m also a bit of a pirate at heart &lt;code&gt;P)&lt;/code&gt;. So let&amp;#39;s get started.&lt;/p&gt;
&lt;h2 id=&quot;single-tracks&quot;&gt;Single Tracks&lt;/h2&gt;
&lt;h3 id=&quot;youtube&quot;&gt;Youtube&lt;/h3&gt;
&lt;p&gt;This is the option I use most often, because it is so damn easy. Go on &lt;a href=&quot;http://www.deezer.com/en/&quot;&gt;YouTube&lt;/a&gt;,
then use the website &lt;a href=&quot;http://www.flvto.biz/&quot;&gt;flvto&lt;/a&gt;. Or even better, download
their &lt;a href=&quot;http://www.flvto.biz/youtube-downloader/&quot;&gt;desktop app&lt;/a&gt; for Windows/OSX which enables HD downloads,
and automatic detection of YouTube URLs in the clipboard. They also
have &lt;a href=&quot;http://www.flvto.biz/addon/&quot;&gt;addons&lt;/a&gt; for most browsers.&lt;/p&gt;
&lt;p&gt;Another alternative is &lt;a href=&quot;http://www.youtube-mp3.org&quot;&gt;youtube-mp3&lt;/a&gt;, which also has Firefox and Chrome &lt;a href=&quot;http://www.youtube-mp3.org/addons&quot;&gt;addons&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The downside of downloading from YouTube is that quality tends to be somewhat
variable. I&amp;#39;m no audiophile and so if it sounds good to me, I download it.&lt;/p&gt;
&lt;h3 id=&quot;songr&quot;&gt;Songr&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://www.xamasoft.com/songr/&quot;&gt;Songr&lt;/a&gt; is an app that searches a bunch of websites (include &lt;a href=&quot;http://groovesharks.org/&quot;&gt;Grooveshark&lt;/a&gt; and
&lt;a href=&quot;http://pleer.net/&quot;&gt;Prostopleer&lt;/a&gt;) for MP3 downloads. I don&amp;#39;t use it very much, YouTube + flvto is
easier, and the options in the next section are more comprehensive. Nevertheless
it has been around for a while, and it&amp;#39;s good to know that it is available.&lt;/p&gt;
&lt;h2 id=&quot;full-albums-single-tracks-&quot;&gt;Full Albums (&amp;amp; Single Tracks)&lt;/h2&gt;
&lt;h3 id=&quot;spotiload-formerly-spotify-vk-downloader-&quot;&gt;Spotiload (formerly Spotify VK Downloader)&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/spotiload-former-spotify/baggnalhgbpeanbhedjlbndhjgmimmhl&quot;&gt;Spotiload&lt;/a&gt; is a chrome extension that lets you download songs from Spotify.
Except it doesn&amp;#39;t, really. Instead, you have to be logged on the Russian social
network &lt;a href=&quot;https://vk.com/&quot;&gt;VK.com&lt;/a&gt;, which for some reason holds a huge collection of MP3s. You&amp;#39;ll
then be able to search for the music you&amp;#39;re listening to on Spotify and download
it from VK.&lt;/p&gt;
&lt;p&gt;A small pain point is that you can only download songs 4 at at time, so you
cannot leave you album download unattended. It has also happened to me that
Spotiload couldn&amp;#39;t find some songs on VK (the song wasn&amp;#39;t on YouTube either, but
I finally got it from Deezer). That should be exceedingly rare however.&lt;/p&gt;
&lt;p&gt;There doesn&amp;#39;t seem to be any reliable way to download music from Spotify itself
at the time of writing. VK, howver, doesn&amp;#39;t seem very intent to crack down on
illegal downloads, so this seems like a good option for now.&lt;/p&gt;
&lt;h3 id=&quot;deezer-downloader&quot;&gt;Deezer Downloader&lt;/h3&gt;
&lt;p&gt;While searching for a song I couldn&amp;#39;t find by any other means, I stumbled on
&lt;a href=&quot;https://www.reddit.com/r/Piracy/comments/5i33o1/yet_another_downloader_for_deezer/&quot;&gt;this reddit conversation&lt;/a&gt; introducing a Deezer desktop
downloader. It works really well.&lt;/p&gt;
&lt;p&gt;The caveat is that I&amp;#39;m not too confident about it being able to work for long.
Like Spotify, Deezer is intent on cracking down on downloads. There seems to be
a few other Deezer downloaders around, so who knows.&lt;/p&gt;
&lt;p&gt;PS: I goes without saying that if you&amp;#39;re looking to replace anything on this
guide, the &lt;a href=&quot;https://www.reddit.com/r/Piracy/&quot;&gt;Piracy sub-reddit&lt;/a&gt; is a good place to start looking.&lt;/p&gt;
&lt;h3 id=&quot;private-bittorrent-trackers&quot;&gt;Private BitTorrent Trackers&lt;/h3&gt;
&lt;p&gt;In general, BitTorrent is lousy for album downloads. However, there exist
specialized trackers where you can find all the music you want. If only it was
that easy...&lt;/p&gt;
&lt;p&gt;First, these trackers usually require you to be invited by an existing member.
Sometimes, you can pass an &lt;a href=&quot;https://interview.passtheheadphones.me/index.shtml&quot;&gt;interview&lt;/a&gt; (I kid you not) to be invited.&lt;/p&gt;
&lt;p&gt;Once you&amp;#39;re invited, you&amp;#39;re required to maintain a positive seed ratio (upload
as much as you download). That doesn&amp;#39;t seem like much, but it can actually be
pretty challenging. First because everyone is trying to maintain/improve their
ratio, so there is more upload capacity than demand. Second, because when you
are starting out, you will have nothing to upload! Usually you can download
without uploading at the beginning, to get a starting stash. Still, that doesn&amp;#39;t
always suffice. Some trackers have &lt;em&gt;freeleech&lt;/em&gt; albums where downloads don&amp;#39;t count
towards your ratio, but uploads do, the goal being to generate some easy upload
for users. Incidentally this is also why many people use &lt;em&gt;seeboxes&lt;/em&gt; (servers
dedicated to torrenting): those have high upload bandwidth, so you can increase
your upload faster.&lt;/p&gt;
&lt;p&gt;It&amp;#39;s a bit of a crazy world, and I haven&amp;#39;t found the need to engage in this
sillyness so far, but you never know.&lt;/p&gt;
&lt;p&gt;It seems that the best option currently is &lt;a href=&quot;https://passtheheadphones.me/&quot;&gt;Pass The Headphones&lt;/a&gt; and &lt;a href=&quot;https://apollo.rip/&quot;&gt;Apollo&lt;/a&gt;
(formerly Xanax). Over the years, the best options have been OiNK, What.cd and
Waffles.cd. Some of these grew quite famous, but ultimately they all closed or
were closed.&lt;/p&gt;
&lt;p&gt;The definitive source of info about private trackers is the &lt;a href=&quot;https://www.reddit.com/r/trackers/&quot;&gt;Trackers
sub-reddit&lt;/a&gt;.&lt;/p&gt;
      </description>
      <pubDate>2017-01-24T23:00:00.000Z</pubDate>
      <link>http://norswap.com/music-piracy-miniguide</link>
      <guid isPermaLink="true">http://norswap.com/music-piracy-miniguide</guid>
    </item>
    <item>
      <title>The Ultimate PATH Management Guide</title>
      <description>
&lt;h2 id=&quot;basics-of-environment-variables-and-path&quot;&gt;Basics of Environment Variables and PATH&lt;/h2&gt;
&lt;p&gt;Each process has an &lt;em&gt;environment&lt;/em&gt;, a set of variables that the process can read
or write. When the process spawns another process, the new process inherits the
environment of its parent. These values are nevertheless &lt;em&gt;local&lt;/em&gt;: the child
inherits a copy of the variables of the parent at creation-time. If the parent
later changes his variables, the change will not be reflected on the child&amp;#39;s
variables.&lt;/p&gt;
&lt;p&gt;One particularly interesting environment variable is called &lt;code&gt;PATH&lt;/code&gt;: it defines
the paths to search to find an executable specified by name. The value of this
variable is a list of paths separated by a separator (&lt;code&gt;:&lt;/code&gt; on Unix-based OSes
like Mac OS X and Linux, &lt;code&gt;;&lt;/code&gt; on Windows).&lt;/p&gt;
&lt;p&gt;This is particularly relevant on the command line: when you type the name of a
program (for instance &lt;code&gt;ls&lt;/code&gt; in Unix), it will search the paths listed in the
&lt;code&gt;PATH&lt;/code&gt; variable (from left to right) until it finds one containing a &lt;code&gt;ls&lt;/code&gt;
executable.&lt;/p&gt;
&lt;p&gt;We&amp;#39;ll now see how each OS handles environment variables and the &lt;code&gt;PATH&lt;/code&gt;. One
particular question that will interest us is how the &amp;quot;default&amp;quot; value for the
environment variables (and the &lt;code&gt;PATH&lt;/code&gt; in particular) are set.&lt;/p&gt;
&lt;h2 id=&quot;windows&quot;&gt;Windows&lt;/h2&gt;
&lt;p&gt;In Windows, the initial values for environment variables are stored in the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Windows_Registry&quot;&gt;registry&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;These are separated between system values and user values. If a variable has
both a system and user value, the user value takes precedence, &lt;strong&gt;excepted&lt;/strong&gt; for
the PATH, where both values get concatenated (user PATH, &lt;code&gt;;&lt;/code&gt;, system PATH).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;User environment variables are stored in &lt;code&gt;HKEY_CURRENT_USER\Environment&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;System environment variables are stored in
&lt;code&gt;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session
Manager\Environment&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;explorer.exe&lt;/code&gt; will immediately reflect any change to these values, and any
program launched by it will inherit these values.&lt;/p&gt;
&lt;p&gt;All other programs, on the other hand, need to be restarted. A few comments
about programs of interest:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The &lt;a href=&quot;http://www.launchy.net/&quot;&gt;Launchy&lt;/a&gt; app launcher automatically updates the
environment before launching a program.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;a href=&quot;https://conemu.github.io/&quot;&gt;ConEmu&lt;/a&gt; console emulator is by default
configured to hijack the opening of new consoles and open them in the existing
ConEmu window instead (this is a good thing). The problem that is when
intercepting consoles opened by &lt;code&gt;explorer.exe&lt;/code&gt;, the environment seems to be set to
that of the ConEmu window (i.e. the environment when a console was first
launched). See &lt;a href=&quot;https://github.com/Maximus5/ConEmu/issues/468&quot;&gt;this issue&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;How to change the environment&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Locally in a console: use the built-in &lt;a href=&quot;http://ss64.com/nt/set.html&quot;&gt;set&lt;/a&gt; command.
You can clear a variable by assigning it nothing: &lt;code&gt;set X=&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Globally in a console: use &lt;a href=&quot;http://ss64.com/nt/setx.html&quot;&gt;setx&lt;/a&gt; (built-in Windows
7+, &lt;a href=&quot;https://www.microsoft.com/en-us/download/details.aspx?id=18546&quot;&gt;download&lt;/a&gt; for previous versions)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;From the explorer, &lt;a href=&quot;https://www.java.com/en/download/help/path.xml&quot;&gt;follow these instructions&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use the excellent &lt;a href=&quot;https://www.rapidee.com/en/about&quot;&gt;Rapid Environment Editor&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Running scripts on the command line&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;On Windows, it is customary to append an extension to executables binaries
(&lt;code&gt;.exe&lt;/code&gt;) and scripts (&lt;code&gt;.bat&lt;/code&gt;, &lt;code&gt;.sh&lt;/code&gt;, &lt;code&gt;.py&lt;/code&gt;, ...). However, typing this extension
to run the program is not very desirable.&lt;/p&gt;
&lt;p&gt;There is an environment variable called &lt;code&gt;PATHEXT&lt;/code&gt; which holds a list of all
extensions that can be run on the command line. Basically, if a file has its
extension in this list, you can type its name ommitting the extension and it
will run as though you double clicked it. There might be some additional finesse
here, but it will be like this most of the time. The order of the extensions
inside &lt;code&gt;PATHEXT&lt;/code&gt; is important if there are two files with the same name but
different extensions. Extensions earlier in the list have more priority.&lt;/p&gt;
&lt;h2 id=&quot;unix&quot;&gt;Unix&lt;/h2&gt;
&lt;p&gt;Both Mac OS X and Linux are Unix-based OSes. As such, the basic principles of
how environment variables are handled is similar. I&amp;#39;ll explain this here before
talking about the peculiarities of each OS.&lt;/p&gt;
&lt;p&gt;In Unix, a process does not automatically inherit all the environment variables
of its parents. It only inherits those that are explicitly exported.&lt;/p&gt;
&lt;p&gt;In a shell script, or on the command line, we can mark a variable &lt;code&gt;X&lt;/code&gt; for export
by writing &lt;code&gt;export X&lt;/code&gt;. This can also be combined with the definition of the
variable: &lt;code&gt;export X=&amp;quot;some stuff&amp;quot;&lt;/code&gt;. You can un-export something with &lt;code&gt;export -n&lt;/code&gt;.
Removing purely and simply a variable is done with &lt;code&gt;unset&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;On Unix, environment variables are initialized by shell scripts. Some scripts
are executed each time a shell is run. Which scripts are run depends on whether
the shell is a &lt;em&gt;login shell&lt;/em&gt; and wether it is &lt;em&gt;interactive&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The rules are rather complex,
but &lt;a href=&quot;https://github.com/rbenv/rbenv/wiki/Unix-shell-initialization&quot;&gt;this page does a good job at summarizing them&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Also beware that your scripts may source other files, including those that
mentionned in that guide.&lt;/p&gt;
&lt;p&gt;When taking inheritance into account, usually the right thing to do is to define
your environment variables in &lt;code&gt;~/.profile&lt;/code&gt; or equivalent. One caveat: the file
won&amp;#39;t get sourced when running a command remotely via SSH (that is, when running
a command through &lt;code&gt;ssh&lt;/code&gt; without creating an interactive shell).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Reloading the environment&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Reloading the environment in an existing shell after you edited &lt;code&gt;.profile&lt;/code&gt; can
be tricky. One easy solution would be to re-source &lt;code&gt;.profile&lt;/code&gt;, but there are a
few caveats:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Sourcing your &lt;code&gt;.profile&lt;/code&gt; should not have unwanted side-effects.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Often variables are not just set, but are &lt;em&gt;modified&lt;/em&gt;. This is typically the&lt;/p&gt;
&lt;p&gt;case for &lt;code&gt;PATH&lt;/code&gt;, where you append to the existing definition.&lt;/p&gt;
&lt;p&gt;In this case, if you reload the &lt;code&gt;.profile&lt;/code&gt;, you&amp;#39;ll end up with many duplicate
entries in your PATH, and you&amp;#39;ll fail to clear entries you want removed.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hence: no side-effects; set variables, don&amp;#39;t modify them.&lt;/p&gt;
&lt;h2 id=&quot;mac-os-x&quot;&gt;Mac OS X&lt;/h2&gt;
&lt;p&gt;OS X has a fantastic little utility called &lt;code&gt;path_helper&lt;/code&gt; that will help you
manage the PATH. Basically what it does is read the files in &lt;code&gt;/etc/paths.d&lt;/code&gt; and
appends their content to the PATH (one entry per line). Files are read in
lexicographic order, so you can control the order of entries in the PATH.&lt;/p&gt;
&lt;p&gt;Ironically, &lt;code&gt;path_helper&lt;/code&gt; is not itself on the path, so you must call it through
its fully qualified name &lt;code&gt;/usr/libexec/path_helper&lt;/code&gt;. The output of &lt;code&gt;path_helper&lt;/code&gt;
is a shell command to set the PATH. This command must itself be evaluated.&lt;/p&gt;
&lt;p&gt;I suggest to define the following shell alias for ease of use:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;alias refresh_path=&amp;#39;eval `/usr/libexec/path_helper -s`&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;-s&lt;/code&gt; part is just to ensure a bash-compatible command is generated.&lt;/p&gt;
&lt;p&gt;By default, OS X calls &lt;code&gt;path_helper&lt;/code&gt; in &lt;code&gt;/etc/profile&lt;/code&gt; so you do not need to add
it yourself.&lt;/p&gt;
&lt;p&gt;Oh and by the way, &lt;code&gt;path_helper&lt;/code&gt; does the same thing it does to &lt;code&gt;PATH&lt;/code&gt; to
&lt;code&gt;MANPATH&lt;/code&gt; (which holds the paths used to find manpages) but with the
&lt;code&gt;/etc/manpaths.d&lt;/code&gt; directory.&lt;/p&gt;
&lt;p&gt;Final word of caution: &lt;code&gt;/etc/paths.d&lt;/code&gt; requires root permission to write into.
However, the files must be readable without root permissions to be used by
&lt;code&gt;path_helper&lt;/code&gt;. Hence you might need to do a &lt;code&gt;chmod 644&lt;/code&gt; on the files you create
in that directory.&lt;/p&gt;
&lt;p&gt;See &lt;a href=&quot;http://www.softec.lu/site/DevelopersCorner/MasteringThePathHelper&quot;&gt;this webpage&lt;/a&gt; for more details about &lt;code&gt;path_helper&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Setting the PATH for GUI applications&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Ways of defining the PATH for GUI applications on OS X have a history of
breaking. You may read on the net about &lt;code&gt;~/.MacOSX/environment.plist&lt;/code&gt; or
&lt;code&gt;launchd.conf&lt;/code&gt;, but those no longer works.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/a/26586170&quot;&gt;&amp;quot;The&amp;quot; solution&lt;/a&gt;, at the time of writing, is to create a file
&lt;code&gt;~/Library/LaunchAgents/environment.plist&lt;/code&gt;, enter a bunch of boilerplate and
include &lt;code&gt;launchtl setenv&lt;/code&gt; commands to set environment variables.
See &lt;a href=&quot;http://stackoverflow.com/a/26586170&quot;&gt;this explanation&lt;/a&gt; for details.&lt;/p&gt;
&lt;p&gt;After a change, you can make it take effect with &lt;code&gt;launchctl load
~/Library/LaunchAgents/environment.plist&lt;/code&gt; (or wait for a reboot).&lt;/p&gt;
&lt;p&gt;Once applied, new applications started from the Finder (or Spotlight) will
inherit the environment variables set in &lt;code&gt;environment.plist&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Note that what &lt;code&gt;environment.plist&lt;/code&gt; does is simply run a script. You could use
that to actually source your &lt;code&gt;.profile&lt;/code&gt; or invoke &lt;code&gt;path_helper&lt;/code&gt;. Two solutions
that work with this idea (but doing rather more complicated things) are to be
found &lt;a href=&quot;http://stackoverflow.com/a/32405815&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;http://superuser.com/a/476960&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The difficulty to achieve something so basic is truly baffling.&lt;/p&gt;
&lt;h2 id=&quot;linux&quot;&gt;Linux&lt;/h2&gt;
&lt;p&gt;There are too many desktop managers for Linux to cover. Cursory searches seem to
indicate that this aspect isn&amp;#39;t too well thought-out however.&lt;/p&gt;
&lt;p&gt;However, Linux should, &lt;em&gt;in theory&lt;/em&gt;, be more scrupulous than OS X about
inheriting the PATH, even in GUI applications. Which means that, editing
&lt;code&gt;.profile&lt;/code&gt; then login out and login in &lt;em&gt;should&lt;/em&gt; work as a last resort.&lt;/p&gt;
&lt;p&gt;Some distributions (notably Debian, Ubuntu, Fedora) have files called
&lt;code&gt;~/.pam_environment&lt;/code&gt; and &lt;code&gt;/etc/environment&lt;/code&gt; where they recommend you define your
environment variables. The benefits of this way of doing things are rather
unclear, since it doesn&amp;#39;t seem to enable anything that couldn&amp;#39;t be done by
defining variables in &lt;code&gt;.profile&lt;/code&gt;.&lt;/p&gt;
      </description>
      <pubDate>2017-01-23T23:00:00.000Z</pubDate>
      <link>http://norswap.com/path-mgmt</link>
      <guid isPermaLink="true">http://norswap.com/path-mgmt</guid>
    </item>
    <item>
      <title>Sync Your IntelliJ Settings Between Machines</title>
      <description>
&lt;p&gt;I recently learned that it was possible to share one&amp;#39;s IntelliJ settings between
multiple machines.&lt;/p&gt;
&lt;h2 id=&quot;basic-setup&quot;&gt;Basic Setup&lt;/h2&gt;
&lt;p&gt;To do so, first install the &lt;a href=&quot;https://plugins.jetbrains.com/idea/plugin/7566-settings-repository&quot;&gt;Settings Repository plugin&lt;/a&gt;. Then, follow
these &lt;a href=&quot;https://www.jetbrains.com/help/idea/2016.3/sharing-your-ide-settings.html&quot;&gt;instructions&lt;/a&gt;. &lt;strong&gt;However&lt;/strong&gt;, do not complete step 3 (which seems
inconsistent with the actual UI), but instead, redo step 2 on each machine on
which you want to sync your settings (except you should use &amp;quot;overwrite local&amp;quot; or
&amp;quot;merge&amp;quot; instead of &amp;quot;overwrite remote&amp;quot;).&lt;/p&gt;
&lt;p&gt;It&amp;#39;s done! The settings should sync automatically, but you can force a re-sync
by using an action of the &lt;code&gt;VCS &amp;gt; Sync Settings&lt;/code&gt; menu.&lt;/p&gt;
&lt;h2 id=&quot;keybinding-troubles&quot;&gt;Keybinding Troubles&lt;/h2&gt;
&lt;p&gt;I use IntelliJ on both Windows and MacOS. &lt;/p&gt;
&lt;p&gt;As you may know, Macs keyboard have this layout on the bottom left of the last row:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;fn | control | alt | command
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;On the other hand, classical IBM-style keyboard (which I use on my Windows
 machine) have this layout:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;control | win | alt
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Moreover, in MacOS, most shortcuts where &lt;code&gt;control&lt;/code&gt; is used on Windows use
&lt;code&gt;command&lt;/code&gt; instead.&lt;/p&gt;
&lt;p&gt;I like to keep things as similar as possible, which is why I inverted &lt;code&gt;command&lt;/code&gt;
and &lt;code&gt;control&lt;/code&gt;on MacOS (in &lt;code&gt;System Preferences &amp;gt; Keyboard &amp;gt; Modifier Keys...&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;But now I have an issue in IntelliJ: I want keybinds that use &lt;code&gt;control&lt;/code&gt; on
Windows to use &lt;code&gt;command&lt;/code&gt; on MacOS, and vice-versa. IntelliJ is not able to make
this conversion for me.&lt;/p&gt;
&lt;p&gt;What I ended up doing was building two scripts: &lt;code&gt;kbd_mac_to_win.sh&lt;/code&gt; and
&lt;code&gt;kbd_win_to_mac.sh&lt;/code&gt; (you can find them along with my IntelliJ
config &lt;a href=&quot;https://github.com/norswap/intellij-settings&quot;&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;These scripts take the MacOS / Windows version of the keymap file, and convert
it to the equivalent in the other OS by converting between &lt;code&gt;control&lt;/code&gt; and
&lt;code&gt;command&lt;/code&gt; keys (note that internally, IntelliJ calls the &lt;code&gt;command&lt;/code&gt; key &lt;code&gt;meta&lt;/code&gt;).&lt;/p&gt;
&lt;h2 id=&quot;a-failed-attempt-to-automate-things&quot;&gt;A Failed Attempt to Automate Things&lt;/h2&gt;
&lt;p&gt;This is good and well, but running these commands each time I make a change to
my keybindings gets tiresome quickly.&lt;/p&gt;
&lt;p&gt;So I tried to automate it using git hooks. I succeeded, but only when using
&lt;code&gt;git&lt;/code&gt; on the command line. My suspicion is that IntelliJ uses some kind of
library that do not execute hooks.&lt;/p&gt;
&lt;p&gt;Nevertheless, I wrote the explanation while developing it on the command line,
so here it is anyway. It at least taught me how git hooks work, as well as the
&lt;a href=&quot;https://git-scm.com/book/en/v2/Customizing-Git-Git-Attributes#Keyword-Expansion&quot;&gt;smudge / clean&lt;/a&gt; feature (which I didn&amp;#39;t end up using).&lt;/p&gt;
&lt;h3 id=&quot;automating-with-git-hooks&quot;&gt;Automating with Git Hooks&lt;/h3&gt;
&lt;p&gt;I use a pre-commit and a post-commit hook. This was based off an idea I found
&lt;a href=&quot;http://stackoverflow.com/a/12802592/298664&quot;&gt;on Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I&amp;#39;ve pushed the hooks to the &lt;a href=&quot;https://github.com/norswap/intellij-settings&quot;&gt;same repository&lt;/a&gt; as my settings (look for
the files named &lt;code&gt;pre-commit&lt;/code&gt; and &lt;code&gt;post-commit&lt;/code&gt;). To install them, you need to
copy or symlink them to the &lt;code&gt;.git/hooks&lt;/code&gt; directory of your repository.&lt;/p&gt;
&lt;p&gt;The solution is not perfect. Namely if both the Windows and the Mac keymap have
changed, the script will give up and ask you to resolve the conflict manually.
Still, it works well enough for my purposes.&lt;/p&gt;
&lt;h3 id=&quot;locating-the-intellij-settings-repository&quot;&gt;Locating the IntelliJ Settings Repository&lt;/h3&gt;
&lt;p&gt;To install this stuff, you&amp;#39;ll need to locate your settings repository.&lt;/p&gt;
&lt;p&gt;For IntelliJ 2016.3 (and presumably, it&amp;#39;s similar for most other versions)
lives in
&lt;code&gt;C:\Users\&amp;lt;USERNAME&amp;gt;\.IdeaIC2016.3\config\settingsRepository\repository&lt;/code&gt; on
Windows.&lt;/p&gt;
&lt;p&gt;On MacOS, it&amp;#39;s &lt;code&gt;/Users/&amp;lt;USERNAME&amp;gt;/Library/IdeaIC2016.3/settingsRepository/repository&lt;/code&gt;.&lt;/p&gt;
      </description>
      <pubDate>2016-12-25T23:00:00.000Z</pubDate>
      <link>http://norswap.com/intellij-sync</link>
      <guid isPermaLink="true">http://norswap.com/intellij-sync</guid>
    </item>
    <item>
      <title>briefly</title>
      <description>
&lt;p&gt;I made a small Tweeter bot that tweets one Japanese Kana every hour.
It&amp;#39;s written in Node.js and deployed to Heroku. It turned out easier than
expected.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/kanatweeter&quot;&gt;https://twitter.com/kanatweeter&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/norswap/kana-tweeter&quot;&gt;https://github.com/norswap/kana-tweeter&lt;/a&gt;&lt;/p&gt;
      </description>
      <pubDate>2016-12-13T23:00:00.000Z</pubDate>
      <link>http://norswap.com/kana-tweeter-announce</link>
      <guid isPermaLink="true">http://norswap.com/kana-tweeter-announce</guid>
    </item>
    <item>
      <title>Deep Neural Pathways</title>
      <description>
&lt;p&gt;I sometimes worry that by specializing in certain of tasks at the exclusion of
others, I will lose the ability to learn new skills; that my neural pathways
will get frozen in a certain configuration, baking my current skillset into my
brain.&lt;/p&gt;
&lt;p&gt;But maybe it isn&amp;#39;t that bad. You lose flexibility, but you gain efficiency.
People who are great at their job do have it &amp;quot;wired&amp;quot; in them in some sense. They
see what is relevant from so far, it&amp;#39;s eerie. Maybe it&amp;#39;s because they ONLY see
what is relevant to their area of expertise.&lt;/p&gt;
&lt;p&gt;Of course, one should thrive to bake in the &lt;em&gt;right&lt;/em&gt; sets of defaults. And to
know when to reconfigure.&lt;/p&gt;
&lt;p&gt;Yesterday on Slack, a colleague (Simon) linked a video of
&lt;a href=&quot;https://www.youtube.com/watch?v=MFzDaBzBlL0&quot;&gt;a guy learning to ride an inverse bicycle&lt;/a&gt; that turns right when you
steer left and vice-versa. Turns out it&amp;#39;s amazingly hard. But after eight
months, he got it. And guess what: after a while he couldn&amp;#39;t ride the normal
bicycle anymore -- he had to try 20 minutes for it to come back.&lt;/p&gt;
&lt;p&gt;So what he did was not that he became more flexible: he overwrote a set of baked
circuitry with another set. I don&amp;#39;t know what the moral of the story is, but it
certainly makes you think.&lt;/p&gt;
      </description>
      <pubDate>2016-11-08T23:00:00.000Z</pubDate>
      <link>http://norswap.com/deep-neural-pathways</link>
      <guid isPermaLink="true">http://norswap.com/deep-neural-pathways</guid>
    </item>
    <item>
      <title>Robin Hood Hashing on the JVM</title>
      <description>
&lt;p&gt;Robin Hood Hashing, despite its name, isn&amp;#39;t a hashing technique, but rather a
way to implement &lt;a href=&quot;https://en.wikipedia.org/wiki/Linear_probing&quot;&gt;linear-probing hash tables&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In the classical linear probing implementation, whenever a hash table slot is
already taken (due to hash collision), you probe ahead until you find an empty
slot. When the hash table is highly loaded, this can lead to entries being
stored far away from their preferred position.&lt;/p&gt;
&lt;p&gt;Robin Hood Hashing features a notion of &lt;em&gt;displacement&lt;/em&gt;. The displacement of an
entry is the distance between its actual position and its preferred position.
Furthermore, we call &lt;em&gt;probe count&lt;/em&gt; the number of probed slots in order to find a
free slot. When inserting an entry, the final probe count is the diplacement.&lt;/p&gt;
&lt;p&gt;When inserting an entry A using Robin Hood Hashing, if you encounter an entry B
whose displacement is smaller than the probe count, you insert A in B&amp;#39;s
position, and relocate B further in the table (following the same rules).&lt;/p&gt;
&lt;p&gt;The result is that the displacements of all entries in the map tend to even out.
The length of the longest displacement tends to increase as the load increase
but very slowly (around 6 for a load of 0.9 &amp;mdash; see
&lt;a href=&quot;http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.130.6339&quot;&gt;this paper (pdf)&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;The technique is actually quite old. It was first &lt;a href=&quot;https://cs.uwaterloo.ca/research/tr/1986/CS-86-14.pdf&quot;&gt;published in 1986&lt;/a&gt;.
As for me, I first become aware of Robin Hood Hashing through
&lt;a href=&quot;http://www.sebastiansylvan.com/post/robin-hood-hashing-should-be-your-default-hash-table-implementation/&quot;&gt;a post by Sebastian Sylvan&lt;/a&gt;. Emmanuel Goossaert also has two posts
(&lt;a href=&quot;http://codecapsule.com/2013/11/11/robin-hood-hashing/&quot;&gt;one&lt;/a&gt;, &lt;a href=&quot;http://codecapsule.com/2013/11/17/robin-hood-hashing-backward-shift-deletion/&quot;&gt;two&lt;/a&gt;) analyzing and then improving the technique. If you&amp;#39;re
looking for further information, I highly recommend these posts.&lt;/p&gt;
&lt;p&gt;I was interesting in a more pragmatic question: could I use Robin Hood Hashing
and get a boost in performance? In particular, how would it perform on the JVM,
where I do most of my work these days?&lt;/p&gt;
&lt;p&gt;I implemented two versions of the algorithm (&lt;a href=&quot;https://github.com/ncellar/robinmap&quot;&gt;source&lt;/a&gt;). The first versions
stores entry objects in the table (hence requiring an extra indirection for each
probed slot). The second version used two tables: the first one was an array of
integers, where each table entry occupies two array entries. The first array
entry is the hash, the second is the displacement. The second table is an array
of objects. Here too, each table entry occupies two array entry. The first array
entry is the key, the second is the value. The theory is that most of the time,
when probing, you only need to check the hash and the displacement. Having those
in the primary table avoids extra indirection (and hence cache misses).&lt;/p&gt;
&lt;p&gt;Disappointingly enough, the performance delta between both techniques is too
small to be meaningful. In general however, the technique is almost as fast as
Java&amp;#39;s &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/HashMap.html&quot;&gt;&lt;code&gt;HashMap&lt;/code&gt;&lt;/a&gt; implementation. With some performance tweaking, I
believe it would be possible to close the gap. Be warned that my measurements
are very wonky. Nevertheless they gave me confidence enough to come to two
conclusions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Robin Hood Hashing is practical and fast enough to rival separate-chaining
hash table implementation (like Java&amp;#39;s &lt;code&gt;HashMap&lt;/code&gt;) on the JVM.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;However, it is not significantly faster either, and so it&amp;#39;s probably not worth
the trouble of maintaining my own implementation.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note this says nothing about the relative performance of Robin Hood Hashing and
separate-chaining on other platforms than the JVM.&lt;/p&gt;
&lt;p&gt;And off course, you should totally perform you own measurements. You can get
started from &lt;a href=&quot;https://github.com/ncellar/robinmap&quot;&gt;my own code&lt;/a&gt;. If anyone has more data to add to the
discussion, make sure to share it in the comments.&lt;/p&gt;
      </description>
      <pubDate>2016-10-09T22:00:00.000Z</pubDate>
      <link>http://norswap.com/robin-hood-hashing-jvm</link>
      <guid isPermaLink="true">http://norswap.com/robin-hood-hashing-jvm</guid>
    </item>
  </channel>
</rss>
