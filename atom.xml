<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>norswap</title>
    <description></description>      
    <link>http://norswap.com/</link>
    <atom:link href="http://norswap.com/atom.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>New Publication</title>
      <description>
        &lt;p&gt;&lt;strong&gt;Context-Sensitive Languages with Principled Stateful Parsing&lt;/strong&gt;&lt;/p&gt;
        &lt;p&gt;To appear at &lt;a href=&quot;http://conf.researchr.org/track/sle-2016/sle-2016-papers&quot;&gt;SLE 2016&lt;/a&gt;.&lt;br&gt;&lt;a href=&quot;http://norswap.com/pubs/sle2016.pdf&quot;&gt;Pre-print here&lt;/a&gt;.&lt;/p&gt;
      </description>
      <pubDate>2016-09-16T22:00:00.000Z</pubDate>
      <link>http://norswap.com/pub-context-sensitive</link>
      <guid isPermaLink="true">http://norswap.com/pub-context-sensitive</guid>
    </item>
    <item>
      <title>Stuckness and Understanding</title>
      <description>
        &lt;p&gt;The second big idea (1) I got out of reading
        &lt;a href=&quot;https://en.wikipedia.org/wiki/Zen_and_the_Art_of_Motorcycle_Maintenance&quot;&gt;Zen and the Art of Motorcycle Maintenance&lt;/a&gt; is how getting stuck is a
        common part of most work processes, and how to deal with it. The tidbits below
        are from my own notes, with some phrases lifted or paraphrased from Pirsig.&lt;/p&gt;
        &lt;p&gt;(1) &lt;a href=&quot;/peace-of-mind&quot;&gt;First one here&lt;/a&gt;&lt;/p&gt;
        &lt;hr&gt;
        &lt;p&gt;Getting stuck is common. Getting stuck is trying to do too many things at once.
        To get unstuck, separate the things and do them one at a time. Separate thinking
        about what to say and saying things. Make a list of things to say in any order.
        If there are too many, pick the best things.&lt;/p&gt;
        &lt;hr&gt;
        &lt;p&gt;Hypotheses generation is the realm of quality. The difference between a good and
        a bad mathematician or mechanic is the ability to select the good facts from the
        bad ones on the basis of quality. The scientific method operates only after you
        have an hypothesis.&lt;/p&gt;
        &lt;hr&gt;
        &lt;p&gt;Stuckness isn&amp;#39;t the worst of all possible situations: zen buddhists go to much
        throuble to induce it (through koans, meditation, etc). It&amp;#39;s called &amp;quot;begginer&amp;#39;s
        mind&amp;quot;. This moment is not to be feared but cultivated. If your mind is truly
        stuck, you might be much better off than when it was loaded with ideas.&lt;/p&gt;
        &lt;p&gt;If you try to hold onto the stuckness, it is bound to disappear. Your mind will
        naturally and freely move toward a solution. The longer you stay stuck, the more
        you see quality and it gets you unstuck every time. What&amp;#39;s getting you stuck is
        frantically trying to get unstuck by rummaging through your knowledge.&lt;/p&gt;
        &lt;p&gt;Stuckness is the psychic predecessor of all understanding. An egoless acceptance
        of it is key to understanding quality. Self-taught mechanics are often superior
        to instructed ones because they can handle new situations.&lt;/p&gt;
        &lt;hr&gt;
        &lt;p&gt;Harry Truman on adminstration programs:&lt;/p&gt;
        &lt;blockquote&gt;
        &lt;p&gt;We&amp;#39;ll just try them - and if they don&amp;#39;t work &amp;mdash; why then we&amp;#39;ll just try
        something else.&lt;/p&gt;
        &lt;/blockquote&gt;
        &lt;hr&gt;
        &lt;p&gt;The skill of the inventor is to choose the convenient facts. There is an
        inconscient selection (subliminal self) where many possible but useless
        facts/conventions are rejected.&lt;/p&gt;
        &lt;p&gt;Look at things that ties up with the theory... then looks at things that are
        very different, to gain insight. Maybe they are the same, maybe not. Select
        facts with harmony and mathematical beauty in mind.&lt;/p&gt;
      </description>
      <pubDate>2016-08-12T22:00:00.000Z</pubDate>
      <link>http://norswap.com/stuckness-and-understanding</link>
      <guid isPermaLink="true">http://norswap.com/stuckness-and-understanding</guid>
    </item>
    <item>
      <title>Good Work is Peace of Mind</title>
      <description>
        &lt;blockquote&gt;
        &lt;p&gt;I&amp;#39;ve a set of instructions at home which open up great realms for the
        improvement of technical writing. They begin, &amp;#39;Assembly of Japanese bicycle
        require great peace of mind.&amp;#39;&lt;/p&gt;
        &lt;/blockquote&gt;
        &lt;p&gt;Over the past few months, I have been reading
        &lt;a href=&quot;https://en.wikipedia.org/wiki/Zen_and_the_Art_of_Motorcycle_Maintenance&quot;&gt;Zen and the Art of Motorcycle Maintenance&lt;/a&gt; by Robert Pirsig. This post
        collects a few quotes on one of the big idea I got out of the book, namely that
        doing good work is synonymous with tending to your peace of mind.&lt;/p&gt;
        &lt;blockquote&gt;
        &lt;p&gt;Peace of mind isn&amp;#39;t at all superficial [...] It&amp;#39;s the whole thing. That which
        produces it is good maintenance; that which disturbs it is poor maintenance.
        [...] The ultimate test&amp;#39;s always your own serenity. If you don&amp;#39;t have this
        when you start and maintain it while you&amp;#39;re working you&amp;#39;re likely to build
        your personal problems right into the machine itself.&lt;/p&gt;
        &lt;p&gt;The test of the machine is the satisfaction it gives you. [...] If the machine
        produces tranquility it&amp;#39;s right. If it disturbs you it&amp;#39;s wrong until either
        the machine or your mind is changed. The test of the machine&amp;#39;s always your own
        mind. There isn&amp;#39;t any other test.&lt;/p&gt;
        &lt;/blockquote&gt;
        &lt;hr&gt;
        &lt;blockquote&gt;
        &lt;p&gt;Sometime look at a novice workman or a bad workman and compare his expression
        with that of a craftsman whose work you know is excellent and you&amp;#39;ll see the
        difference. The craftsman isn&amp;#39;t ever following a single line of instruction.
        He&amp;#39;s making decisions as he goes along. For that reason he&amp;#39;ll be absorbed and
        attentive to what he&amp;#39;s doing even though he doesn&amp;#39;t deliberately contrive this.
        His motions and the machine are in a kind of harmony. He isn&amp;#39;t following any set
        of written instructions because the nature of the material at hand determines
        his thoughts and motions, which simultaneously change the nature of the material
        at hand. The material and his thoughts are changing together in a progression of
        changes until his mind&amp;#39;s at rest at the same time the material&amp;#39;s right.&lt;/p&gt;
        &lt;/blockquote&gt;
        &lt;hr&gt;
        &lt;blockquote&gt;
        &lt;p&gt;I say inner peace of mind. It has no direct relationship to external
        circumstances. It can occur to a monk in meditation, to a soldier in heavy
        combat or to a machinist taking off that last ten-thousandth of an inch. It
        involves unselfconsciousness, which produces a complete identification with
        one&amp;#39;s circumstances, and there are levels and levels of this identification
        and levels and levels of quietness quite as profound and difficult of
        attainment as the more familiar levels of activity.&lt;/p&gt;
        &lt;p&gt;This inner peace of mind occurs on three levels of understanding. Physical
        quietness seems the easiest to achieve, although there are levels and levels of
        this too, as attested by the ability of Hindu mystics to live buried alive for
        many days. Mental quietness, in which one has no wandering thoughts at all,
        seems more difficult, but can be achieved. But value quietness, in which one has
        no wandering desires at all but simply performs the acts of his life without
        desire, that seems the hardest.&lt;/p&gt;
        &lt;p&gt;I&amp;#39;ve sometimes thought this inner peace of mind, this quietness is similar to if
        not identical with the sort of calm you sometimes get when going fishing, which
        accounts for much of the popularity of this sport. Just to sit with the line in
        the water, not moving, not really thinking about anything, not really caring
        about anything either, seems to draw out the inner tensions and frustrations
        that have prevented you from solving problems you couldn&amp;#39;t solve before and
        introduced ugliness and clumsiness into your actions and thoughts.&lt;/p&gt;
        &lt;p&gt;You don&amp;#39;t have to go fishing, of course, to fix your motorcycle. A cup of
        coffee, a walk around the block, sometimes just putting off the job for five
        minutes of silence is enough. When you do you can almost feel yourself grow
        toward that inner peace of mind that reveals it all. That which turns its back
        on this inner calm and the Quality it reveals is bad maintenance. That which
        turns toward it is good. The forms of turning away and toward are infinite but
        the goal is always the same.&lt;/p&gt;
        &lt;p&gt;[...]&lt;/p&gt;
        &lt;p&gt;Zen Buddhists talk about &amp;quot;just sitting,&amp;quot; a meditative practice in which the idea
        of a duality of self and object does not dominate one&amp;#39;s consciousness. What I&amp;#39;m
        talking about here in motorcyele maintenance is ``just fixing,&amp;#39;&amp;#39; in which the
        idea of a duality of self and object doesn&amp;#39;t dominate one&amp;#39;s consciousness. When
        one isn&amp;#39;t dominated by feelings of separateness from what he&amp;#39;s working on, then
        one can be said to &amp;quot;care&amp;quot; about what he&amp;#39;s doing. That is what caring really is,
        a feeling of identification with what one&amp;#39;s doing.&lt;/p&gt;
        &lt;p&gt;So the thing to do when working on a motorcycle, as in any other task, is to
        cultivate the peace of mind which does not separate one&amp;#39;s self from one&amp;#39;s
        surroundings. When that is done successfully then everything else follows
        naturally. Peace of mind produces right values, right values produce right
        thoughts. Right thoughts produce right actions and right actions produce work
        which will be a material reflection for others to see of the serenity at the
        center of it all.&lt;/p&gt;
        &lt;p&gt;[...]&lt;/p&gt;
        &lt;p&gt;The social values are right only if the individual values are right. The place
        to improve the world is first in one&amp;#39;s own heart and head and hands, and then
        work outward from there. other people can talk about how to expand the destiny
        of mankind. I just want to talk about how to fix a motorcycle.&lt;/p&gt;
        &lt;/blockquote&gt;
        &lt;hr&gt;
        &lt;blockquote&gt;
        &lt;p&gt;The real cycle you&amp;#39;re working on is yourself.&lt;/p&gt;
        &lt;/blockquote&gt;
      </description>
      <pubDate>2016-07-22T22:00:00.000Z</pubDate>
      <link>http://norswap.com/peace-of-mind</link>
      <guid isPermaLink="true">http://norswap.com/peace-of-mind</guid>
    </item>
    <item>
      <title>Building a static website with Ribosome and Node.js</title>
      <description>
        &lt;p&gt;I&amp;#39;ve transitioned the website from &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; to a custom system based on
        &lt;a href=&quot;http://ribosome.ch/&quot;&gt;Ribosome&lt;/a&gt;. I wasn&amp;#39;t updating the website very regularly, and each
        time I picked it up again, I had to spend an hour or so battling the
        particularly horrible Ruby dependencies on Windows.&lt;/p&gt;
        &lt;p&gt;Ribosome is essentially a templating engine driven by a script language
        (JavaScript, Python or Ruby &amp;mdash; I went with Javascript). It takes a js/py/rb
        script as input, which also contains lines starting with a dot. The script is
        run, but whenever a dotted line is encountered, it is sent to an output file. It
        supports embedded expression within dotted lines, special directives to change
        the file to which the output is redirected and include other files. This makes
        it possible to generate your whole website from a single script
        (&lt;a href=&quot;https://github.com/norswap/norswap.github.io/blob/master/.factory/generate.js&quot;&gt;have a look at mine&lt;/a&gt;).&lt;/p&gt;
        &lt;p&gt;Something I really like about Ribosome is how it respects whitespace, resulting
        in really nice-looking output, unlike most templating engines (have a look at
        the html for this page). It&amp;#39;s &lt;a href=&quot;http://ribosome.ch/documentation.html#advanced-layout-management&quot;&gt;block layouting&lt;/a&gt; capability is also quite
        handy.&lt;/p&gt;
        &lt;p&gt;I&amp;#39;m also very pleased about the Node.js ecosystem. I was really easy to find
        libraries to &lt;a href=&quot;https://www.npmjs.com/package/gray-matter&quot;&gt;parse YAML front matter&lt;/a&gt;, &lt;a href=&quot;https://www.npmjs.com/package/marked&quot;&gt;parse Markdown&lt;/a&gt;,
        &lt;a href=&quot;http://momentjs.com/&quot;&gt;manipulate dates&lt;/a&gt;, &lt;a href=&quot;https://www.npmjs.com/package/escape-html&quot;&gt;escaping html&lt;/a&gt; and
        &lt;a href=&quot;https://www.npmjs.com/package/tmp&quot;&gt;create temporary files&lt;/a&gt;. They were easy to use too.&lt;/p&gt;
        &lt;p&gt;All in all, updating the website was a surprisingly pleasant experience.
        Ribosome in particular is great, I encourage you to try it.&lt;/p&gt;
      </description>
      <pubDate>2016-07-12T22:00:00.000Z</pubDate>
      <link>http://norswap.com/ribosome-static-site</link>
      <guid isPermaLink="true">http://norswap.com/ribosome-static-site</guid>
    </item>
    <item>
      <title>Building Java with Make</title>
      <description>
        &lt;p&gt;In &lt;a href=&quot;https://github.com/norswap/violin&quot;&gt;violin&lt;/a&gt;, I set up the build using the good old &lt;code&gt;make&lt;/code&gt; tool (you might have
        gathered that &lt;a href=&quot;/rant-java-build&quot;&gt;I harbor no love&lt;/a&gt; for Java build systems).&lt;/p&gt;
        &lt;p&gt;For examples of how to perform common Java build tasks by calling command line
        tools from make, &lt;a href=&quot;https://github.com/norswap/violin/blob/master/makefile&quot;&gt;have a look at the makefile&lt;/a&gt;.&lt;/p&gt;
      </description>
      <pubDate>2016-07-08T22:00:00.000Z</pubDate>
      <link>http://norswap.com/build-java-with-make</link>
      <guid isPermaLink="true">http://norswap.com/build-java-with-make</guid>
    </item>
    <item>
      <title>Micro-Rant: Java Build Systems</title>
      <description>
        &lt;p&gt;Ant is Make in XML.&lt;/p&gt;
        &lt;p&gt;Maven is an over-engineered, yet castrated build system. You can&amp;#39;t do
        fundamental stuff (such as specifying which version of Java you want to use or
        &lt;strong&gt;moving files&lt;/strong&gt;) without importing a plugin or calling Ant. Want to do something
        slightly different? Build you own plugin (this process is more painful than it
        sounds). On the plus side, Maven does have a handy (but not best-in-class)
        dependency system, which is why we still have to suffer it.&lt;/p&gt;
        &lt;p&gt;Gradle allows custom build tasks (&lt;strong&gt;finally!&lt;/strong&gt;). It&amp;#39;s also huge, bloated, and
        comes with a &lt;a href=&quot;https://docs.gradle.org/current/userguide/userguide.html&quot;&gt;70-chapters manual&lt;/a&gt; that still manages to be lacunary and
        confusing. Understanding Gradle is not the work of an afternoon but of weeks.&lt;/p&gt;
        &lt;p&gt;Scala is not served better. To think sbt once stood for &amp;quot;simple build
        tool&amp;quot; (now retconned to &amp;quot;scala build tool&amp;quot;) is enough to choke on the irony.&lt;/p&gt;
        &lt;p&gt;&lt;a href=&quot;/build-java-with-make&quot;&gt;One might as well build Java using Make.&lt;/a&gt;&lt;/p&gt;
        &lt;h2 id=&quot;hope-&quot;&gt;Hope?&lt;/h2&gt;
        &lt;p&gt;&lt;a href=&quot;http://beust.com/kobalt/&quot;&gt;Kobalt&lt;/a&gt; is a sane build system for Kotlin &amp;amp; Java by Cedric Beust (the
        author of TestNG). However it&amp;#39;s still in its infancy.&lt;/p&gt;
        &lt;p&gt;&lt;a href=&quot;http://pluto-build.github.io/&quot;&gt;pluto&lt;/a&gt; is a prototype from academia (&lt;a href=&quot;http://www.informatik.uni-marburg.de/~seba/publications/pluto-incremental-build.pdf&quot;&gt;related paper&lt;/a&gt;)
        that enables incremental, minimal, and safe builds (no need to &lt;code&gt;make clean&lt;/code&gt;).
        You can&amp;#39;t really use it as is, but the idea only asks to be picked up.&lt;/p&gt;
      </description>
      <pubDate>2016-07-08T22:00:00.000Z</pubDate>
      <link>http://norswap.com/rant-java-build</link>
      <guid isPermaLink="true">http://norswap.com/rant-java-build</guid>
    </item>
    <item>
      <title>Released: Violin, a human-sized Kotlin utility library</title>
      <description>
        &lt;p&gt;I just released &lt;a href=&quot;https://github.com/norswap/violin&quot;&gt;violin&lt;/a&gt;, a small Kotlin utility library that features
        simple streams and some other stuff too.&lt;/p&gt;
      </description>
      <pubDate>2016-07-08T22:00:00.000Z</pubDate>
      <link>http://norswap.com/violin-release</link>
      <guid isPermaLink="true">http://norswap.com/violin-release</guid>
    </item>
    <item>
      <title>The Path to Wisdom</title>
      <description>
        &lt;blockquote&gt;
        &lt;p&gt;The path to wisdom is like this: each time you get one step closer, the target
        moves two steps away.&lt;/p&gt;
        &lt;/blockquote&gt;
      </description>
      <pubDate>2016-07-07T22:00:00.000Z</pubDate>
      <link>http://norswap.com/path-to-wisdom</link>
      <guid isPermaLink="true">http://norswap.com/path-to-wisdom</guid>
    </item>
    <item>
      <title>In Defence of Checked Exceptions</title>
      <description>
        &lt;p&gt;I had a minor epiphany recently. I realized that checked exceptions are great.
        Until then I supported the hip opinion that checked exceptions are a design
        mistakes, and that all exceptions should be unchecked.&lt;/p&gt;
        &lt;p&gt;The first step on my path to enlightenment was to realize the different use
        cases for checked and unchecked exceptions. Java Practices &lt;a href=&quot;http://www.javapractices.com/topic/TopicAction.do?Id=129&quot;&gt;says it best&lt;/a&gt;:&lt;/p&gt;
        &lt;blockquote&gt;
        &lt;p&gt;Unchecked exceptions represent defects in the program (bugs) - often invalid
            arguments passed to a non-private method. To quote from The Java Programming
            Language, by Gosling, Arnold, and Holmes: &amp;quot;Unchecked runtime exceptions
            represent conditions that, generally speaking, reflect errors in your
            program&amp;#39;s logic and cannot be reasonably recovered from at run time.&amp;quot;&lt;/p&gt;
        &lt;p&gt;Checked exceptions represent invalid conditions in areas outside the
            immediate control of the program (invalid user input, database problems,
            network outages, absent files).&lt;/p&gt;
        &lt;/blockquote&gt;
        &lt;p&gt;Ideally, all unchecked exceptions can be removed from your program without
        causing problems. They are just a debugging aid in pinpointing what went wrong
        when you made a mistake. Under this assumption, unchecked exceptions should
        never be handled: the program is incorrect and should crash and burn. Or at
        least, the component (~ a blob of features) should. It&amp;#39;s good form to insulate
        other components from the failure of a component, if they can still perform
        usefully without it.&lt;/p&gt;
        &lt;p&gt;On the other hand, you can&amp;#39;t prevent checked exceptions from occuring, they are
        outside your sphere of control. Hence the need to ensure that are handled
        correctly.&lt;/p&gt;
        &lt;p&gt;This seems to make sense. So why are people so fiercely opposed to checked
        exceptions?&lt;/p&gt;
        &lt;p&gt;Well imagine that you are writing some code, and you make a call to a method
        that throws a checked exception. You have two choices: add a &lt;code&gt;throws&lt;/code&gt; clause to
        your method, or wrap the method call in a try-catch block. The right thing to do
        is to use try-catch if you can handle the exception at that level, otherwise to
        add a &lt;code&gt;throws&lt;/code&gt; clause. In practice, the &lt;code&gt;throws&lt;/code&gt; clause is almost always the
        right thing to do. Yet, adding a &lt;code&gt;throws&lt;/code&gt; clause is tedious, because it must be
        propagated to all the callers of the current method. It&amp;#39;s much easier to add a
        try-catch block even though there&amp;#39;s nothing we can do about the exception, and
        so ignore it silently, leading to a loss of information in case of failure.&lt;/p&gt;
        &lt;p&gt;People who oppose exceptions have either performed this kind of abuse, or have
        been bitten by the consequences of other people doing it. I am not making this
        up, it&amp;#39;s quite obvious from pieces like &lt;a href=&quot;http://www.mindview.net/Etc/Discussions/CheckedExceptions&quot;&gt;this one&lt;/a&gt; and it&amp;#39;s explained in
        great length &lt;a href=&quot;http://stackoverflow.com/a/614494/298664&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
        &lt;p&gt;Summarized: people don&amp;#39;t want exceptions because they are going to be abused by
        lazy programmers.&lt;/p&gt;
        &lt;p&gt;I can also think of another reason why exceptions might be frustrating to use:
        people don&amp;#39;t understand the distinction between checked and unchecked exceptions
        as spelled out above, and so create frustrating APIs. Even Sun has been guilty
        of this: should &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/NoSuchMethodException.html&quot;&gt;NoSuchMethodException&lt;/a&gt; really be a checked exception?
        Probably not.&lt;/p&gt;
        &lt;p&gt;Finally, I&amp;#39;ll note that it&amp;#39;s sometimes allowable to cheat a little bit. If
        you&amp;#39;re writing a component with a well-delimited interface, you could for
        instance eschew checked exceptions if all the exceptions are going to be handled
        at the API boundary and no cleanup needs to be performed. You&amp;#39;re trading off
        some safety for some typing. Just be aware that you are making the trade-off.&lt;/p&gt;
        &lt;p&gt;In conclusion, do use checked exception, but use them properly: define checked
        exceptions only for areas outside the programmer&amp;#39;s control; and don&amp;#39;t silently
        swallow checked exceptions.&lt;/p&gt;
      </description>
      <pubDate>2015-10-02T22:00:00.000Z</pubDate>
      <link>http://norswap.com/checked-exceptions</link>
      <guid isPermaLink="true">http://norswap.com/checked-exceptions</guid>
    </item>
    <item>
      <title>The Most Useful Java Function</title>
      <description>
        &lt;p&gt;Warning: title may contain hyperbole.&lt;/p&gt;
        &lt;p&gt;Without further ado:&lt;/p&gt;
        &lt;pre&gt;&lt;code&gt;public class Caster
        {
            @SuppressWarnings(&amp;quot;unchecked&amp;quot;)
            public static &amp;lt;T&amp;gt; T cast(Object obj)
            {
                return (T) obj;
            }
        }
        &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now you can write:&lt;/p&gt;
        &lt;pre&gt;&lt;code&gt;List&amp;lt;Object&amp;gt; x = objectList(&amp;quot;cthulhu&amp;quot;);
        functionExpectingStringList(Caster.cast(x));
        &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;instead of:&lt;/p&gt;
        &lt;pre&gt;&lt;code&gt;List&amp;lt;Object&amp;gt; x = objectList(&amp;quot;cthulhu&amp;quot;);
        @SuppressWarnings(&amp;quot;unchecked&amp;quot;)
        List&amp;lt;String&amp;gt; y = (List&amp;lt;String&amp;gt;) x;
        functionExpectingStringList(y);
        &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So, it does two things: (1) automatically infer the destination type and (2)
        avoid an intermediate variable declaration, which you need if you want to ignore
        the resulting &amp;quot;unchecked cast&amp;quot; warning. This warning appears when the cast can&amp;#39;t
        be checked at run-time, as is the case when casting between types that differ in
        their generic type parameters.&lt;/p&gt;
        &lt;p&gt;The type inference part will only work with Java 8 and higher. The definition of
        &lt;code&gt;cast&lt;/code&gt; is valid on Java 5 and higher however, and you still get benefit (2).&lt;/p&gt;
        &lt;p&gt;In the cases where the type cannot be inferred, you need to specify it
        explicitly:&lt;/p&gt;
        &lt;pre&gt;&lt;code&gt;Object x = &amp;quot;cthulhu&amp;quot;;
        functionExpectingString(Caster.&amp;lt;String&amp;gt;cast(x));
        &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It also holds up remarkably well when using multiple casts with generics:&lt;/p&gt;
        &lt;pre&gt;&lt;code&gt;static &amp;lt;T&amp;gt; void takeArrayListPair(ArrayList&amp;lt;T&amp;gt; a, ArrayList&amp;lt;T&amp;gt; b) {}
        
        static void test()
        {
            List&amp;lt;String&amp;gt; x = new ArrayList&amp;lt;&amp;gt;();
            List&amp;lt;Integer&amp;gt; y = new ArrayList&amp;lt;&amp;gt;();
        
            takeArrayListPair(Caster.cast(x), Caster.cast(y));
            // x and y are casted to ArrayList&amp;lt;Object&amp;gt;
        }
        &lt;/code&gt;&lt;/pre&gt;
      </description>
      <pubDate>2015-02-23T23:00:00.000Z</pubDate>
      <link>http://norswap.com/java_caster</link>
      <guid isPermaLink="true">http://norswap.com/java_caster</guid>
    </item>
  </channel>
</rss>
